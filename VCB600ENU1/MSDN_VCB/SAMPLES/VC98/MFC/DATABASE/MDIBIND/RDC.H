#ifndef __RDC_H__
#define __RDC_H__

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


// Dispatch interfaces referenced by this interface
class CrdoResultset;

/////////////////////////////////////////////////////////////////////////////
// CRdc wrapper class

class CRdc : public CWnd
{
protected:
	DECLARE_DYNCREATE(CRdc)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
// CLSID for RDC1.0 (works)
//          = { 0x4f5f826a, 0x8aaf, 0x11ce, { 0xa7, 0x7f, 0x8, 0x0, 0x2b, 0x2f, 0x4e, 0x98 } };
// CLSID for RDC2.0 (does not work)
			= { 0x43478d73, 0x78e0, 0x11cf, { 0x8e, 0x78, 0x0, 0xa0, 0xd1, 0x0, 0x3, 0x8e } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName,
		LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect,
		CWnd* pParentWnd, UINT nID,
		CCreateContext* pContext = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); }

	BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle,
		const RECT& rect, CWnd* pParentWnd, UINT nID,
		CFile* pPersist = NULL, BOOL bStorage = FALSE,
		BSTR bstrLicKey = NULL)
	{ return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); }

// Attributes
public:

// Operations
public:
	CString GetDataSourceName();
	void SetDataSourceName(LPCTSTR lpszNewValue);
	CString GetSql();
	void SetSql(LPCTSTR lpszNewValue);
	long GetLoginTimeout();
	void SetLoginTimeout(long nNewValue);
	CString GetVersion();
	CString GetConnect();
	void SetConnect(LPCTSTR lpszNewValue);
	long GetQueryTimeout();
	void SetQueryTimeout(long nNewValue);
	long GetRowsetSize();
	void SetRowsetSize(long nNewValue);
	long GetResultsetType();
	void SetResultsetType(long nNewValue);
	long GetMaxRows();
	void SetMaxRows(long nNewValue);
	CString GetLogMessages();
	void SetLogMessages(LPCTSTR lpszNewValue);
	long GetKeysetSize();
	void SetKeysetSize(long nNewValue);
	short GetEditMode();
	void SetEditMode(short nNewValue);
	BOOL GetEnabled();
	void SetEnabled(BOOL bNewValue);
	CrdoResultset GetResultset();
	void SetRefResultset(LPDISPATCH newValue);
	BOOL GetReadOnly();
	void SetReadOnly(BOOL bNewValue);
	short GetOptions();
	void SetOptions(short nNewValue);
	CString GetUserName_();
	void SetUserName(LPCTSTR lpszNewValue);
	CString GetPassword();
	void SetPassword(LPCTSTR lpszNewValue);
	long GetCursorDriver();
	void SetCursorDriver(long nNewValue);
	LPDISPATCH GetFont();
	void SetRefFont(LPDISPATCH newValue);
	LPDISPATCH GetConnection();
	void SetRefConnection(LPDISPATCH newValue);
	long GetEOFAction();
	void SetEOFAction(long nNewValue);
	long GetBOFAction();
	void SetBOFAction(long nNewValue);
	long GetErrorThreshold();
	void SetErrorThreshold(long nNewValue);
	long GetLockType();
	void SetLockType(long nNewValue);
	long GetPrompt();
	void SetPrompt(long nNewValue);
	long GetAppearance();
	void SetAppearance(long nNewValue);
	LPDISPATCH GetEnvironment();
	void SetRefEnvironment(LPDISPATCH newValue);
	CString GetCaption();
	void SetCaption(LPCTSTR lpszNewValue);
	unsigned long GetBackColor();
	void SetBackColor(unsigned long newValue);
	unsigned long GetForeColor();
	void SetForeColor(unsigned long newValue);
	long GetBatchCollisionCount();
	VARIANT GetBatchCollisionRows();
	long GetBatchSize();
	void SetBatchSize(long nNewValue);
	short GetUpdateOperation();
	void SetUpdateOperation(short nNewValue);
	short GetUpdateCriteria();
	void SetUpdateCriteria(short nNewValue);
	void UpdateControls();
	void UpdateRow();
	void BeginTrans();
	void CommitTrans();
	void RollbackTrans();
	void Cancel();
	void Refresh();
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Developer Studio will insert additional declarations immediately before the previous line.

#endif // __RDC_H__
