<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>C/C++-based Sample Applications</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0352.htm','/dssd0000.htm','/dssd0294.htm','/index.htm','/dssd0354.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="samples_0001070207000000">C/C++-based Sample Applications</A></H2>
<BR CLEAR=ALL>
<P>This article details sample applications that are written in C++ or C. The sample applications implement media players or perform other application-related functions. The differences between them are mainly the different programming languages, API, or frameworks used.

<P>Some of these samples use the Microsoft&#174; Foundation Classes (MFC).
<P><B>Contents of this article:</B>
<UL><LI><A HREF="dssd0353.htm#samples_0001070207010000" TARGET="TEXT">C/COM-based Media Player</A>
<LI><A HREF="dssd0353.htm#samples_0001070207020000" TARGET="TEXT">DirectShow Capture</A> 
<LI><A HREF="dssd0353.htm#samples_0001070207030000" TARGET="TEXT">DVD Sample Player</A>
<LI><A HREF="dssd0353.htm#samples_0001070207040000" TARGET="TEXT">C++/COM-based Media Player</A>
<LI><A HREF="dssd0353.htm#samples_0001070207050000" TARGET="TEXT">MPEG Property Page Display</A>
<LI><A HREF="dssd0353.htm#samples_0001070207060000" TARGET="TEXT">Indeo Player</A>
<LI><A HREF="dssd0353.htm#samples_0001070207070000" TARGET="TEXT">InWindow Simple Playback in a Window</A>
<LI><A HREF="dssd0353.htm#samples_0001070207080000" TARGET="TEXT">PlayFile Simple Playback Application</A>
<LI><A HREF="dssd0353.htm#samples_0001070207090000" TARGET="TEXT">ShowStrm Application</A>
<LI><A HREF="dssd0353.htm#samples_00010702070a0000" TARGET="TEXT">VidClip Application</A>

</UL>
<A NAME="samples_0001070207010000"></A><P><B>C/COM-based Media Player</B>
<P>This C/COM-based media player sample, CPlay, is a simple application that renders multimedia files using DirectShow&#153; from within the C language. The CPlay sample does not use the Microsoft Foundation Classes (MFC). If you want to see a sample that uses MFC, see <A HREF="dssd0353.htm#samples_0001070207040000" TARGET="TEXT">C++/COM-based Media Player</A>. The CPlay sample shows how to utilize the DirectShow components without using the base classes provided with DirectShow. The sample creates a filter graph (by calling <A HREF="dssd0389.htm#external_00010a010900000b" TARGET="TEXT">CoCreateInstance</A> to get a pointer to the <A HREF="dssd0146.htm" TARGET="TEXT">IGraphBuilder</A> interface), and requests the filter graph to render a file. The filter graph is then controlled using the <A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl</A> interface. This sample also uses the <A HREF="dssd0150.htm" TARGET="TEXT">IMediaEvent</A> and <A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> interfaces. 

<P>CPlay is a minimal application that implements the following menu commands: Open, Play, Pause, Stop, and Exit on the File menu, and About on the Help menu.


<A NAME="samples_0001070207020000"></A><P><B>DirectShow Capture</B>
<P>The DirectShow capture sample, AMCap, demonstrates the basics of capturing audio and video from a hardware source to a specified output file or to a preview window.

<P>To see a list of the hardware capture devices on your system, choose the Devices menu; DirectShow uses the <A HREF="dssd0122.htm" TARGET="TEXT">ICreateDevEnum</A> interface to create the list of devices that appears. After choosing a device, choose the Set Frame Rate command from the Capture menu and set the desired frame rate; the default value is 30 frames per second. To set an output file for your capture, pick the Set Capture File command from the File menu. DirectShow uses the 
<A HREF="dssd0317.htm" TARGET="TEXT">File Writer</A> filter to associate your specified file with the capture session.

<P>If you want to turn audio capturing on or off, choose the Capture Audio command from the Capture menu. To turn capture previewing on or off, choose the Preview command from the Options menu. When you are ready to begin capturing, choose the Start Capture command from the Capture menu. If you want to save your captured data to a file other than the specified output file, choose the Save Captured Video As command from the File menu.

<P><B>Note:</B>  Before you begin capturing for the first time, choose Allocate File Space from the File menu to preallocate the capture file. Preallocating the file improves capture performance. AMCap calls <A HREF="dssd0119.htm#If_000106011f030100" TARGET="TEXT">AllocCapFile</A> to preallocate the capture file.<A NAME="samples_0001070207030000"></A><P><B>DVD Sample Player</B>
<P>The DirectShow DVD sample player, dvdsampl, is a simple application that plays DVD-Video content. It uses the <A HREF="dssd0129.htm" TARGET="TEXT">IDvdGraphBuilder</A> interface to build a DVD filter graph and to obtain interface pointers for <A HREF="dssd0102.htm" TARGET="TEXT">IAMLine21Decoder</A>, <A HREF="dssd0128.htm" TARGET="TEXT">IDvdControl</A>, and <A HREF="dssd0130.htm" TARGET="TEXT">IDvdInfo</A>. It uses those interfaces and allows you to turn closed captioning on and off, play in full screen mode, and display and select from DVD menus.

<P><B>Note:</B>  Your system must include DVD playback hardware to run this sample.<A NAME="samples_0001070207040000"></A><P><B>C++/COM-based Media Player</B>
<P>The C++/COM-based media player sample, MFCPlay, is a simple application that renders multimedia files using DirectShow from within C++ and the Microsoft Foundation Classes (MFC). It demonstrates how to interface to the DirectShow components by using the interfaces provided with DirectShow and the MFC. The sample creates a filter graph (by calling <A HREF="dssd0389.htm#external_00010a010900000b" TARGET="TEXT">CoCreateInstance</A> to get a pointer to the <A HREF="dssd0146.htm" TARGET="TEXT">IGraphBuilder</A> interface), and requests the filter graph to render a file. The filter graph is then controlled using the <A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl</A> interface. This sample also uses the <A HREF="dssd0150.htm" TARGET="TEXT">IMediaEvent</A> and <A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> interfaces.

<P>The MFCPlay application implements the following menu commands: Open, Play, Pause, Stop, and Exit on the File menu, and About on the Help menu.


<A NAME="samples_0001070207050000"></A><P><B>MPEG Property Page Display</B>
<P>The MPEGProp sample application demonstrates how to display a filter's property page.

<P>When you open MPEGProp, choose Open from the File menu and select an MPEG media file from the standard Open dialog box. Once you select an appropriate file, MPEGProp calls <A HREF="dssd0389.htm#external_00010a010900000b" TARGET="TEXT">CoCreateInstance</A> to create a new filter graph and renders the chosen source file. MPEGProp calls <A HREF="dssd0140.htm#If_0001060134030500" TARGET="TEXT">IFilterGraph::FindFilterByName</A> to locate the <A HREF="dssd0332.htm" TARGET="TEXT">MPEG Video Codec</A> filter, and then calls <A HREF="dssd0389.htm#external_00010a01090000b7" TARGET="TEXT">OleCreatePropertyFrame</A> with the codec pointer to display the filter's property page.



<A NAME="samples_0001070207060000"></A><P><B>Indeo Player</B>
<P>The Intel&#174; Indeo player sample, IPlay, renders multimedia files using DirectShow and demonstrates the Indeo Video Interactive application programming interfaces (API). The IPlay sample demonstrates how to access the advanced features of the Indeo Video Interactive (IVI) codec. It is a simple application written in C++ using the Microsoft Foundation Classes (MFC). If the file is an IVI format file, it enables controls 
for the IVI advanced features. The advanced features include local decoding, a decoding time limit, and the ability to adjust brightness, saturation, and contrast.

<P>The Ax_spec.h file defines the interfaces of the IVI codec. The 
CIPlayDoc::OnOpenDocument
function demonstrates how to determine if a file is an IVI format file. 
The CIPlayDoc::Getxxx and CIPlayDoc::Setxxx functions demonstrate 
how to get and set the IVI playback parameters for the advanced features.

<P>This sample makes use of the following interfaces.
<A HREF="dssd0146.htm" TARGET="TEXT">IGraphBuilder</A> to create a filter graph and render a file,
<A HREF="dssd0140.htm" TARGET="TEXT">IFilterGraph</A> to enumerate the filters in the filter graph,
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl</A> to play/pause/stop the playback,
<A HREF="dssd0150.htm" TARGET="TEXT">IMediaEvent</A> to be notified of <A HREF="dssd0291.htm#events_0001060801000400" TARGET="TEXT">EC_COMPLETE</A>
(playback complete) and other events,
<A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> to set the time that the media stream begins,
<A HREF="dssd0177.htm" TARGET="TEXT">IVideoWindow</A> to set the window size/caption/position, and
<A HREF="dssd0118.htm" TARGET="TEXT">IBasicVideo</A> to get the native window size.
It also implements and uses the <B>IIndeoDecode</B> interface
(not part of DirectShow itself).


<A NAME="samples_0001070207070000"></A><P><B>InWindow Simple Playback in a Window </B>
<P>The InWindow application is a "bare-bones" sample which shows minimal code required to play back a media file into a specific window. It builds upon the <A HREF="dssd0353.htm#samples_0001070207080000" TARGET="TEXT">PlayFile Simple Playback Application</A>. Like PlayFile it provides a file open dialog which allows you to open media files. It also uses <A HREF="dssd0146.htm" TARGET="TEXT">IGraphBuilder</A>, <A HREF="dssd0151.htm" TARGET="TEXT">IMediaEventEx</A>, and <A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl</A> as PlayFile does. InWindow expands upon the PlayFile functionality by calling <A HREF="dssd0177.htm#If_0001060159031f00" TARGET="TEXT">IVideoWindow::put_Owner</A>, <A HREF="dssd0177.htm#If_0001060159032400" TARGET="TEXT">IVideoWindow::put_WindowStyle</A>, and <A HREF="dssd0177.htm#If_0001060159032700" TARGET="TEXT">IVideoWindow::SetWindowPosition</A> to direct playback into the main application window.


<A NAME="samples_0001070207080000"></A><P><B>PlayFile Simple Playback Application</B>
<P>The PlayFile application is a "bare-bones" sample which shows minimal code required to play back a media file. It provides a file open dialog which allows you to open files including file types such as AVI, MPEG (MPG), MOV, and QT. PlayFile uses <A HREF="dssd0146.htm#If_000106013a030400" TARGET="TEXT">IGraphBuilder::RenderFile</A> to render the filter graph for the chosen media file, <A HREF="dssd0151.htm" TARGET="TEXT">IMediaEventEx</A> to handle signaling of events, <A HREF="dssd0149.htm#If_000106013d030700" TARGET="TEXT">IMediaControl::Run</A> to play the resulting filter graph, and <A HREF="dssd0149.htm#If_000106013d030800" TARGET="TEXT">IMediaControl::Stop</A> to stop playback. The sample calls <A HREF="dssd0177.htm" TARGET="TEXT">IVideoWindow</A> to control whether or not the playback window is visible. Video follows the default behavior and plays back in a separate window rather than into the main application window.

<P>See <A HREF="dssd0353.htm#samples_0001070207070000" TARGET="TEXT">InWindow Simple Playback in a Window</A> for a sample that builds upon PlayFile and plays back video into the main application window.


<A NAME="samples_0001070207090000"></A><P><B>ShowStrm Application</B>
<P>The ShowStrm application demonstrates how to get the DirectDraw Surface to blit a multimedia stream. It is a console application that send the movie out the surface when invoked from the command line with the following syntax:
<PRE><FONT FACE="Courier" SIZE="2">
SHOWSTRM Name_of_Movie
</FONT></PRE>
<P>For example, to play ANGRY.AVI, you could use the command:
<PRE><FONT FACE="Courier" SIZE="2">
C:\&gt;SHOWSTRM angry.avi
</FONT></PRE>
<A NAME="samples_00010702070a0000"></A><P><B>VidClip Application</B>
<P>The VidClip application demonstrates how to use the multimedia streaming interfaces and how to support rudimentary video editing. The VidClip sample reads from multiple streams and writes to a single stream. 
<P>On the <B>Video</B> menu in the VidClip application, you can use the <B>Add Clip</B> option to add clips to your list, including start and stop times, if you only want to add a portion of a clip. You can use the <B>Edit Clip</B> option to edit existing clips in the list, and the <B>Delete Clip</B> option to delete clips. The <B>Make a Movie</B> option combines the clips into one stream. 
<P>On the <B>File</B> menu, you can use the <B>Settings</B> option to set the height, width, depth, and compression for the stream data. You can use the <B>Save</B> option to save the settings to a file in your project. 





<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
