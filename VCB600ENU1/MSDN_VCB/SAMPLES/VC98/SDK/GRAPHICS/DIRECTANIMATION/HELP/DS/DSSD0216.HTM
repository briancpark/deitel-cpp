<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CEnumPins Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0215.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0217.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060224000000">CEnumPins Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/filter03.gif" WIDTH="195" HEIGHT="52" ALT="CEnumPins class hierarchy" >

<P>This class supports the <A HREF="dssd0133.htm" TARGET="TEXT">IEnumPins</A> enumeration interface by calling
<A HREF="dssd0194.htm" TARGET="TEXT">CBaseFilter</A> methods. The <B>CBaseFilter</B> class supports the <A HREF="dssd0116.htm#If_000106011c030100" TARGET="TEXT">IBaseFilter::EnumPins</A> method. Each time one of this interface's methods is called,
it checks to see if the pins that it enumerates have changed; it does this by calling
<A HREF="dssd0194.htm#Lib_000106020e080800" TARGET="TEXT">CBaseFilter::GetPinVersion</A> and matching the version the filter is keeping with the
version that it
 
stores during construction.

<P>If a pin enumerator becomes stale, there is no mechanism for resynchronizing it with 
the filter. The user must release the interface and retrieve another one. 

<P>Because the enumeration operation is likely to fail if the pin version changes
(indicating that the filter might have added or removed pins), 
all member functions in this class check the version by calling a private
member function, which calls the owning filter's <A HREF="dssd0194.htm#Lib_000106020e080800" TARGET="TEXT">CBaseFilter::GetPinVersion</A>
member function. These member functions then return <A HREF="dssd0293.htm#errcodes_0001060a0100002b" TARGET="TEXT">VFW_E_ENUM_OUT_OF_SYNC</A> if the version has changed. This should always work unless the filter has overridden
<B>CBaseFilter::GetPinVersion</B> to do something unexpected.

<P>All member functions in this class that return <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 

<A NAME="Lib_0001060224010000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030200" TARGET="TEXT">CEnumPins</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060224020000"></A><P><B>Implemented IUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030500" TARGET="TEXT">QueryInterface</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030100" TARGET="TEXT">AddRef</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030600" TARGET="TEXT">Release</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060224030000"></A><P><B>Implemented IEnumPins Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030300" TARGET="TEXT">Clone</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a duplicate <A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins</A> object 
with the same initial state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030400" TARGET="TEXT">Next</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the next pin after the current position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030700" TARGET="TEXT">Reset</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the current position back to the beginning.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0216.htm#Lib_0001060224030800" TARGET="TEXT">Skip</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Skips over one or more entries in the enumerator.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030100">CEnumPins::AddRef</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Increments the reference count for the calling interface on an object.

<P><B>ULONG</B> <B>AddRef</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an integer from 1 to <I>n</I>, the value of the new reference count.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030200">CEnumPins::CEnumPins</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Constructor for the <A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins</A> class.

<P><B>CEnumPins</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>CEnumPins</B> <I>*pEnumPins</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pFilter</I>
</DT><DD>Pointer to the filter on which to enumerate the pins.
</DD><DT><I>pEnumPins</I>
</DT><DD>Returned pointer to an <A HREF="dssd0133.htm" TARGET="TEXT">IEnumPins</A> interface object.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030300">CEnumPins::Clone</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Makes a copy of the enumerator. This allows the calling application to
retain two positions in the list of pins.

<P><B>HRESULT</B> <B>Clone</B><B>(</B><BR>&nbsp;&nbsp;<B>IEnumPins</B> <B>**</B> <I>ppEnum</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppEnum</I>
 </DT><DD>New enumerator that is a copy of this enumerator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0133.htm#If_000106012d030100" TARGET="TEXT">IEnumPins::Clone</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030400">CEnumPins::Next</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Places pointers to <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interfaces into the specified array.

<P><B>HRESULT</B> <B>Next</B><B>(</B><BR>&nbsp;&nbsp;<B>ULONG</B> <I>cPins</I><B>,</B><BR>&nbsp;&nbsp;<B>IPin</B> <B>**</B> <I>ppPins</I><B>,</B><BR>&nbsp;&nbsp;<B>ULONG</B> <B>*</B> <I>pcFetched</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>cPins</I>
 </DT><DD>Number of pins to place.
</DD><DT><I>ppPins</I>
 </DT><DD>Array in which to place the interface pointers.
</DD><DT><I>pcFetched</I>
 </DT><DD>Actual number of pins placed in the array.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0133.htm#If_000106012d030200" TARGET="TEXT">IEnumPins::Next</A> method.
The derived class is responsible for implementing <A HREF="dssd0194.htm#Lib_000106020e080600" TARGET="TEXT">CBaseFilter::GetPin</A>,
which this member function calls to retrieve the next pin. 

<P>Because this member function returns one or more interfaces that have had their reference
counts incremented, the caller of this member function must be sure to release
the interfaces by calling <A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> on the interfaces when done with them. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030500">CEnumPins::QueryInterface</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Retrieves a pointer to a specified interface on a component to which a
client currently holds an interface pointer. This method must call
<A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A> on the pointer it returns.

<P><B>HRESULT</B> <B>QueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>iid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppvObject</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>iid</I>
 </DT><DD>Specifies the IID of the interface being requested.
</DD><DT><I>ppvObject</I>
 </DT><DD>Receives a pointer to an interface pointer to the object on return.
 If the interface specified in <I>iid</I> is not supported
 by the object, <I>ppvObject</I> is set to NULL.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if the interface is supported, S_FALSE if not.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">IUnknown::QueryInterface</A> method
and passes out references to the <A HREF="dssd0133.htm" TARGET="TEXT">IEnumPins</A> interface.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030600">CEnumPins::Release</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Decrements the reference count for the calling interface on an object.
If the reference count on the object falls to zero, the object is freed from memory.

<P><B>ULONG</B> <B>Release</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the resulting value of the reference count, which is used for
diagnostic/testing purposes only. If you need to know that resources have been freed,
use an interface with higher-level semantics.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> method.<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030700">CEnumPins::Reset</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Resets the enumerator to the beginning so that the next call to the <A HREF="dssd0133.htm#If_000106012d030200" TARGET="TEXT">IEnumPins::Next</A> 
method will return, at a minimum, the first pin of the filter.

<P><B>HRESULT</B> <B>Reset</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0133.htm#If_000106012d030300" TARGET="TEXT">IEnumPins::Reset</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060224030800">CEnumPins::Skip</A></H3>
<A HREF="dssd0216.htm" TARGET="TEXT">CEnumPins Class</A>
<P>Skips the next specified number of pins.

<P><B>HRESULT</B> <B>Skip</B><B>(</B><BR>&nbsp;&nbsp;<B>ULONG</B> <I>cPins</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>cPins</I>
 </DT><DD>Number of pins to skip.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0133.htm#If_000106012d030400" TARGET="TEXT">IEnumPins::Skip</A> method.
This member function affects the next call to the <A HREF="dssd0133.htm#If_000106012d030200" TARGET="TEXT">IEnumPins::Next</A> method.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
