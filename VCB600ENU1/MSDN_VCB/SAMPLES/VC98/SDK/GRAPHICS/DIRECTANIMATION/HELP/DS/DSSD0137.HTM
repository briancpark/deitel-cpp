<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IFileSinkFilter Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0136.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0138.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_0001060131000000">IFileSinkFilter Interface</A></H2>
<BR CLEAR=ALL>
<P>The <B>IFileSinkFilter</B> interface is implemented on filters that write
media streams to a file. A file sink filter in a video capture filter graph,
for instance, writes the output of the video compression filter to a file.
Typically, the application running this filter graph will want to allow the
user to enter the name of the file to be written to. This interface enables
the communication of this information.

<P><A HREF="dssd0138.htm" TARGET="TEXT">IFileSinkFilter2</A> replaces this interface unless you need to maintain backward compatibility with ActiveMovie 1.0. 

<A NAME="If_0001060131010000"></A><P><B>When to Implement</B>
<P>If a filter needs the name of an output file, it should expose this
interface to allow an application to set the file name. Note that
there is currently no base class implementation of this interface.

<A NAME="If_0001060131020000"></A><P><B>When to Use</B>
<P>Any application that must set the name of the file into which the
file sink filter will write should use this interface to get and set the
file name.

<A NAME="If_0001060131030000"></A><P><B>Methods in Vtable Order</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IFileSinkFilter methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0137.htm#If_0001060131030200" TARGET="TEXT">SetFileName</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the name of the file into which media samples will be written.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0137.htm#If_0001060131030100" TARGET="TEXT">GetCurFile</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the name of the current file into which media samples will be written (the sink file).
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_0001060131030100">IFileSinkFilter::GetCurFile</A></H3>
<A HREF="dssd0137.htm" TARGET="TEXT">IFileSinkFilter Interface</A>
<P>Retrieves the name of the current file into which media samples will be written (the sink file).

<P><B>HRESULT</B> <B>GetCurFile</B><B>(</B><BR>&nbsp;&nbsp;<B>LPOLESTR</B> <I>*ppszFileName</I><B>,</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppszFileName</I>
 </DT><DD>[out] Name of the file set to receive media samples.
</DD><DT><I>pmt</I>
 </DT><DD>Type of media samples to be written to the file.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.
<H5>Remarks</H5>
<P>If a file name is not assigned, this method returns E_FAIL.

<H3><HR COLOR=#0000FF><A NAME="If_0001060131030200">IFileSinkFilter::SetFileName</A></H3>
<A HREF="dssd0137.htm" TARGET="TEXT">IFileSinkFilter Interface</A>
<P>Sets the name of the file into which media samples will be written.

<P><B>HRESULT</B> <B>SetFileName</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCOLESTR</B> <I>pszFileName</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>AM_MEDIA_TYPE</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pszFileName</I>
 </DT><DD>[in] Name of the file to receive the media samples.
</DD><DT><I>pmt</I>
 </DT><DD>[in] Type of media samples to be written to the file, and the
 media type of the sink filter's input pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.
<H5>Remarks</H5>
<P>If the <I>pszFileName</I> parameter names a nonexistent file, the
file will be created. If it names an existing file, the sink filter
will overwrite the file without first deleting it.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
