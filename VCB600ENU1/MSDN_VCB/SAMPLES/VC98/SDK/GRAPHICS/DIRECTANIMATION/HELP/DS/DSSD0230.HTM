<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CMemAllocator Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0229.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0231.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060232000000">CMemAllocator Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/filter10.gif" WIDTH="307" HEIGHT="201" ALT="CMemAllocator class hierarchy" >

<P>This class provides support for <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> by using the <B>new</B> operator
to allocate memory. Derived from <A HREF="dssd0189.htm" TARGET="TEXT">CBaseAllocator</A>,
it overrides the <A HREF="dssd0189.htm#Lib_0001060209050100" TARGET="TEXT">CBaseAllocator::Alloc</A> member function to
allocate a single block of memory large enough to hold all the requested
data areas, and then allocates (using the <B>new</B> operator) a <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object
for each requested buffer pointing into the data area.

<P>The <A HREF="dssd0195.htm" TARGET="TEXT">CBaseInputPin</A> and <A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin</A> classes instantiate
<B>CMemAllocator</B> objects as the default allocator if no other suitable allocator is provided.

<P>All member functions in this class that return <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 

<A NAME="Lib_0001060232010000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0230.htm#Lib_0001060232030100" TARGET="TEXT">Alloc</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allocates memory for a media sample (overrides <A HREF="dssd0189.htm#Lib_0001060209050100" TARGET="TEXT">CBaseAllocator::Alloc</A>).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0230.htm#Lib_0001060232030200" TARGET="TEXT">CMemAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator</A> object.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0230.htm#Lib_0001060232030500" TARGET="TEXT">ReallyFree</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Frees memory when called from the destructor 
(or from <A HREF="dssd0230.htm#Lib_0001060232030100" TARGET="TEXT">Alloc</A> when reallocating for new size or count).
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060232020000"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0230.htm#Lib_0001060232030400" TARGET="TEXT">Free</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates an overridden <A HREF="dssd0189.htm#Lib_0001060209050500" TARGET="TEXT">CBaseAllocator::Free</A> member function, called when 
a decommit operation is complete to free memory.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060232030000"></A><P><B>Implemented IMemAllocator Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0230.htm#Lib_0001060232030300" TARGET="TEXT">CreateInstance</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates new instances of <A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator</A> in the factory template.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0230.htm#Lib_0001060232030600" TARGET="TEXT">SetProperties</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the number of media samples and the size of each.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060232030100">CMemAllocator::Alloc</A></H3>
<A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator Class</A>
<P>Allocates a media sample object.

<P><B>HRESULT</B> <B>Alloc</B><B>(</B><B>void</B><B>)</B><B>;</B> <BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function instantiates <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> objects, adds them to the 
<A HREF="dssd0189.htm#Lib_0001060209010006" TARGET="TEXT">m_lFree</A> data members, and updates the <A HREF="dssd0189.htm#Lib_0001060209010004" TARGET="TEXT">m_lAllocated</A> count. 
This member function is called from <A HREF="dssd0160.htm#If_0001060148030100" TARGET="TEXT">IMemAllocator::Commit</A> when becoming active.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060232030200">CMemAllocator::CMemAllocator</A></H3>
<A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator Class</A>
<P>Constructs a <A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator</A> object.

<P><B>CMemAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <B>*</B> <I>pName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>lpUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <B>*</B> <I>phr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>pName</I>
 </DT><DD>Name of the allocator object.
</DD><DT><I>lpUnk</I>
 </DT><DD>Pointer to LPUNKNOWN.
</DD><DT><I>phr</I>
</DT><DD>Pointer to the general OLE return value.
Note that this value is changed only if this function fails.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This constructor is passed to <A HREF="dssd0189.htm#Lib_0001060209050200" TARGET="TEXT">CBaseAllocator::CBaseAllocator</A>, which initializes the
data members.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060232030300">CMemAllocator::CreateInstance</A></H3>
<A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator Class</A>
<P>Creates new instances of <A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator</A> in the factory template.

<P><B>static</B> <B>CUnknown</B> <B>*CreateInstance</B><B>(</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>pUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pUnk</I>
 </DT><DD>Pointer to the <A HREF="dssd0175.htm" TARGET="TEXT">IUnknown</A> interface. 
</DD><DT><I>phr</I>
 </DT><DD>Pointer to the <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value into which to place resulting information.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <I>pUnkRet</I> parameter, which is a <A HREF="dssd0253.htm" TARGET="TEXT">CUnknown</A> class object.


<H3><HR COLOR=#0000FF><A NAME="Lib_0001060232030400">CMemAllocator::Free</A></H3>
<A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator Class</A>
<P>Frees memory for a media sample object.

<P><B>HRESULT</B> <B>Free</B><B>(</B><B>void</B><B>)</B><B>;</B> <BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function overrides the pure virtual <A HREF="dssd0189.htm#Lib_0001060209050500" TARGET="TEXT">CBaseAllocator::Free</A> member function called when a decommit operation has completed. Memory is actually freed in <A HREF="dssd0230.htm#Lib_0001060232030500" TARGET="TEXT">ReallyFree</A>, which is called from the destructor, so this function is not used in this class.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060232030500">CMemAllocator::ReallyFree</A></H3>
<A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator Class</A>
<P>Releases all media samples in the free list.

<P><B>void</B> <B>ReallyFree</B> <B>(</B><B>void</B><B>)</B><B>;</B> <BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The <A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator</A> class holds memory until the object is actually deleted. 
This member function can be overridden to handle freeing media samples when a decommit occurs.

<P>This member function is protected. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060232030600">CMemAllocator::SetProperties</A></H3>
<A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator Class</A>
<P>Determines the size, number, and alignment of blocks.

<P><B>HRESULT</B> <B>SetProperties</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pRequest</I><B>,</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pActual</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pRequest</I>
 </DT><DD>Requested allocator properties.
</DD><DT><I>pActual</I>
 </DT><DD>Allocator properties actually set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The <I>pRequest</I> parameter is filled in by the caller with the requested values for
the count, number, and alignment as specified by the <A HREF="dssd0287.htm#structs_0001060501000100" TARGET="TEXT">ALLOCATOR_PROPERTIES</A>
structure. The <I>pActual</I> parameter is filled in by the allocator with the closest
values it can provide for the request. This member function cannot be called unless
the allocator has been decommitted using the <A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A> method.

<P>This member function replaces <B>SetCountAndSize</B> in previous releases.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
