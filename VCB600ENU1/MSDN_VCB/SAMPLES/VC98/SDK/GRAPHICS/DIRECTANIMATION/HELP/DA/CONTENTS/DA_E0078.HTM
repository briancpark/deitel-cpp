<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>DAStatic Functions Relevant to DAImage Objects</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/DA_E0077.htm','/DA_E0000.htm','/DA_E0030.htm','/index.htm','/DA_E0079.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="vref_0001060130000000">DAStatic Functions Relevant to DAImage Objects</A></H2>
<BR CLEAR=ALL>
<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000100">GradientHorizontalAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object that smoothly interpolates between the <I>start</I> and <I>stop</I> colors. Colors start on the left and go toward the right, based on the power specified by <I>power</I>. 

<P>The extent of the generated image is [-0.5,-0.5] to [0.5,0.5]. These dimensions are always in meters, even if the <A HREF="DA_E0115.htm#vref_0001060155020e00" TARGET="TEXT">PixelLibrary</A> is selected. To convert from pixels to meters, use the <A HREF="DA_E0086.htm#vref_0001060138000800" TARGET="TEXT">Pixel</A> conversion factor. 

<P><B>lib.GradientHorizontalAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>start</I><B>,</B><BR>&nbsp;&nbsp;<I>stop</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>start</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the first color of the gradient fill. 
</DD><DT><I>stop</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the final color of the gradient fill.
</DD><DT><I>power</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that is an exponent controlling how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. More precisely, if x is considered the normalized distance (from 0 to 1), then the gradient is x<SUP>p</SUP>, where p is in the range [0, infinity]. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000200">GradientHorizontal</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000100" TARGET="TEXT">GradientHorizontalAnim</A> except that <I>power</I> is a non-animated number.

<P><B>lib.GradientHorizontal</B><B>(</B><BR>&nbsp;&nbsp;<I>start</I><B>,</B><BR>&nbsp;&nbsp;<I>stop</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130000300">GradientPolygon</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a polygon from an array of points and an array of colors. The polygon has a smooth interpolation between the colors at the vertices. This interpolation is in RGB space. The image is transparent and unpickable outside the polygon. The polygon must be convex and fanned, with at least 3 vertices. The tessellation into triangles occurs by fanning around the first vertex. If, for example, the first triangle is from vertices [0, 1, 2], the second is from [0, 2, 3], and so on. The tessellation determines how the color interpolation is done. The bounding box is the box surrounding the points of the polygon.

<P><B>lib.GradientPolygon</B><B>(</B><BR>&nbsp;&nbsp;<I>pts</I><B>,</B><BR>&nbsp;&nbsp;<I>colors</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>pts</I>
 </DT><DD>The array (variant) of <A HREF="DA_E0058.htm" TARGET="TEXT">DAPoint2</A> points that determine the polygon's vertices.
</DD><DT><I>colors</I>
 </DT><DD>The array (variant) of <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> colors corresponding to the vertices.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000400">GradientSquare</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object with a square color wash. The image is a unit-sized square, centered at the origin, reaching from [-0.5, -0.5] to [0.5, 0.5]. The image contains the specified colors in the specified corners. The gradient fills are determined by bilinearly interpolating between these specified colors. (This means that, rather than being simply a four-cornered polygon, it is a polygon with four corners plus a point in the middle that is the average of the four colors.) The image is transparent and unpickable outside of this region. The interpolation is in RGB space. The bounding box is a box from (-0.5, -0.5) to (0.5, 0.5). 

<P><B>lib.GradientSquare</B><B>(</B><BR>&nbsp;&nbsp;<I>lowerLeft</I><B>,</B><BR>&nbsp;&nbsp;<I>upperLeft</I><B>,</B><BR>&nbsp;&nbsp;<I>upperRight</I><B>,</B><BR>&nbsp;&nbsp;<I>lowerRight</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>lowerLeft</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> color in the lower-left hand corner of square.
</DD><DT><I>upperLeft</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> color in the upper-left hand corner of the square.
</DD><DT><I>upperRight</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> color in the upper-right hand corner of the square.
</DD><DT><I>lowerRight</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> color in the lower-right hand corner of the square.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000500">HatchBackwardDiagonalAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates backward diagonal (lines that slant from right to left) hatch marks. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background.

<P><B>lib.HatchBackwardDiagonalAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the size of the hatch box. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000600">HatchBackwardDiagonal</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000500" TARGET="TEXT">HatchBackwardDiagonal</A> except that <I>size</I> is a non-animated number.

<P><B>lib.HatchBackwardDiagonal</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130000700">HatchCrossAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates cross-hatched markings. This function can be thought of as a combination of the <A HREF="DA_E0078.htm#vref_0001060130000f00" TARGET="TEXT">HatchVerticalAnim</A> and the <A HREF="DA_E0078.htm#vref_0001060130000d00" TARGET="TEXT">HatchHorizontalAnim</A> functions. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background. 

<P><B>lib.HatchCrossAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the size of the hatch box. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000800">HatchCross</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000700" TARGET="TEXT">HatchCrossAnim</A> except that <I>size</I> is a non-animated number (a double).

<P><B>lib.HatchCross</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130000900">HatchDiagonalCrossAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates diagonally criss-crossed hatch marks. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background. 

<P><B>lib.HatchDiagonalCrossAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the size of the hatch box. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000a00">HatchDiagonalCross</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000900" TARGET="TEXT">HatchDiagonalCrossAnim</A> except that <I>size</I> is a non-animated number (a double).

<P><B>lib.HatchDiagonalCross</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130000b00">HatchForwardDiagonalAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates forward diagonal (lines that slant from left to right) hatch marks. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines.

<P><B>lib.HatchForwardDiagonalAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the size of the hatch box. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000c00">HatchForwardDiagonal</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000b00" TARGET="TEXT">HatchForwardDiagonalAnim</A> except that <I>size</I> is a non-animated number (a double).

<P><B>lib.HatchForwardDiagonal</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130000d00">HatchHorizontalAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates horizontal hatch lines. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background.

<P><B>lib.HatchHorizontalAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the size of the hatch box. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130000e00">HatchHorizontal</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000d00" TARGET="TEXT">HatchHorizontalAnim</A> except that <I>size</I> is a non-animated number (a double).

<P><B>lib.HatchHorizontal</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130000f00">HatchVerticalAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates vertical hatch lines. All hatches fit in a box, of dimension <I>size</I>, that is infinitely tiled. For perpendicular hatches, the size of the box is twice the distance between the hatch lines. By default, hatch marks are black and appear on a transparent background.

<P><B>lib.HatchVerticalAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>color</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the line color.
</DD><DT><I>size</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the size of the hatch box. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001000">HatchVertical</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130000f00" TARGET="TEXT">HatchVerticalAnim</A> except that <I>size</I> is a non-animated number (a double).

<P><B>lib.HatchVertical</B><B>(</B><BR>&nbsp;&nbsp;<I>color</I><B>,</B><BR>&nbsp;&nbsp;<I>size</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130001100">ImportImage</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> by synchronously importing the given bitmap. The pixels of the bitmap are mapped to points in the image such that the center of the bitmap is placed at (0,0). The extent of the points affected depends on the width and height of the bitmap in pixels and the resolution of the bitmap in pixels per meter. The bounding box of an imported image is calculated as follows: 

<P>If the pixel dimensions are WxH, and given that:

<PRE><FONT FACE="Courier" SIZE="2">halfWidthMeters = lib.mul(lib.DANumber(W/2), lib.Pixel)
halfHeightMeters = lib.mul(lib.DANumber(H/2), lib.Pixel)
</FONT></PRE>
<P>then the bounding box will be (-halfWidthMeters, -halfHeightMeters) to (halfWidthMeters, halfHeightMeters) with the resultant image centered at the origin.

<P>Synchronous loads are blocking calls, which means that ticking will not continue on any model until all synchronous downloads are completed. These downloads should be small and listed before asynchronous downloads. Use asynchronous downloads for more complex images and sounds. See below for a description of the asynchronous function, <A HREF="DA_E0078.htm#vref_0001060130001200" TARGET="TEXT">ImportImageAsync</A>. 

<P><B>lib.ImportImage</B><B>(</B><BR>&nbsp;&nbsp;<I>url</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname of the image to be downloaded.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H5>Remarks</H5>
<P>The file formats that can be imported are .PNG, .JPG, .BMP, and .GIF.

<H5>See Also</H5>
<P><A HREF="DA_E0078.htm#vref_0001060130001400" TARGET="TEXT">ImportImageColorKey</A>

<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001200">ImportImageAsync</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Asynchronously imports the given bitmap. The pixels of the bitmap are mapped to points in the image such that the center of the bitmap is placed at (0,0). The extent of the points affected depends on the width and height of the bitmap in pixels and the resolution of the bitmap in pixels per meter. The bounding box of an imported image is calculated as follows:

<P>If the pixel dimensions are WxH, and given that:

<PRE><FONT FACE="Courier" SIZE="2">halfWidthMeters = lib.mul(lib.DANumber(W/2), lib.Pixel)
halfHeightMeters = lib.mul(lib.DANumber(H/2), lib.Pixel)
</FONT></PRE>
<P>then the bounding box will be (-halfWidthMeters, -halfHeightMeters) to (halfWidthMeters, halfHeightMeters) with the resultant image centered at the origin.

<P>Asynchronous downloads should be listed after synchronous ones and used for more complex sounds and images. For a description of the synchronous import function, see <A HREF="DA_E0078.htm#vref_0001060130001100" TARGET="TEXT">ImportImage</A>. 

<P><B>lib.ImportImageAsync</B><B>(</B><BR>&nbsp;&nbsp;<I>url</I><B>,</B><BR>&nbsp;&nbsp;<I>imgStandIn</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the image to be downloaded.
</DD><DT><I>imgStandIn</I>
 </DT><DD>The <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object to use while the contents at <I>url</I> are still being downloaded. This argument cannot be null, however, the image can be empty.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0046.htm" TARGET="TEXT">DAImportationResult</A> object, which has the following relevant properties:

<P>
<UL><LI><A HREF="DA_E0046.htm#vref_0001060110010100" TARGET="TEXT">CompletionEvent</A>,which is the event that fires once the download is complete. 
<LI><A HREF="DA_E0046.htm#vref_0001060110010400" TARGET="TEXT">Image</A>, which is the imported image.
<LI><A HREF="DA_E0046.htm#vref_0001060110010500" TARGET="TEXT">Progress</A>, which is the percentage of the download that has completed.
<LI><A HREF="DA_E0046.htm#vref_0001060110010600" TARGET="TEXT">Size</A>, which is the size of the imported image, in bytes.
</UL>

<H5>See Also</H5>
<P><A HREF="DA_E0078.htm#vref_0001060130001300" TARGET="TEXT">ImportImageAsyncColorKey</A>

<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001300">ImportImageAsyncColorKey</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Allows a particular color in the asynchronously imported image, specified by an RGB value, to be treated as transparent.

<P><B>lib.ImportImageAsyncColorKey</B><B>(</B><BR>&nbsp;&nbsp;<I>url</I><B>,</B><BR>&nbsp;&nbsp;<I>imgStandIn</I><B>,</B><BR>&nbsp;&nbsp;<I>red</I><B>,</B><BR>&nbsp;&nbsp;<I>green</I><B>,</B><BR>&nbsp;&nbsp;<I>blue</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the image to be downloaded.
</DD><DT><I>imgStandIn</I>
 </DT><DD>The <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object to use while the contents at <I>url</I> are still being downloaded. This argument cannot be null, however, the image can be empty.
</DD><DT><I>red</I>
 </DT><DD>The red component, expressed as a value (a byte) ranging from 0 to 255.
</DD><DT><I>green</I>
 </DT><DD>The green component, expressed as a value (a byte) ranging from 0 to 255.
</DD><DT><I>blue</I>
 </DT><DD>The blue component, expressed as a value (a byte) ranging from 0 to 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0046.htm" TARGET="TEXT">DAImportationResult</A> object.


<H5>See Also</H5>
<P><A HREF="DA_E0078.htm#vref_0001060130001200" TARGET="TEXT">ImportImageAsync</A>

<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001400">ImportImageColorKey</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Allows a particular color in the synchronously imported image, specified by an RGB value, to be treated as transparent.

<P><B>lib.ImportImageColorKey</B><B>(</B><BR>&nbsp;&nbsp;<I>url</I><B>,</B><BR>&nbsp;&nbsp;<I>red</I><B>,</B><BR>&nbsp;&nbsp;<I>green</I><B>,</B><BR>&nbsp;&nbsp;<I>blue</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the image to be downloaded.
</DD><DT><I>red</I>
 </DT><DD>The red component, expressed as a value (a byte) ranging from 0 to 255.
</DD><DT><I>green</I>
 </DT><DD>The green component, expressed as a value (a byte) ranging from 0 to 255.
</DD><DT><I>blue</I>
 </DT><DD>The blue component, expressed as a value (a byte) ranging from 0 to 255.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H5>See Also</H5>
<P><A HREF="DA_E0078.htm#vref_0001060130001100" TARGET="TEXT">ImportImage</A>

<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001500">ImportMovie</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Downloads a movie synchronously. Synchronous loads are blocking calls, which means that ticking will not continue on any model until all synchronous downloads are completed. These downloads should be small and listed before asynchronous downloads. Use asynchronous downloads for more complex images and sounds. See <A HREF="DA_E0078.htm#vref_0001060130001600" TARGET="TEXT">ImportMovieAsync</A> for a description of the asynchronous import function. 

<P>The image portion of a movie has the same bounding box and placement as a static image such as a GIF or PNG. For more information, see <A HREF="DA_E0078.htm#vref_0001060130001100" TARGET="TEXT">ImportImage</A>.

<P><B>lib.ImportMovie</B><B>(</B><BR>&nbsp;&nbsp;<I>url</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the movie to be downloaded.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0046.htm" TARGET="TEXT">DAImportationResult</A> object, which has the following relevant properties:

<P>
<UL><LI><A HREF="DA_E0046.htm#vref_0001060110010200" TARGET="TEXT">Duration</A>, which is the length of the movie, in seconds
<LI><A HREF="DA_E0046.htm#vref_0001060110010400" TARGET="TEXT">Image</A>, which is the imported image component of the movie.
<LI><A HREF="DA_E0046.htm#vref_0001060110010700" TARGET="TEXT">Sound</A>, which is the imported sound component of the movie.
</UL>

<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001600">ImportMovieAsync</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Imports a movie asynchronously. Asynchronous downloads should be listed after synchronous ones and used for more complex sounds and images. For a description of the synchronous import function, see <A HREF="DA_E0078.htm#vref_0001060130001500" TARGET="TEXT">ImportMovie</A>. 

<P>The image portion of a movie has the same bounding box and placement as a static image such as a GIF or PNG. For more information, see <A HREF="DA_E0078.htm#vref_0001060130001200" TARGET="TEXT">ImportImage</A>.

<P><B>lib.ImportMovieAsync</B><B>(</B><BR>&nbsp;&nbsp;<I>url</I><B>,</B><BR>&nbsp;&nbsp;<I>imgStandIn</I><B>,</B><BR>&nbsp;&nbsp;<I>sndStandIn</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>url</I>
 </DT><DD>The pathname (a string) of the movie to download.
</DD><DT><I>imgStandIn</I>
 </DT><DD>The <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> to use while the movie is still being downloaded. This parameter cannot be null, however, the image can be empty. 
</DD><DT><I>sndStandIn</I>
 </DT><DD>The <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> to use while the movie is still being downloaded. This parameter cannot be null, however, the sound can be silence. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0046.htm" TARGET="TEXT">DAImportationResult</A> object, which has the following relevant properties:

<P>
<UL><LI><A HREF="DA_E0046.htm#vref_0001060110010100" TARGET="TEXT">CompletionEvent</A>, which is the event that triggers once the download is complete. 
<LI><A HREF="DA_E0046.htm#vref_0001060110010200" TARGET="TEXT">Duration</A>, which is the length of the movie, in seconds
<LI><A HREF="DA_E0046.htm#vref_0001060110010400" TARGET="TEXT">Image</A>, which is the imported image component of the movie.
<LI><A HREF="DA_E0046.htm#vref_0001060110010500" TARGET="TEXT">Progress</A>, which is the percentage of the download that has completed.
<LI><A HREF="DA_E0046.htm#vref_0001060110010600" TARGET="TEXT">Size</A>, which is the size of the imported image, in bytes.
<LI><A HREF="DA_E0046.htm#vref_0001060110010700" TARGET="TEXT">Sound</A>, which is the imported sound component of the movie.
</UL>

<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001700">Overlay</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object by laying the image <I>i1</I> over the image behavior <I>i2</I>. The new image consists of all fully opaque points of <I>i1</I>, all points of <I>i2</I> that are under fully transparent points in <I>i1</I>, and all partially opaque points of <I>i1</I> modified such that the new point is a combination of the <I>i1</I> point and the <I>i2</I> point under it. The bounding box of a set of overlaid images is simply the union of the bounding boxes of the images themselves. 

<P><B>lib.Overlay</B><B>(</B><BR>&nbsp;&nbsp;<I>i1</I><B>,</B><BR>&nbsp;&nbsp;<I>i2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>i1</I> and <I>i2</I>
 </DT><DD>The <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001800">OverlayArray</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object by layering the <B>DAImage</B> objects. The bounding box of a set of overlaid images is simply the union of the bounding boxes of the images themselves. 

<P><B>lib.OverlayArray</B><B>(</B><BR>&nbsp;&nbsp;<I>im</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>im</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001900">RadialGradientPolygonAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object that is a regular polygon with a radial fill. The image contains the specified colors at the origin and the exterior points, respectively. The gradient fill is determined by the <I>power</I> argument and occurs in RGB space. Outside of the filled-in region, the image is transparent and unpickable. The bounding box is the box surrounding the points of the polygon.

<P><B>lib.RadialGradientPolygonAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>inner</I><B>,</B><BR>&nbsp;&nbsp;<I>outer</I><B>,</B><BR>&nbsp;&nbsp;<I>points</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>inner</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the color at the origin of the polygon. 
</DD><DT><I>outer</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the color at the vertices.
</DD><DT><I>points</I>
 </DT><DD>The <A HREF="DA_E0058.htm" TARGET="TEXT">DAPoint2</A> object representing the array of points that determine the polygon's vertices.
</DD><DT><I>power</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that is an exponent controlling how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. More precisely, if x is considered the normalized distance (from 0 to 1), then the gradient is x<SUP>p</SUP>, where p is in the range [0, infinity]. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001a00">RadialGradientPolygon</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130001900" TARGET="TEXT">RadialGradientPolygonAnim</A> except that <I>power</I> must be an animated number.

<P><B>lib.RadialGradientPolygon</B><B>(</B><BR>&nbsp;&nbsp;<I>inner</I><B>,</B><BR>&nbsp;&nbsp;<I>outer</I><B>,</B><BR>&nbsp;&nbsp;<I>points</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130001b00">RadialGradientRegularPolyAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object that is a regular, gradient polygon with the specified number of sides (there must be at least 3) and a radial fill. It has a unit width and height, centered at the origin, with an extent from (-0.5, -0.5) to (0.5, 0.5). (These dimensions are always in meters, even if the <A HREF="DA_E0115.htm#vref_0001060155020e00" TARGET="TEXT">PixelLibrary</A> is selected. To convert from pixels to meters, use the <A HREF="DA_E0086.htm#vref_0001060138000800" TARGET="TEXT">Pixel</A> conversion factor.) The image contains the specified colors at the origin and the exterior points, respectively. The gradient fill is determined by the <I>power</I> argument and occurs in RGB space. Outside of the filled-in region, the image is transparent and unpickable. The bounding box is the box surrounding the points of the polygon.

<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object that smoothly interpolates between the <I>start</I> and <I>stop</I> colors. Colors start on the left and go toward the right, based on the power specified by <I>power</I>. 

<P><B>lib.RadialGradientRegularPolyAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>inner</I><B>,</B><BR>&nbsp;&nbsp;<I>outer</I><B>,</B><BR>&nbsp;&nbsp;<I>edges</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>inner</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the color at the origin of the polygon. 
</DD><DT><I>outer</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object representing the color at the vertices.
</DD><DT><I>edges</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object representing the number of edges the polygon has. This parameter can also be of type double.
</DD><DT><I>power</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that is an exponent controlling how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. More precisely, if x is considered the normalized distance (from 0 to 1), then the gradient is x<SUP>p</SUP>, where p is in the range [0, infinity]. This must be an animated number. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001c00">RadialGradientRegularPoly</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130001b00" TARGET="TEXT">RadialGradientRegularPolyAnim</A> except that <I>power</I> is a non-animated number (a double).

<P><B>lib.RadialGradientRegularPoly</B><B>(</B><BR>&nbsp;&nbsp;<I>inner</I><B>,</B><BR>&nbsp;&nbsp;<I>outer</I><B>,</B><BR>&nbsp;&nbsp;<I>edges</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130001d00">RadialGradientSquareAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object with a square radial fill. The image is a unit-sized square, centered at the origin, reaching from [-0.5, -0.5] to [0.5, 0.5]. (These dimensions are always in meters, even if the <A HREF="DA_E0115.htm#vref_0001060155020e00" TARGET="TEXT">PixelLibrary</A> is selected. To convert from pixels to meters, use the <A HREF="DA_E0086.htm#vref_0001060138000800" TARGET="TEXT">Pixel</A> conversion factor.) The image contains the specified colors in the center and at the corners, respectively. The gradient fill is determined by the <I>power</I> argument. The interpolation occurs in RGB space. Outside of the fill, the image is transparent and unpickable. The bounding box is a box from [-0.5, -0.5] to [0.5, 0.5].

<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object that smoothly interpolates between the <I>start</I> and <I>stop</I> colors. Colors start on the left and go toward the right, based on the power specified by <I>power</I>. 

<P><B>lib.RadialGradientSquareAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>inner</I><B>,</B><BR>&nbsp;&nbsp;<I>outer</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>inner</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> at the center of the image.
</DD><DT><I>outer</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> at the corners of the image.
</DD><DT><I>power</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that is an exponent controlling how rapidly one color transitions into another. A value of 1 is a linear transition. For 0 &lt; <I>power</I> &lt; 1 the transition occurs rapidly, while <I>power</I> &gt; 1 means that the transition occurs more slowly. For example, if you are transitioning from red to blue, and <I>power</I> = 2, you will see a great deal of red in the gradient fill. On the other hand, if <I>power</I> = 0.5 (the inverse of 2), you will see very little red. If <I>power</I> = 0, you will see only blue. More precisely, if x is considered the normalized distance (from 0 to 1), then the gradient is x<SUP>p</SUP>, where p is in the range [0, infinity]. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130001e00">RadialGradientSquare</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130001d00" TARGET="TEXT">RadialGradientSquareAnim</A> except that <I>power</I> is a non-animated number (a double).

<P><B>lib.RadialGradientSquare</B><B>(</B><BR>&nbsp;&nbsp;<I>inner</I><B>,</B><BR>&nbsp;&nbsp;<I>outer</I><B>,</B><BR>&nbsp;&nbsp;<I>power</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_0001060130001f00">SolidColorImage</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object and applies the given color behavior to all points in the image. The bounding box of a solid-color image is the infinite bounding box. 

<P><B>lib.SolidColorImage</B><B>(</B><BR>&nbsp;&nbsp;<I>col</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>col</I>
 </DT><DD>The <A HREF="DA_E0038.htm" TARGET="TEXT">DAColor</A> object used to color the image.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130002000">StringImageAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Constructs a <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object from a <A HREF="DA_E0108.htm" TARGET="TEXT">DAString</A> object and a <A HREF="DA_E0043.htm" TARGET="TEXT">DAFontStyle</A> object. Because both parameters are (potentially) animated, they can vary over time.

<P><B>lib.StringImageAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>string</I><B>,</B><BR>&nbsp;&nbsp;<I>font</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>string</I>
 </DT><DD>The <A HREF="DA_E0108.htm" TARGET="TEXT">DAString</A> object specifying the (potentially) animated text.
</DD><DT><I>font</I>
 </DT><DD>The <A HREF="DA_E0043.htm" TARGET="TEXT">DAFontStyle</A> object specifying the font style (this can include the face, the size, the color, and the attributes).
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0045.htm" TARGET="TEXT">DAImage</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_0001060130002100">StringImage</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0078.htm#vref_0001060130002000" TARGET="TEXT">StringImageAnim</A> except that <I>string</I> is a string.

<P><B>lib.StringImage</B><B>(</B><BR>&nbsp;&nbsp;<I>string</I><B>,</B><BR>&nbsp;&nbsp;<I>font</I><BR>&nbsp;&nbsp;<B>)</B><BR><P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
