<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>DSound Audio Renderer</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0307.htm','/dssd0000.htm','/dssd0294.htm','/index.htm','/dssd0309.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="filteref_000107010e000000">DSound Audio Renderer</A></H2>
<BR CLEAR=ALL>
<P>The DSound Audio Renderer filter is a generic audio rendering filter that you can connect to the output of any of the following filters, if they contain WAV audio: <A HREF="dssd0314.htm" TARGET="TEXT">File Source (Async)</A>, <A HREF="dssd0315.htm" TARGET="TEXT">File Source (URL)</A>, <A HREF="dssd0333.htm" TARGET="TEXT">MPEG-1 Stream Splitter</A>, <A HREF="dssd0304.htm" TARGET="TEXT">AVI Splitter</A>, <A HREF="dssd0345.htm" TARGET="TEXT">WAVE Parser</A>, or any audio transform filter. In addition to its basic sound-rendering capabilities, this filter can process Microsoft DirectX&#174; DirectSound&#174; API calls; use the <A HREF="dssd0098.htm" TARGET="TEXT">IAMDirectSound</A> methods to obtain the necessary sound buffer and interface pointers.

<P>Note that this filter does not check the subtype of the audio stream; the <A HREF="dssd0389.htm#external_00010a01090000db" TARGET="TEXT">WAVEFORMAT</A> or <A HREF="dssd0075.htm#avispec_0001050502020900" TARGET="TEXT">WAVEFORMATEX</A> structure passed in the format block contains the information needed to connect to this filter. The <A HREF="dssd0299.htm" TARGET="TEXT">Audio Renderer</A> is the default audio rendering filter for DirectShow; to use the <B>DSound Audio Renderer</B> filter instead, you must insert it into the filter graph before rendering the media file.


<P>The filter's property sheet contains the following:

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B></B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Tab</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Property</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Values
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Audio Input pin (rendered)</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Preferred Media Types</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Lists the major type, subtype, and format

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Audio Renderer
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>wFormatTag</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Waveform-audio format type. There are many compression algorithms with registered format tags. You can find a complete list of format tags in the Mmreg.h header file.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>nChannels</B>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Number of channels in the waveform-audio data. Monaural data uses one channel and stereo data uses two channels.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>nSamplePerSec</B>
</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Rate, in samples per second (hertz), at which each channel should play or record. If <B>wFormatTag</B> is WAVE_FORMAT_PCM, then common values for <B>nSamplesPerSec</B> are 8.0 kHz, 11.025 kHz, 22.05 kHz, and 44.1 kHz. For non-PCM formats, you must compute this member according to the manufacturer's format specification.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>nAvgBytesPerSec</B>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Required average data-transfer rate, in bytes per second, for the format tag. If <B>wFormatTag</B> is WAVE_FORMAT_PCM, <B>nAvgBytesPerSec</B> should equal the product of <B>nSamplesPerSec</B>
 and <B>nBlockAlign</B>. For non-PCM formats, you must compute this member according to the manufacturer's format specification. Playback and record software can estimate buffer sizes by using the <B>nAvgBytesPerSec</B> member.

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>nBlockAlign</B>
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Block alignment, in bytes. The block alignment is the minimum atomic unit of data for the 
<B>wFormatTag</B> format type. If <B>wFormatTag</B> is WAVE_FORMAT_PCM, <B>nBlockAlign</B> should equal the product of <B>nChannels</B> and <B>wBitsPerSample</B> divided by 8 (bits per byte). For non-PCM formats, you must compute this member according to the manufacturer's format specification.

 <P>Playback and record software must process a multiple of <B>nBlockAlign</B> bytes of data at a time. Data written and read from a device must always start at the beginning of a block. For example, it is illegal to start playback of PCM data in the middle of a sample (that is, on a non-block-aligned boundary).

</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Rate
 </FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This value represents the rate of audio playback, where 1.0 is the authored speed. This value is a multiplier; a value of 2.0 is twice the authored speed and 0.5 is half.
</FONT></TD>
</TR>
</TABLE>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
