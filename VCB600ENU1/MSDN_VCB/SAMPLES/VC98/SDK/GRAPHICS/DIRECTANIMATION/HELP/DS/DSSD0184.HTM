<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CAMEvent Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0183.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0185.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060204000000">CAMEvent Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/util03.gif" WIDTH="179" HEIGHT="24" ALT="CAMEvent class hierarchy" >

<P>The <B>CAMEvent</B> class is an event object that can be set and waited on to provide 
interthread synchronization. This is currently implemented by using the Microsoft&#174; 
Win32&#174; <B>Event</B> application programming interfaces (APIs).

<P>Events can be created as manual-reset or automatic-reset, and will always be created as 
not set (nonsignaled state). They can also be cast to handles so as to be passed to the Win32 <A HREF="dssd0389.htm#external_00010a01090000d9" TARGET="TEXT">WaitForMultipleObjects</A> function.

<A NAME="Lib_0001060204010000"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060204010001">m_hEvent</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> Microsoft Win32 event handle.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060204020000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0184.htm#Lib_0001060204020100" TARGET="TEXT">CAMEvent</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0184.htm#Lib_0001060204020200" TARGET="TEXT">Check</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns TRUE if the event is currently set, but does not block.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0184.htm#Lib_0001060204020300" TARGET="TEXT">Reset</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Forces the event into a nonsignaled state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0184.htm#Lib_0001060204020400" TARGET="TEXT">Set</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Puts the event into a signaled state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0184.htm#Lib_0001060204020500" TARGET="TEXT">Wait</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Blocks until the event is signaled,
 or until an optional time-out occurs.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0184.htm#Lib_0001060204020600" TARGET="TEXT">operator HANDLE</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Gets the <A HREF="dssd0389.htm#external_00010a0109000036" TARGET="TEXT">HANDLE</A> object.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060204020100">CAMEvent::CAMEvent</A></H3>
<A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent Class</A>
<P>Constructs a <A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent</A> object.

<P><B>CAMEvent</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>fManualReset</I> <B>=</B> <B>FALSE</B><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>fManualReset</I>
 </DT><DD>If this value is FALSE, the event is reset when the <A HREF="dssd0184.htm#Lib_0001060204020500" TARGET="TEXT">CAMEvent::Wait</A> member function completes. If this parameter is
TRUE, you can set the event by calling the <A HREF="dssd0184.htm#Lib_0001060204020400" TARGET="TEXT">CAMEvent::Set</A> member function and then reset it by calling the <A HREF="dssd0184.htm#Lib_0001060204020300" TARGET="TEXT">CAMEvent::Reset</A> member function.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060204020200">CAMEvent::Check</A></H3>
<A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent Class</A>
<P>Returns TRUE if the event is currently set, but does not block.



<P><B>BOOL</B> <B>Check</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Remarks</H5>
<P>For events that are not manual-reset events, this member function causes the event to enter a nonsignaled state.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060204020300">CAMEvent::Reset</A></H3>
<A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent Class</A>
<P>Forces the event into a nonsignaled state.

<P><B>void</B> <B>Reset</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060204020400">CAMEvent::Set</A></H3>
<A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent Class</A>
<P>Puts the event into a signaled state.

<P><B>void</B> <B>Set</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>If the event is not a manual-reset event and there is at least one thread blocked on this event, the thread is released and the event remains in a nonsignaled state. If the event is not a manual-reset event and no threads are blocked on the event, it is set to a signaled state.

<P>If the event is not a manual-reset event, it is set to a signaled state and all the threads blocked on this event are released.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060204020500">CAMEvent::Wait</A></H3>
<A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent Class</A>
<P>Blocks until the event is signaled,
or until the indicated time-out occurs.
<P><B>BOOL</B> <B>Wait</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwTimeout</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dwTimeout</I>
 </DT><DD>Optional time-out value, represented in milliseconds. The default is INFINITE.
</DD></DL>
<H5>Return Values</H5>
<P>Returns TRUE if the event becomes signaled; otherwise, returns FALSE.

<H5>Remarks</H5>
<P> For events that are not manual-reset events, the action completing the 
<B>CAMEvent::Wait</B> member function causes the event to enter a nonsignaled 
state until the <A HREF="dssd0184.htm#Lib_0001060204020400" TARGET="TEXT">CAMEvent::Set</A> member function is called.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060204020600">CAMEvent::operator HANDLE</A></H3>
<A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent Class</A>
<P>Gets the <A HREF="dssd0389.htm#external_00010a0109000036" TARGET="TEXT">HANDLE</A> object associated with this <A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent</A> object.

<PRE><FONT FACE="Courier" SIZE="2">operator HANDLE () const;
</FONT></PRE>
<H5>Return Values</H5>
<P>Returns the Microsoft Win32 event <A HREF="dssd0389.htm#external_00010a0109000036" TARGET="TEXT">HANDLE</A>.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
