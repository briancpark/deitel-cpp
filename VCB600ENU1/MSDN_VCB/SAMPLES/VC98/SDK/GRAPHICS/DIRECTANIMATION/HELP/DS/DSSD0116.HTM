<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IBaseFilter Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0115.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0117.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_000106011c000000">IBaseFilter Interface</A></H2>
<BR CLEAR=ALL>
<P>The <B>IBaseFilter</B> interface abstracts an object that has typed input and output
connections and can be aggregated dynamically. All DirectShow&#153; filters
expose this interface.

<P>Since the <B>IBaseFilter</B> interface derives from the <A HREF="dssd0153.htm" TARGET="TEXT">IMediaFilter</A> interface,
it inherits <A HREF="dssd0389.htm#external_00010a0109000089" TARGET="TEXT">IPersist</A>.

<A NAME="If_000106011c010000"></A><P><B>When to Implement</B>
<P>Implement this interface on every DirectShow filter. It is recommended that you
use the <A HREF="dssd0194.htm#Lib_000106020e000000" TARGET="TEXT">CBaseFilter</A> class library to implement this interface.

<A NAME="If_000106011c020000"></A><P><B>When to Use</B>
<P>The filter graph manager is the primary user of this interface. Applications
or other filters can use <A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter</A> methods directly to enumerate or retrieve
pins or to get vendor information, but should not use any methods derived from
<A HREF="dssd0153.htm" TARGET="TEXT">IMediaFilter</A> to control media streaming (use the <A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl</A> methods
on the filter graph manager instead).

<A NAME="If_000106011c030000"></A><P><B>Methods in Vtable Order</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IMediaFilter methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0153.htm#If_0001060141030600" TARGET="TEXT">Stop</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the filter to transition to the new (stopped) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0153.htm#If_0001060141030300" TARGET="TEXT">Pause</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the filter to transition to the new (paused) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0153.htm#If_0001060141030400" TARGET="TEXT">Run</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the filter to transition to the new (running) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0153.htm#If_0001060141030100" TARGET="TEXT">GetState</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines the state of the filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0153.htm#If_0001060141030500" TARGET="TEXT">SetSyncSource</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Identifies the reference clock to which the filter should synchronize activity.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0153.htm#If_0001060141030200" TARGET="TEXT">GetSyncSource</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current reference clock (or NULL if there is no clock).
Passes a time value to synchronize independent streams.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IBaseFilter methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0116.htm#If_000106011c030100" TARGET="TEXT">EnumPins</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Enumerates the specified pins available on this filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0116.htm#If_000106011c030200" TARGET="TEXT">FindPin</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a pointer to the pin with the specified identifier.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0116.htm#If_000106011c030400" TARGET="TEXT">QueryFilterInfo</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves information about the specified filter.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0116.htm#If_000106011c030300" TARGET="TEXT">JoinFilterGraph</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies a filter that it has joined a filter graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0116.htm#If_000106011c030500" TARGET="TEXT">QueryVendorInfo</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves optional information supplied by a vendor for the specified filter.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_000106011c030100">IBaseFilter::EnumPins</A></H3>
<A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter Interface</A>
<P>Enumerates all the pins available on this filter.

<P><B>HRESULT</B> <B>EnumPins</B><B>(</B><BR>&nbsp;&nbsp;<B>IEnumPins</B> <B>**</B> <I>ppEnum</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppEnum</I>
</DT><DD>[out] Pointer to the <A HREF="dssd0133.htm" TARGET="TEXT">IEnumPins</A> interface to retrieve.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The interface returned by this method has had its reference count
incremented. Be sure to use <A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> on the interface
to decrement the reference count when you have finished using the interface.
<H3><HR COLOR=#0000FF><A NAME="If_000106011c030200">IBaseFilter::FindPin</A></H3>
<A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter Interface</A>
<P>Retrieves the pin with the specified identifier.

<P><B>HRESULT</B> <B>FindPin</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>Id</I><B>,</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>**ppPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Id</I>
</DT><DD>[in] Identifier of the pin.
</DD><DT><I>ppPin</I>
</DT><DD>[out] Pointer to the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface for this pin after the filter has
been restored. The returned <B>IPin</B> pointer has been reference counted.
The caller should use the <A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> method on the pointer when finished with it.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method, along with the <A HREF="dssd0165.htm#If_000106014d030c00" TARGET="TEXT">IPin::QueryId</A> method,
is used to implement persistent filter graphs. A filter must be able to translate the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A>
interface pointers to its pins into identifiers that can be saved along
with the configuration of the filter graph. It does this by using the
<B>IPin::QueryId</B> method. It must then be able to convert those identifiers
back into <B>IPin</B> interface pointers when the filter and its connections are
restored as part of a persistent filter graph. This is accomplished by using the
<B>IBaseFilter::FindPin</B> method.

<P>The <I>ppPin</I> parameter is set to NULL if the identifier cannot be matched.
<H3><HR COLOR=#0000FF><A NAME="If_000106011c030300">IBaseFilter::JoinFilterGraph</A></H3>
<A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter Interface</A>
<P>Notifies a filter that it has joined a filter graph.

<P><B>HRESULT</B> <B>JoinFilterGraph</B><B>(</B><BR>&nbsp;&nbsp;<B>IFilterGraph</B> <B>*</B> <I>pGraph</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pGraph</I>
</DT><DD>[in] Pointer to the filter graph to join.
</DD><DT><I>pName</I>
</DT><DD>[in, string] Name of the filter being added.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The filter should store this interface for later use because it might need to
notify the interface about events.
The filter should not add a reference count to this interface. Doing so causes
circular references and prevents the graph or the filter from ever being correctly
released. The filter graph manager does hold a reference on the filter.
The filter does not need to hold a reference to ensure that the interface does
not disappear; it is notified of any such disappearance by a further
call to <B>IBaseFilter::JoinFilterGraph</B>, with a null value for the <I>pGraph</I>
parameter to indicate that the filter is no longer part of the graph.
<H3><HR COLOR=#0000FF><A NAME="If_000106011c030400">IBaseFilter::QueryFilterInfo</A></H3>
<A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter Interface</A>
<P>Returns information about the filter.

<P><B>HRESULT</B> <B>QueryFilterInfo</B><B>(</B><BR>&nbsp;&nbsp;<B>FILTER_INFO</B> <B>*</B> <I>pInfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pInfo</I>
</DT><DD>[out] Pointer to a <A HREF="dssd0287.htm#structs_0001060501001200" TARGET="TEXT">FILTER_INFO</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The <A HREF="dssd0287.htm#structs_0001060501001200" TARGET="TEXT">FILTER_INFO</A> structure is defined as follows:

<PRE><FONT FACE="Courier" SIZE="2">typedef struct _FilterInfo  {
    [string] WCHAR achName[MAX_FILTER_NAME]; // allowed to be null
    IFilterGraph * pGraph;                   // null if not part of graph
    } FILTER_INFO ;
</FONT></PRE>
<P>Note that on return, if the <A HREF="dssd0287.htm#structs_0001060501001202" TARGET="TEXT">pGraph</A> member of the <A HREF="dssd0287.htm#structs_0001060501001200" TARGET="TEXT">FILTER_INFO</A>
structure is non-NULL, it will have an outstanding reference count and
should be released when the interface is no longer needed.

<H3><HR COLOR=#0000FF><A NAME="If_000106011c030500">IBaseFilter::QueryVendorInfo</A></H3>
<A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter Interface</A>
<P>Returns a vendor information string.

<P><B>HRESULT</B> <B>QueryVendorInfo</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <B>*</B> <I>pVendorInfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pVendorInfo</I>
</DT><DD>[out] Pointer to a string containing vendor information.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is optional and can return E_NOTIMPL. If implemented, memory
returned should be freed using the Microsoft&#174; Win32&#174; <A HREF="dssd0389.htm#external_00010a0109000011" TARGET="TEXT">CoTaskMemFree</A> function
when the application is done using it.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
