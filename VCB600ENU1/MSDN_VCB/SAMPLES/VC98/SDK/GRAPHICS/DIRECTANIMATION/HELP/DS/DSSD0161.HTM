<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IMemInputPin Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0160.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0162.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_0001060149000000">IMemInputPin Interface</A></H2>
<BR CLEAR=ALL>
<P>The <B>IMemInputPin</B> interface provides methods on an input pin to facilitate
passing data and flush notifications from a connected output pin of an upstream filter.

<A NAME="If_0001060149010000"></A><P><B>When to Implement</B>
<P>Implement this interface on the input pin of every filter. The <A HREF="dssd0195.htm#Lib_000106020f000000" TARGET="TEXT">CBaseInputPin</A> class
implements this interface.

<A NAME="If_0001060149020000"></A><P><B>When to Use</B>
<P>A connected output pin uses this interface to retrieve an <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A>
interface, to pass media samples to the input pin, and to flush pending buffers downstream.

<A NAME="If_0001060149030000"></A><P><B>Methods in Vtable Order</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IMemInputPin methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0161.htm#If_0001060149030100" TARGET="TEXT">GetAllocator</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the allocator interface that this input pin proposes as the interface
for the output pin to use.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0161.htm#If_0001060149030300" TARGET="TEXT">NotifyAllocator</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the input pin as to which allocator the output pin is actually going to use.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0161.htm#If_0001060149030200" TARGET="TEXT">GetAllocatorRequirements</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Optional method to use if the filter has specific alignment or prefix requirements but
could use an upstream allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives the next block of data from the stream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0161.htm#If_0001060149030600" TARGET="TEXT">ReceiveMultiple</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives the next block of data from the stream. This method behaves similarly to the
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method, but it works with multiple samples.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0161.htm#If_0001060149030500" TARGET="TEXT">ReceiveCanBlock</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if sending the <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method might block.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_0001060149030100">IMemInputPin::GetAllocator</A></H3>
<A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin Interface</A>
<P>Returns the allocator interface that this input pin proposes as the interface for the
output pin to use.

<P><B>HRESULT</B> <B>GetAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>**</B> <I>ppAllocator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppAllocator</I>
</DT><DD>[out] Pointer to an obtained <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H3><HR COLOR=#0000FF><A NAME="If_0001060149030200">IMemInputPin::GetAllocatorRequirements</A></H3>
<A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin Interface</A>
<P>Optional method to suggest specific alignment or prefix requirements to an upstream filter.

<P><B>HRESULT</B> <B>GetAllocatorRequirements</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pProps</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pProps</I>
</DT><DD>[in] <A HREF="dssd0287.htm#structs_0001060501000100" TARGET="TEXT">ALLOCATOR_PROPERTIES</A> structure containing the required size,
count, and alignment of the allocator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value. Returns E_NOTIMPL if not implemented.

<H5>Remarks</H5>
<P>Source filters that insist on their own allocator may use this
method downstream to accommodate downstream filters' memory
requirements for performance benefits.
<H3><HR COLOR=#0000FF><A NAME="If_0001060149030300">IMemInputPin::NotifyAllocator</A></H3>
<A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin Interface</A>
<P>Notifies the input pin as to which allocator the output pin is actually going to use.

<P><B>HRESULT</B> <B>NotifyAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAllocator</I><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bReadOnly</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pAllocator</I>
</DT><DD>[in] Pointer to the <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> object to use. This might or might not
be the same <B>IMemAllocator</B> object that the input pin provided in the
<A HREF="dssd0161.htm#If_0001060149030100" TARGET="TEXT">IMemInputPin::GetAllocator</A> method (the output pin could provide its
own allocator).
</DD><DT><I>bReadOnly</I>
</DT><DD>[out] Flag to indicate if the samples from this allocator are read-only.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is called by the connecting output pin to notify the pin on
which this interface is implemented of the allocator it chooses to use for transporting
media samples. If the <I>bReadOnly</I> parameter is TRUE, all samples in the allocator
are read-only and a copy must be made before modifying any of them.
<H3><HR COLOR=#0000FF><A NAME="If_0001060149030400">IMemInputPin::Receive</A></H3>
<A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin Interface</A>
<P>Receives the next block of data from the stream.

<P><B>HRESULT</B> <B>Receive</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>*</B> <I>pSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSample</I>
</DT><DD>[in] Pointer to a media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This is a blocking synchronous call. Typically, no blocking occurs, but
if a filter cannot process the sample immediately it may use the calling application's thread
to wait until it can.

<P>Use the <A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A> method if you need to hold the returned data block
beyond the completion of the <B>IMemInputPin::Receive</B>
method. If you use <A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A>, be sure to use
<A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> when done with it.
<H3><HR COLOR=#0000FF><A NAME="If_0001060149030500">IMemInputPin::ReceiveCanBlock</A></H3>
<A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin Interface</A>
<P>Determines if the implementation of the
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method might block
on the connected output pin.

<P><B>HRESULT</B> <B>ReceiveCanBlock</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Can return any <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value. The following specific success values can be returned.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Input pin will not block on a <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A>
method.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Input pin might block on a <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A>
method.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>An output pin from a filter might require notification if its thread might be blocked
when it calls the <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A> method on the connected input pin.
For example, a source filter might prefer to keep reading and buffering data rather than to be
blocked, and may choose to start another thread to wait on the blocking
<B>Receive</B> method.

<P>If your implementation of <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A> calls a downstream
filter's <B>Receive</B> method on the same thread,
the application will block if that filter blocks, and this method must indicate that.
<H3><HR COLOR=#0000FF><A NAME="If_0001060149030600">IMemInputPin::ReceiveMultiple</A></H3>
<A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin Interface</A>
<P>Returns the next block of data from the stream. This method behaves much like the
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method, but it works with
multiple samples.

<P><B>HRESULT</B> <B>ReceiveMultiple</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>**</B> <I>pSamples</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>nSamples</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <B>*</B> <I>nSamplesProcessed</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSamples</I>
</DT><DD>[in] Pointer to an array of samples.
</DD><DT><I>nSamples</I>
</DT><DD>[in] Number of samples to process.
</DD><DT><I>nSamplesProcessed</I>
</DT><DD>[out] Number of samples processed.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method allows a connected output pin to deliver multiple samples at one time.
Use it if, like <A HREF="dssd0234.htm#Lib_0001060236000000" TARGET="TEXT">COutputQueue</A>, the output pin batches samples for delivery
together. Implement this if your filter can handle batched samples more efficiently
than individual samples. The base class implementation of this method simply
calls <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> repeatedly. Override this implementation if you can
do something more efficiently in your derived class.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
