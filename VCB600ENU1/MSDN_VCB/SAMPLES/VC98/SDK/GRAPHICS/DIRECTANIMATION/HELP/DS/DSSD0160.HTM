<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IMemAllocator Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0159.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0161.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_0001060148000000">IMemAllocator Interface</A></H2>
<BR CLEAR=ALL>
<P>The <B>IMemAllocator</B> interface allocates <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> blocks to be
used for data transfer between pins. The blocks can be provided by the input pin,
output pin, or a third party. Release the <B>IMediaSample</B> object by calling the
<A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> method.

<A NAME="If_0001060148010000"></A><P><B>When to Implement</B>
<P>Implement this interface if you are providing a buffer for media samples. This
is typically done by filters that originate, copy, or provide a destination for
the media stream. For example, a source filter provides an allocator corresponding
to the incoming media, and a renderer filter provides an allocator corresponding to the
hardware memory (DirectX&#174;, for example). Intermediate transform filters can
create their own allocator if copying samples and not writing directly
to the renderer's allocator. Use the <A HREF="dssd0189.htm#Lib_0001060209000000" TARGET="TEXT">CBaseAllocator</A> class to implement
the <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> interface.

<A NAME="If_0001060148020000"></A><P><B>When to Use</B>
<P>Filters use this interface when retrieving or sending media samples. The
allocator used might actually belong to a filter further upstream or downstream
than the next filter, because many filters choose to pass the allocators through
and simply modify the data in place.

<A NAME="If_0001060148030000"></A><P><B>Methods in Vtable Order</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IMemAllocator methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0160.htm#If_0001060148030600" TARGET="TEXT">SetProperties</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies a desired number of blocks, size of the blocks, and block alignment figure.
This method returns the actual values for the same.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0160.htm#If_0001060148030400" TARGET="TEXT">GetProperties</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines the size, number, and alignment of blocks.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0160.htm#If_0001060148030100" TARGET="TEXT">Commit</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Commits the memory for the specified buffers.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">Decommit</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Releases the memory for the specified buffers.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0160.htm#If_0001060148030300" TARGET="TEXT">GetBuffer</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a container for a sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0160.htm#If_0001060148030500" TARGET="TEXT">ReleaseBuffer</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Releases a container for a sample.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_0001060148030100">IMemAllocator::Commit</A></H3>
<A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator Interface</A>
<P>Commits the memory for the specified buffers.

<P><B>HRESULT</B> <B>Commit</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The <A HREF="dssd0160.htm#If_0001060148030600" TARGET="TEXT">IMemAllocator::SetProperties</A> method must be called before
calling this method. The <A HREF="dssd0160.htm#If_0001060148030300" TARGET="TEXT">IMemAllocator::GetBuffer</A> method fails if it is called
before this method.
<H3><HR COLOR=#0000FF><A NAME="If_0001060148030200">IMemAllocator::Decommit</A></H3>
<A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator Interface</A>
<P>Releases the memory for the specified buffers.

<P><B>HRESULT</B> <B>Decommit</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>Any threads waiting in the <A HREF="dssd0160.htm#If_0001060148030300" TARGET="TEXT">IMemAllocator::GetBuffer</A> method return with
an error after this method is called. The <B>IMemAllocator::GetBuffer</B> method fails
if it is called before the <A HREF="dssd0160.htm#If_0001060148030100" TARGET="TEXT">IMemAllocator::Commit</A> method or after this method.
<H3><HR COLOR=#0000FF><A NAME="If_0001060148030300">IMemAllocator::GetBuffer</A></H3>
<A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator Interface</A>
<P>Retrieves a container for a sample.

<P><B>HRESULT</B> <B>GetBuffer</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>**</B> <I>ppBuffer</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pStartTime</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pEndTime</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwFlags</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppBuffer</I>
 </DT><DD>[out] Pointer to a retrieved media sample buffer.
</DD><DT><I>pStartTime</I>
 </DT><DD>[in] Either NULL or set to the beginning time of the sample to retrieve. Only the video renderer uses this.
</DD><DT><I>pEndTime</I>
 </DT><DD>[in] Either NULL or set to the ending time of the sample to retrieve. Only the video renderer uses this.
</DD><DT><I>dwFlags</I>
 </DT><DD>[in] <B>GetBuffer</B> supports the following flags.
 <DL>
<DT>AM_GBF_NOTASYNCPOINT
 </DT><DD>Dynamic format changes are not allowed on this buffer because it is not a key frame.
</DD><DT>AM_GBF_PREVFRAMESKIPPED
 </DT><DD>Set to TRUE if this sample is the first after a discontinuity. Only the video renderer uses this.
 </DD></DL>
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P><B>IMemAllocator::GetBuffer</B> is a locking, synchronous method to get the next
free buffer. Upon return, the properties are invalid, but the buffer pointer and size are correct.
This method succeeds only if memory has been committed. <B>GetBuffer</B> returns with an
error value if it is blocked waiting for a buffer, and the <A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A>
method is called on another thread.

<H3><HR COLOR=#0000FF><A NAME="If_0001060148030400">IMemAllocator::GetProperties</A></H3>
<A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator Interface</A>
<P>Returns the properties being used on this allocator.

<P><B>HRESULT</B> <B>GetProperties</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pProps</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pProps</I>
 </DT><DD>[out] Allocator properties.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>Calls to this method need not succeed until the <A HREF="dssd0160.htm#If_0001060148030100" TARGET="TEXT">IMemAllocator::Commit</A>
method is called.
<H3><HR COLOR=#0000FF><A NAME="If_0001060148030500">IMemAllocator::ReleaseBuffer</A></H3>
<A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator Interface</A>
<P>Releases the <A HREF="dssd0228.htm#Lib_0001060230000000" TARGET="TEXT">CMediaSample</A> object.

<P><B>HRESULT</B> <B>ReleaseBuffer</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pBuffer</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBuffer</I>
 </DT><DD>[in] Buffer to release.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H3><HR COLOR=#0000FF><A NAME="If_0001060148030600">IMemAllocator::SetProperties</A></H3>
<A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator Interface</A>
<P>Specifies the size, number, and alignment of blocks.

<P><B>HRESULT</B> <B>SetProperties</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pRequest</I><B>,</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pActual</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pRequest</I>
 </DT><DD>[in] Requested allocator properties.
</DD><DT><I>pActual</I>
 </DT><DD>[out] Allocator properties actually set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The <I>pRequest</I> parameter is filled in by the caller with the requested values for
the count, number, and alignment as specified by the <A HREF="dssd0287.htm#structs_0001060501000100" TARGET="TEXT">ALLOCATOR_PROPERTIES</A>
structure. The <I>pActual</I> parameter is filled in by the allocator with the closest
values that it can provide for the request. This method cannot be called unless
the allocator has been decommitted using the <A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A> method.

<P>This method assumes that blocks are all the same size.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
