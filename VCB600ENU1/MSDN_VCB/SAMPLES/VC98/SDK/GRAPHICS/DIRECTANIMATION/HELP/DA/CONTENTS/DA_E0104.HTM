<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>DAStatic Functions Relevant to DAVector2 Objects</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/DA_E0103.htm','/DA_E0000.htm','/DA_E0030.htm','/index.htm','/DA_E0105.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="vref_000106014a000000">DAStatic Functions Relevant to DAVector2 Objects</A></H2>
<BR CLEAR=ALL>
<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000100">AddVector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object that is the vector-valued sum of the two vectors. 

<P><B>lib.AddVector2</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD>The <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> objects to be added.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object.


<H5>See Also</H5>
<P><A HREF="DA_E0104.htm#vref_000106014a000600" TARGET="TEXT">SubVector2</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000200">DerivativeVector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object that is the instantaneous derivative (rate of change) of the given vector. For example, a constant vector yields a constant derivative of [0 0], and <A HREF="DA_E0104.htm#vref_000106014a000800" TARGET="TEXT">Vector2</A> (time, 0) (without any additional time substitutions) yields a constant derivative vector of [1 0]. 

<P><B>lib.DerivativeVector2</B><B>(</B><BR>&nbsp;&nbsp;<I>vec</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>vec</I>
 </DT><DD>A <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. 


<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000300">DotVector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that represent the "dot product" of the given vectors. The dot product is the product of the lengths of the vectors and the cosine of the angle between them.

<P><B>lib.DotVector2</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD>The <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000400">IntegralVector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object that represents the sum of the all values of <I>vec</I> from the given start time to the present. 

<P><B>lib.IntegralVector2</B><B>(</B><BR>&nbsp;&nbsp;<I>vec</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. 


<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000500">NegVector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object that is the same length as the original vector but points in the opposite direction.

<P><B>lib.NegVector2</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I>
 </DT><DD>A <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object that is the original vector.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000600">SubVector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. The direction and length of the vector are calculated by subtracting the coordinates of <I>v2</I> from the corresponding coordinates of <I>v1</I>. 

<P><B>lib.SubVector2</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD>The <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object.


<H5>See Also</H5>
<P><A HREF="DA_E0104.htm#vref_000106014a000100" TARGET="TEXT">AddVector2</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000700">Vector2Anim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object having a direction and length as specified by the given Cartesian coordinates.

<P><B>lib.Vector2Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>x</I><B>,</B><BR>&nbsp;&nbsp;<I>y</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>x</I> 
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object specifying the distance along the x-axis from the origin to a point. This must be an animated number. 
</DD><DT><I>y</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object specifying the distance along the y-axis. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. 


<H5>See Also</H5>
<P><A HREF="DA_E0104.htm#vref_000106014a000b00" TARGET="TEXT">Vector2Polar</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000800">Vector2</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0104.htm#vref_000106014a000700" TARGET="TEXT">Vector2Anim</A> except that <I>x</I> and <I>y</I> are non-animated numbers (doubles).

<P><B>lib.Vector2</B><B>(</B><BR>&nbsp;&nbsp;<I>x</I><B>,</B><BR>&nbsp;&nbsp;<I>y</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_000106014a000900">Vector2BSpline</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object based on a B-spline function. The function depends on the control elements, the knot vector, the mathematical degree, and the weights of the control elements (these are optional).

<P>A B-spline function without weights is piecewise polynomial and with weights is piecewise rational (the quotient of two polynomials). It requires that:

<P>numberOfControlElements = numberOfKnots - <I>degree</I> + 1

<P>The control elements define the approximate direction and shape of the function. The knots represent junction values, in parameter space, between the connected polynomial parts. 

<P>Given a degree <I>d</I> and a number of knots <I>k</I>, the function is valid in the range knot<I>d</I> to knot<I>k-d</I>+1, and is otherwise undefined. For example, for a degree 2 curve, the valid range is from the second knot to the next to the last knot, inclusive.

<P>The returned <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> is the traversal of the spline function according to the <I>evaluation</I> parameter. The evaluation parameter is a <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> that must be in the valid range of the spline, which is [knot<I>d</I>, knot<I>k</I>-<I>d</I>+1]. Any values outside this range are automatically clamped to the end values.

<P><B>lib.Vector2BSpline</B><B>(</B><BR>&nbsp;&nbsp;<I>degree</I><B>,</B><BR>&nbsp;&nbsp;<I>knots</I><B>,</B><BR>&nbsp;&nbsp;<I>control_elements</I><B>,</B><BR>&nbsp;&nbsp;<I>weights</I><B>,</B><BR>&nbsp;&nbsp;<I>evaluation</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>degree</I>
 </DT><DD>A number (a long) representing the mathematical degree of the B-spline to evaluate. Must be 1, 2, or 3. 
</DD><DT><I>knots</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> objects representing the knots used to calculate the B-spline. 
</DD><DT><I>control_elements</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0113.htm" TARGET="TEXT">DAPoint2</A> objects representing the control elements used to calculate the B-spline.
</DD><DT><I>weights</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> objects representing the weights used to calculate the rational B-spline. There must be the same number of weights as control elements. For non-rational B-splines, the value of <I>weights</I> is null.
</DD><DT><I>evaluation</I>
 </DT><DD>A <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that controls the spline evaluation. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000a00">Vector2PolarAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object having a direction and length as specified by the given polar coordinates.

<P><B>lib.Vector2PolarAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>XYangle</I><B>,</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>XYangle</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that is the counter-clockwise angle of the vector, in radians, from the positive x-ray. This must be an animated number.
</DD><DT><I>length</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that is the length of the vector. This must be an animated number. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. 


<H5>See Also</H5>
<P><A HREF="DA_E0104.htm#vref_000106014a000700" TARGET="TEXT">Vector2Anim</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014a000b00">Vector2Polar</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0104.htm#vref_000106014a000a00" TARGET="TEXT">Vector2PolarAnim</A> except that <I>XYangle</I> and <I>length</I> are non-animated numbers (doubles).

<P><B>lib.Vector2Polar</B><B>(</B><BR>&nbsp;&nbsp;<I>XYangle</I><B>,</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_000106014a000c00">Vector2PolarDegrees</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object having a direction and length as specified by the given polar coordinates.

<P><B>lib.Vector2PolarDegrees</B><B>(</B><BR>&nbsp;&nbsp;<I>XYangle</I><B>,</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>XYangle</I>
 </DT><DD>The number (a double) that is the counter-clockwise angle of the vector (expressed in degrees) from the positive x-ray.
</DD><DT><I>length</I>
 </DT><DD>The number (a double) that is the length of the vector. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0113.htm" TARGET="TEXT">DAVector2</A> object. 


<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
