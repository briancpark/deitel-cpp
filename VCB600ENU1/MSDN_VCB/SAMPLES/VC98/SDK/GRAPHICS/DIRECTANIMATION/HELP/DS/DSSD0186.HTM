<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CAMSchedule Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0185.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0187.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060206000000">CAMSchedule Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/sched01.gif" WIDTH="179" HEIGHT="24" ALT="CAMSchedule class hierarchy" >



<P>The <B>CAMSchedule</B> class relieves clocks from the burden of managing the advise requests. A clock can delegate such management to this class, provided that it calls this class's <A HREF="dssd0186.htm#Lib_0001060206010200" TARGET="TEXT">Advise</A> method when the earliest event should be fired. The application can fetch the time of the earliest event by calling <A HREF="dssd0186.htm#Lib_0001060206010600" TARGET="TEXT">GetNextAdviseTime</A>, or the application can track events by a combination of the times returned by <B>Advise</B> and the event times that the clock adds.

<A NAME="Lib_0001060206010000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010100" TARGET="TEXT">AddAdvisePacket</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a new pending notification.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010200" TARGET="TEXT">Advise</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Requests the scheduler to dispatch all events up to and including the time specified.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010300" TARGET="TEXT">CAMSchedule</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010400" TARGET="TEXT">GetAdviseCount</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the number of outstanding events.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010500" TARGET="TEXT">GetEvent</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the event handle to send if the advise time requires reevaluation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010600" TARGET="TEXT">GetNextAdviseTime</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the reference time at which the next advise should be set,
 or MAX_TIME if no events are scheduled.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0186.htm#Lib_0001060206010700" TARGET="TEXT">Unadvise</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Removes a previously established advise link.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010100">CAMSchedule::AddAdvisePacket</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Creates a new pending notification and adds it to the advise notification list.

<P><B>DWORD</B> <B>AddAdvisePacket</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>REFERENCE_TIME</B> <B>&amp;</B> <I>time1</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>REFERENCE_TIME</B> <B>&amp;</B> <I>time2</I><B>,</B><BR>&nbsp;&nbsp;<B>HANDLE</B> <I>hNotify</I><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bPeriodic</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>time1</I>
 </DT><DD>Time that the advise should take place.
</DD><DT><I>time2</I>
 </DT><DD>Period between notifications. (Ignored if <I>bPeriodic</I> is FALSE.)
</DD><DT><I>hNotify</I>
 </DT><DD>Notification mechanism.
 Either a semaphore handle (if <I>bPeriodic</I> is TRUE) or an event handle.
</DD><DT><I>bPeriodic</I>
</DT><DD>Flag that specifies whether the notification is sent repeatedly, or whether the notification is sent once. This can be one of the following values: 
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">TRUE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This is a periodic timer that will fire every <I>time2</I> units until canceled.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">This is a one-shot timer.
</FONT></TD></TR></TABLE>
</DD></DL>
<H5>Return Values</H5>
<P>Returns the advise token if successful, or zero if an error occurred.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010200">CAMSchedule::Advise</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Requests the scheduler to dispatch all events
up to and including the time specified.
This method is expected to be called by a controlling
clock specifying the current time,
just in time to dispatch the next advise request.
<P><B>REFERENCE_TIME</B> <B>Advise</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>REFERENCE_TIME</B> <B>&amp;</B> <I>rtTime</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>rtTime</I>
 </DT><DD>Current reference time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the reference time at which the next advise will expire,
or MAX_TIME if there are no outstanding events.

<H5>Remarks</H5>
<P>Clocks can call this method to advise the scheduler of the time.
The scheduler will then signal all the events that have expired,
and reschedule the periodic ones.

<P>It is not intended that clocks should call this method all the time,
rather that clocks will call <B>Advise</B> just one time. The time returned
will be invalidated if you start adding extra advises.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010300">CAMSchedule::CAMSchedule</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Constructs a <A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule</A> object.
<P><B>CAMSchedule</B><B>(</B><BR>&nbsp;&nbsp;<B>HANDLE</B> <I>hEvent</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>hEvent</I>
 </DT><DD>Event that <A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule</A> should fire if the advise time needs reevaluating.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010400">CAMSchedule::GetAdviseCount</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Returns the number of outstanding events.
<P><B>DWORD</B> <B>GetAdviseCount</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the number of outstanding events.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010500">CAMSchedule::GetEvent</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Retrieves the event handle to set if the advise time requires reevaluation.
<P><B>HANDLE</B> <B>GetEvent</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns a HANDLE to the event to set when this object's advise time requires reevaluation.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010600">CAMSchedule::GetNextAdviseTime</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Checks the time of the next advise.
<P><B>REFERENCE_TIME</B> <B>GetNextAdviseTime</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the reference time at which the next advise should be set,
or MAX_TIME if there are no events scheduled.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060206010700">CAMSchedule::Unadvise</A></H3>
<A HREF="dssd0186.htm" TARGET="TEXT">CAMSchedule Class</A>
<P>Removes a previously established advise link.

<P><B>HRESULT</B> <B>Unadvise</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwAdviseCookie</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dwAdviseToken</I>
 </DT><DD>Identifier (cookie) of the link that is being reset. This is the value
 returned by <A HREF="dssd0186.htm#Lib_0001060206010100" TARGET="TEXT">CAMSchedule::AddAdvisePacket</A>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if successful; otherwise, returns S_FALSE.



<H5>Remarks</H5>
<P>This member function is modeled after
the <A HREF="dssd0170.htm#If_0001060152030400" TARGET="TEXT">IReferenceClock::Unadvise</A> method.
Call <B>Unadvise</B> to remove the previously
established clock advise links.

<P><B>Unadvise</B> should be called for unexpired single-shot advise requests. Calling <B>Unadvise</B> with the token of an already expired event causes no problems, so applications can choose to always call <B>Unadvise</B> on their single-shot events without fear of problems.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
