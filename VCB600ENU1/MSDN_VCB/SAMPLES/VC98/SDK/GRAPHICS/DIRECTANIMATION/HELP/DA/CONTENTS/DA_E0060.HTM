<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>DASound Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/DA_E0059.htm','/DA_E0000.htm','/DA_E0030.htm','/index.htm','/DA_E0061.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="vref_000106011e000000">DASound Class</A></H2>
<BR CLEAR=ALL>
<P><B>DASound</B> Sound behavior objects have gain, rate, phase and pan attributes. Imported sounds (.WAV and .MIDI files) also have a length, returned by the import function. 

Gain (volume) defines how loud the sound is played. Rate defines how many times faster or slower the sound is played relative to its nominal rate. Phase defines how much to shift the time of the sound, and is useful for creating special sound effects such as echoes. Mixing the same sounds that are out of phase makes the sound richer. Pan defines the strength of the sound relative to the left and right sound channels. This is useful for positioning sounds.

<P>Gain, rate, phase, and pan can use animated numbers and can, therefore, change over time. This is useful for modifying the sound based, not only on time (see <A HREF="DA_E0035.htm#vref_0001060105010a00" TARGET="TEXT">SubstituteTime</A>) but also on other computed values such as distance. Sounds can be embedded in a geometry to achieve spatialized effects. Currently, all sounds are omnidirectional.

<P>This class inherits from <A HREF="DA_E0035.htm" TARGET="TEXT">DABehavior</A>.

<UL><LI><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010000" TARGET="TEXT">DASound Functions</A>
<LI><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e020000" TARGET="TEXT">Relevant Functions from the DAStatics Class</A>
</UL>
<H3><A NAME="vref_000106011e010000">DASound Functions</A></H3>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010100" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">GainAnim</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010200" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Gain</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010300" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Loop</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010400" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">PanAnim</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010500" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Pan</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010600" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">PhaseAnim</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010700" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Phase</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010800" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">RateAnim</A><BR>
<P><A CLASS=tctop HREF="DA_E0060.htm#vref_000106011e010900" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">Rate</A><BR>
<H4><HR COLOR=#0000FF><A NAME="vref_000106011e010100">GainAnim</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Multiplies the gain (volume) by the given amount. 

<P><B>soundObj.GainAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>gain</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>gain</I>
 </DT><DD>The factor by which to multiply the volume. Values greater than one increase the volume and values between zero and 1 decrease the sound's volume. Except for sound geometries, only attenuation values of 0-1 have an effect. For sound geometries, gains greater than 1 affect the distance from which sounds can be heard. The sounds, however, never sound louder than 1. This must be an animated number (DANumber).
</DD></DL>
<H5>Return Values</H5>
<P>Returns a DASound object representing the newly created sound.


<H4><HR COLOR=#0000FF><A NAME="vref_000106011e010200">Gain</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Same as <A HREF="DA_E0060.htm#vref_000106011e010100" TARGET="TEXT">GainAnim</A> except the parameter is non-animated.

<P><B>soundObj.Gain</B><BR><H4><HR COLOR=#0000FF><A NAME="vref_000106011e010300">Loop</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Creates a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object that repeats continuously. This method applies to the primitive sounds themselves. It does not loop a reactive sound behavior. Instead, it loops each of the primitive sounds that are components of the reactive sound behavior. For example, assume you have a sound that is <I>sound1</I> until the left mouse button is pressed, and then becomes <I>sound2</I>, and you loop this composite sound, as shown in the following JScript code:
<PRE><FONT FACE="Courier" SIZE="2">
snd =  m.Until(sound1, m.LeftButtonDown, sound2);
loopsnd= snd.Loop();
</FONT></PRE>
<P>The resulting sound is a continuous loop of <I>sound1</I> until the left mouse button is pressed, then becomes a continuous loop of <I>sound2</I>. It does not loop the composite behavior in that it does not loop <I>sound1</I> until the button is pressed, then cycle through <I>sound2</I> once, then go back to playing <I>sound1</I> until the button is pressed again.

<P><B>soundObj.Loop</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object.


<H4><HR COLOR=#0000FF><A NAME="vref_000106011e010400">PanAnim</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Creates a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object by repositioning a monophonic sound between the left and right channels. To do this, the amplitude of the sound in each channel is changed. This is similar to adjusting the balance on a stereo. 

<P><B>soundObj.PanAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>pan</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>pan</I>
 </DT><DD>The amount to pan. Can be a value in the range -1.0 to 1.0, with -1.0 as full left, 0 as center, and 1.0 as full right. This must be an animated number (DANumber).
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object.


<H5>Remarks</H5>
<P>With stereophonic sounds, panning away from a channel attenuates it. 

<H4><HR COLOR=#0000FF><A NAME="vref_000106011e010500">Pan</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Same as <A HREF="DA_E0060.htm#vref_000106011e010400" TARGET="TEXT">PanAnim</A> except the parameter is non-animated.

<P><B>soundObj.Pan</B><B>(</B><BR>&nbsp;&nbsp;<I>pan</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR=#0000FF><A NAME="vref_000106011e010600">PhaseAnim</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Creates a new <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object by shifting the sound in time by the given amount. Shifting the sound and mixing with the original sound allows for special effects, such as echoing.

<P><B>soundObj.PhaseAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>phase</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>phase</I>
 </DT><DD>The amount in seconds (or fractions of seconds) to shift the sound. This must be an animated number (DANumber).
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object.


<H5>Remarks</H5>
<P>For unlooped sounds, a positive phase shift delays the sound's starting time while a negative phase shift clips off the beginning of the sound. For looped sounds, a positive phase shift adds the end of the sound to the beginning of the sound, while a negative phase shift controls how far into the sound the beginning should be. Phase-shifting only takes effect when the sound begins playing. Currently, you cannot dynamically change the position of a running sound. This attribute composes additively.

<H4><HR COLOR=#0000FF><A NAME="vref_000106011e010700">Phase</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Same as <A HREF="DA_E0060.htm#vref_000106011e010600" TARGET="TEXT">PhaseAnim</A> except the parameter is non-animated.

<P><B>soundObj.Phase</B><B>(</B><BR>&nbsp;&nbsp;<I>phase</I><BR>&nbsp;&nbsp;<B>)</B><BR><H4><HR COLOR=#0000FF><A NAME="vref_000106011e010800">RateAnim</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Creates a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object by multiplying the playback rate by the given amount. 

<P><B>soundObj.RateAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>rate</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>rate</I>
 </DT><DD>Specifies the factor by which to multiply the rate. Values greater than one increase the rate and values between zero and 1 decrease it. This must be an animated number (DANumber).
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A> object.


<H5>Remarks</H5>
<P>A rate of 0 pauses the sound. Negative rates are not supported. This attribute composes additively.

<H4><HR COLOR=#0000FF><A NAME="vref_000106011e010900">Rate</A></H4>
<A HREF="DA_E0060.htm" TARGET="TEXT">DASound Class</A>
<P>Same as <A HREF="DA_E0060.htm#vref_000106011e010800" TARGET="TEXT">RateAnim</A> except the parameter is non-animated.

<P><B>soundObj.Rate</B><B>(</B><BR>&nbsp;&nbsp;<I>rate</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><A NAME="vref_000106011e020000">Relevant Functions from the DAStatics Class</A></H3>
<P>The following functions are defined in the <A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics</A> class and are most relevant to objects of type <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A>.

<P><A HREF="DA_E0096.htm#vref_0001060142000100" TARGET="TEXT">lib.ImportSound(url)</A>
<P><A HREF="DA_E0096.htm#vref_0001060142000200" TARGET="TEXT">lib.ImportSoundAsync(url, soundStandIn)</A> 
<P><A HREF="DA_E0096.htm#vref_0001060142000300" TARGET="TEXT">lib.mix(sound1, sound2)</A>
<P><A HREF="DA_E0096.htm#vref_0001060142000400" TARGET="TEXT">lib.mixArray(sounds)</A>
 
<H3><A NAME="vref_000106011e030000">Relevant Properties from the DAStatics Class</A></H3>
<P>The following properties are defined in the <A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics</A> class and are most relevant to objects of type <A HREF="DA_E0060.htm" TARGET="TEXT">DASound</A>.

<P><A HREF="DA_E0097.htm#vref_0001060143000100" TARGET="TEXT">lib.Silence</A>
<P><A HREF="DA_E0097.htm#vref_0001060143000200" TARGET="TEXT">lib.SinSynth</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
