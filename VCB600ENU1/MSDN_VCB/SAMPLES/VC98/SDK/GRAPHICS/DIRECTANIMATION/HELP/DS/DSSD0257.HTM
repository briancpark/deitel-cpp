<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>BSTR Functions</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0256.htm','/dssd0000.htm','/dssd0256.htm','/index.htm','/dssd0258.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="fmutil_0001060301000000">BSTR Functions</A></H2>
<BR CLEAR=ALL>
<P>The Wxutil.h header file in the Microsoft&#174; DirectShow&#153; base classes provides helper functions for allocating and freeing task-allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> strings.

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Function </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0257.htm#fmutil_0001060301000100" TARGET="TEXT">FreeBSTR</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Frees the task-allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> string.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0257.htm#fmutil_0001060301000200" TARGET="TEXT">WriteBSTR</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a task-allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> string by allocating task-allocated memory and copying a wide string to it.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060301000100">FreeBSTR</A></H3>
<P>Frees a task-allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> string from memory.

<P><B>STDAPI</B> <B>FreeBSTR</B><B>(</B><BR>&nbsp;&nbsp;<B>BSTR*</B> <I>pstr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pstr</I>
 </DT><DD>Address of the <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> to free.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if successful, or S_FALSE if <I>pstr</I> is null.

<H5>Remarks</H5>
<P>Memory is allocated for passing between objects across interfaces by calling <A HREF="dssd0389.htm#external_00010a0109000010" TARGET="TEXT">CoTaskMemAlloc</A>. It is freed by calling <A HREF="dssd0389.htm#external_00010a0109000011" TARGET="TEXT">CoTaskMemFree</A>. You can allocate, pass, and free memory safely between objects created in different programming languages by using a central memory allocator.

<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060301000200">WriteBSTR</A></H3>
<P>Allocates and fills a task-allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> string.

<P><B>STDAPI</B> <B>WriteBSTR</B><B>(</B><BR>&nbsp;&nbsp;<B>BSTR*</B> <I>pstrDest</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>szSrc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pstrDest</I>
 </DT><DD>Pointer to where the address of the allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> will be stored.
</DD><DT><I>szSrc</I>
 </DT><DD>Wide (Unicode) string that will be copied to the newly allocated <A HREF="dssd0389.htm#external_00010a0109000006" TARGET="TEXT">BSTR</A> string.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>Memory is allocated for passing between objects across interfaces by calling <A HREF="dssd0389.htm#external_00010a0109000010" TARGET="TEXT">CoTaskMemAlloc</A>. It is freed by calling <A HREF="dssd0389.htm#external_00010a0109000011" TARGET="TEXT">CoTaskMemFree</A>. By using a central memory allocator, memory can be allocated, passed, and freed safely between objects created in different programming languages.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
