<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CMediaSample Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0227.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0229.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060230000000">CMediaSample Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/filter08.gif" WIDTH="195" HEIGHT="52" ALT="CMediaSample class hierarchy" >

<P>This class represents a buffer object that supports the <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> interface. It represents a buffer in memory, together with some associated properties stored as protected data members.

<P>The constructor is passed as a pointer to the buffer with its length in bytes; other properties are
normally set and accessed through implemented <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> interface methods. These
properties describe various attributes of the media sample, such as the sample's media type, 
start and end time, and options. The options can include whether the media sample is a sync point, 
a preroll sample, or discontinuous with other samples.

<P>All member functions in this class that return <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 


<A NAME="Lib_0001060230010000"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010001">m_cbBuffer</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Size of the buffer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010002">m_dwFlags</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample property flags as follows:
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_Discontinuity: Set if start of a new segment. 
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_MediaTimeValid: Set if the media time is valid.
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_Preroll: Set if sample is a preroll sample.
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_StopValid: Set if the stop time is valid.
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_SyncPoint: Set if sample is a synchronization point.
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_TimeValid: Set if the time is valid.
 </FONT></TD></TR><TR><TD></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample_TypeChanged: Set if the type has changed.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010003">m_lActual</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Actual length of data in this sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010004">m_pAllocator</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> object associated with this object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010005">m_pMediaType</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to a structure containing the media type of the sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010006">m_pNext</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the next <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object in the free list.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010007">m_pBuffer</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the complete buffer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010008">m_End</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample end time.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060230010009">m_Start</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sample start time.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106023001000a">m_MediaStart</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Media start position.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106023001000b">m_MediaEnd</A></B> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Media end (offset from <A HREF="dssd0228.htm#Lib_000106023001000a" TARGET="TEXT">m_MediaStart</A>).
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060230020000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050200" TARGET="TEXT">CMediaSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051300" TARGET="TEXT">SetPointer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the buffer pointer and length.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060230030000"></A><P><B>Implemented IUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050d00" TARGET="TEXT">QueryInterface</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050100" TARGET="TEXT">AddRef</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050e00" TARGET="TEXT">Release</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060230040000"></A><P><B>Implemented IMediaSample Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050300" TARGET="TEXT">GetActualDataLength</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the data length of the sample.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050400" TARGET="TEXT">GetMediaTime</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the media time extents of the sample.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050500" TARGET="TEXT">GetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the media type of the <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050600" TARGET="TEXT">GetPointer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a read/write pointer to the memory of this buffer.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050700" TARGET="TEXT">GetSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the size, in bytes, of the buffer data area.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050800" TARGET="TEXT">GetTime</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the media time extents for this sample.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050900" TARGET="TEXT">IsDiscontinuity</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if there is discontinuity in the data stream.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050a00" TARGET="TEXT">IsPreroll</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicates a preroll property. If TRUE, this sample is for preroll only and should not be displayed.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050b00" TARGET="TEXT">IsSyncPoint</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the beginning of a sample is a synchronization point.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050f00" TARGET="TEXT">SetActualDataLength</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the data length of the sample.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051000" TARGET="TEXT">SetDiscontinuity</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the discontinuity property.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051100" TARGET="TEXT">SetMediaTime</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the media time of the <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051200" TARGET="TEXT">SetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the media type of the <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051400" TARGET="TEXT">SetPreroll</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets preroll property. If TRUE, this sample is for preroll only and should not be displayed.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051500" TARGET="TEXT">SetSyncPoint</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets sync-point property.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230051600" TARGET="TEXT">SetTime</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the stream time at which this sample should start and finish.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060230050000"></A><P><B>Implemented INonDelegatingUnknown Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0228.htm#Lib_0001060230050c00" TARGET="TEXT">NonDelegatingQueryInterface</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes out pointers to any interfaces added to the derived filter class.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050100">CMediaSample::AddRef</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Increments the reference count for the calling interface on an object.

<P><B>ULONG</B> <B>AddRef</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an integer from 1 to <I>n</I>, the value of the new reference count.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050200">CMediaSample::CMediaSample</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Constructs a <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.

<P><B>CMediaSample</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseAllocator</B> <I>*pAllocator</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPBYTE</B> <I>pBuffer</I> <B>=</B> <B>NULL</B><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>length</I> <B>=</B> <B>0</B><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>pName</I>
</DT><DD>Name of the media sample.
</DD><DT><I>pAllocator</I>
</DT><DD>Pointer to the <A HREF="dssd0189.htm" TARGET="TEXT">CBaseAllocator</A> object used for memory allocation.
</DD><DT><I>phr</I>
</DT><DD>Pointer to the general OLE return value. Note that this value is changed only if this function fails.
</DD><DT><I>pBuffer</I>
</DT><DD>Pointer to a memory buffer (to be allocated by the <I>pAllocator</I> parameter).
</DD><DT><I>length</I>
</DT><DD>Length of the allocated memory buffer.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The constructor creates an object with the buffer and buffer length set to that of the <A HREF="dssd0189.htm" TARGET="TEXT">CBaseAllocator</A> object to which it points.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050300">CMediaSample::GetActualDataLength</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves the data length of the sample.

<P><B>HRESULT</B> <B>GetActualDataLength</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the value of <A HREF="dssd0228.htm#Lib_0001060230010003" TARGET="TEXT">m_lActual</A> by default.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030100" TARGET="TEXT">IMediaSample::GetActualDataLength</A> method. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050400">CMediaSample::GetMediaTime</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves the starting and ending media time.

<P><B>HRESULT</B> <B>GetMediaTime</B><B>(</B><BR>&nbsp;&nbsp;<B>LONGLONG</B> <B>*</B> <I>pStart</I><B>,</B><BR>&nbsp;&nbsp;<B>LONGLONG</B> <B>*</B> <I>pEnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pStart</I>
</DT><DD>Retrieved beginning media time.
</DD><DT><I>pEnd</I>
</DT><DD>Retrieved ending media time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030200" TARGET="TEXT">IMediaSample::GetMediaTime</A> method.
It sets <I>pStart</I> to the current value of <A HREF="dssd0228.htm#Lib_000106023001000a" TARGET="TEXT">m_MediaStart</A>
and <I>pEnd</I> to the sum of <B>m_MediaStart</B> and <A HREF="dssd0228.htm#Lib_000106023001000b" TARGET="TEXT">m_MediaEnd</A>. 
If the sample has not been set, this member function returns <A HREF="dssd0293.htm#errcodes_0001060a01000070" TARGET="TEXT">VFW_E_MEDIA_TIME_NOT_SET</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050500">CMediaSample::GetMediaType</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves the media type of the <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.

<P><B>HRESULT</B> <B>GetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <B>**</B> <I>ppMediaType</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppMediaType</I>
</DT><DD>Pointer to a pointer to the retrieved media type.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value. When a sample is received and there is no format 
change, this method returns S_FALSE.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030300" TARGET="TEXT">IMediaSample::GetMediaType</A> method.
The member function makes a copy of the <A HREF="dssd0287.htm#structs_0001060501000300" TARGET="TEXT">AM_MEDIA_TYPE</A> structure and creates a task 
memory block to maintain the reference. When you are done with the media type, free the memory block 
with the <A HREF="dssd0267.htm#fmutil_000106030b000500" TARGET="TEXT">FreeMediaType</A> utility function, and then free the 
entire media type with the Microsoft&#174; Win32&#174; <A HREF="dssd0389.htm#external_00010a0109000011" TARGET="TEXT">CoTaskMemFree</A> function.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050600">CMediaSample::GetPointer</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves a read/write pointer to the buffer's memory.

<P><B>HRESULT</B> <B>GetPointer</B><B>(</B><BR>&nbsp;&nbsp;<B>BYTE</B> <B>**</B> <I>ppBuffer</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppBuffer</I>
</DT><DD>Retrieved pointer to the buffer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000034" TARGET="TEXT">VFW_E_BUFFER_NOTSET</A> if <A HREF="dssd0228.htm#Lib_0001060230051300" TARGET="TEXT">CMediaSample::SetPointer</A> was not
called before calling this function, or NOERROR otherwise.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030400" TARGET="TEXT">IMediaSample::GetPointer</A> method.
<B>GetPointer</B> returns the value of <A HREF="dssd0228.htm#Lib_0001060230010007" TARGET="TEXT">m_pBuffer</A>, set using <A HREF="dssd0228.htm#Lib_0001060230051300" TARGET="TEXT">CMediaSample::SetPointer</A>. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050700">CMediaSample::GetSize</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves the size, in bytes, of the buffer data area.

<P><B>HRESULT</B> <B>GetSize</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the value of <A HREF="dssd0228.htm#Lib_0001060230010001" TARGET="TEXT">m_cbBuffer</A> by default.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030500" TARGET="TEXT">IMediaSample::GetSize</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050800">CMediaSample::GetTime</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves the stream time at which this sample should begin and finish.

<P><B>HRESULT</B> <B>GetTime</B><B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pTimeStart</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pTimeEnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTimeStart</I>
</DT><DD>Retrieved beginning stream time.
</DD><DT><I>pTimeEnd</I>
</DT><DD>Retrieved ending stream time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a0100006e" TARGET="TEXT">VFW_E_SAMPLE_TIME_NOT_SET</A> if this sample doesn't have valid timestamps, or NOERROR otherwise.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030600" TARGET="TEXT">IMediaSample::GetTime</A> method. It sets <I>pTimeStart</I> to the current value of <A HREF="dssd0228.htm#Lib_0001060230010009" TARGET="TEXT">m_Start</A> and <I>pTimeEnd</I> to the current value of <A HREF="dssd0228.htm#Lib_0001060230010008" TARGET="TEXT">m_End</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050900">CMediaSample::IsDiscontinuity</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Determines if there is discontinuity in the data stream.

<P><B>HRESULT</B> <B>IsDiscontinuity</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns S_OK if the sample is a discontinuous sample and S_FALSE if not;
otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> error value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030700" TARGET="TEXT">IMediaSample::IsDiscontinuity</A> method.
It returns the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_Discontinuity property flag.
Discontinuity occurs when a source filter seeks 
to a different place in the stream or when a filter drops samples for quality control. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050a00">CMediaSample::IsPreroll</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Preroll property. If TRUE, this sample is for preroll only and should not be displayed.

<P><B>HRESULT</B> <B>IsPreroll</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns S_OK if the sample is a preroll sample and S_FALSE if not;
otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> error value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030800" TARGET="TEXT">IMediaSample::IsPreroll</A> method.
It returns the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_Preroll property flag.
Preroll samples are not meant to be rendered.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050b00">CMediaSample::IsSyncPoint</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Determines if the beginning of a sample is a synchronization point.

<P><B>HRESULT</B> <B>IsSyncPoint</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns S_OK if the sample is a synchronization point and S_FALSE if not;
otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> error value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030900" TARGET="TEXT">IMediaSample::IsSyncPoint</A> method.
It returns the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_SyncPoint property flag.
If the <A HREF="dssd0287.htm#structs_0001060501000304" TARGET="TEXT">bTemporalCompression</A> member 
of the <A HREF="dssd0287.htm#structs_0001060501000300" TARGET="TEXT">AM_MEDIA_TYPE</A> structure is FALSE, all samples are synchronization points. 
A filter can begin a stream at any synchronization point.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050c00">CMediaSample::NonDelegatingQueryInterface</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the interface.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0265.htm#fmutil_0001060309000001" TARGET="TEXT">INonDelegatingUnknown::NonDelegatingQueryInterface</A> method and passes out 
references to the <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> and <A HREF="dssd0175.htm" TARGET="TEXT">IUnknown</A> interfaces. Override this class to return other interfaces on the object in the derived class.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050d00">CMediaSample::QueryInterface</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Retrieves a pointer to a specified interface on a component to which a
client currently holds an interface pointer. This method must call
<A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A> on the pointer it returns.

<P><B>HRESULT</B> <B>QueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>iid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppvObject</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>iid</I>
 </DT><DD>Specifies the IID of the interface being requested.
</DD><DT><I>ppvObject</I>
 </DT><DD>Receives a pointer to an interface pointer to the object on return.
 If the interface specified in <I>iid</I> is not supported
 by the object, <I>ppvObject</I> is set to NULL.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if the interface is supported, S_FALSE if not.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">IUnknown::QueryInterface</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050e00">CMediaSample::Release</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Decrements the reference count for the calling interface on an object.
If the reference count on the object falls to zero, the object is freed from memory.

<P><B>ULONG</B> <B>Release</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the resulting value of the reference count, which is used for
diagnostic/testing purposes only. If you need to know that resources have been freed,
use an interface with higher-level semantics.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> method.<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230050f00">CMediaSample::SetActualDataLength</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the data length of the sample.

<P><B>HRESULT</B> <B>SetActualDataLength</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>lLen</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>lLen</I>
 </DT><DD>Length of the data in the media sample, in bytes.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030a00" TARGET="TEXT">IMediaSample::SetActualDataLength</A> method. 
It sets the value of <A HREF="dssd0228.htm#Lib_0001060230010003" TARGET="TEXT">m_lActual</A> to the value of <I>lLen</I>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051000">CMediaSample::SetDiscontinuity</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the discontinuity property.

<P><B>HRESULT</B> <B>SetDiscontinuity</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bDiscont</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bDiscont</I>
 </DT><DD>Set to TRUE to specify the media sample as discontinuous with the previous sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030b00" TARGET="TEXT">IMediaSample::SetDiscontinuity</A> method.
It sets the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_Discontinuity flag 
to the value of <I>bDiscont</I>.
Discontinuous samples occur when a source filter seeks to a different place
in the media stream or when a filter drops samples for quality control. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051100">CMediaSample::SetMediaTime</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the starting and ending media times.

<P><B>HRESULT</B> <B>SetMediaTime</B><B>(</B><BR>&nbsp;&nbsp;<B>LONGLONG</B> <B>*</B> <I>pStart</I><B>,</B><BR>&nbsp;&nbsp;<B>LONGLONG</B> <B>*</B> <I>pEnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pStart</I>
</DT><DD>Beginning media time.
</DD><DT><I>pEnd</I>
</DT><DD>Ending media time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030c00" TARGET="TEXT">IMediaSample::SetMediaTime</A> method.
It sets the <A HREF="dssd0228.htm#Lib_000106023001000a" TARGET="TEXT">m_MediaStart</A> data member to the value of <I>pStart</I> 
and the <A HREF="dssd0228.htm#Lib_000106023001000b" TARGET="TEXT">m_MediaEnd</A> data member to the value of <I>pEnd</I> minus <I>pStart</I>. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051200">CMediaSample::SetMediaType</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the media type for the <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> object.

<P><B>HRESULT</B> <B>SetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <B>*</B> <I>pMediaType</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaType</I>
</DT><DD>Pointer to a pointer to a media type structure to be set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030d00" TARGET="TEXT">IMediaSample::SetMediaType</A> method. 
It deletes the previous media type if one exists, makes a copy of the media type passed 
in, sets <A HREF="dssd0228.htm#Lib_0001060230010005" TARGET="TEXT">m_pMediaType</A> to the copy of the media type, 
and sets the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_TypeChanged flag to TRUE.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051300">CMediaSample::SetPointer</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the buffer pointer and length.

<P><B>SetPointer</B><B>(</B><BR>&nbsp;&nbsp;<B>BYTE</B> <B>*</B> <I>ptr</I><B>,</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>cBytes</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B> <BR><H5>Parameters</H5>
<DL><DT><I>ptr</I>
</DT><DD>Pointer to a buffer.
</DD><DT><I>cBytes</I>
</DT><DD>Length of the buffer, in bytes.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Allocators that require variable-sized pointers or pointers into data that has already been read use this member function. This is available only through a <A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample</A> class, not an <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> interface, so only the filter that owns the allocator knows how to access this member function (not any filter or pin that is passed the object's <B>IMediaSample</B> interface pointer).
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051400">CMediaSample::SetPreroll</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the preroll property. If TRUE, this sample is for preroll only
and should not be displayed.

<P><B>HRESULT</B> <B>SetPreroll</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bIsPreroll</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bIsPreroll</I>
 </DT><DD>Set to TRUE to specify the media sample as a preroll sample, or FALSE otherwise.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030e00" TARGET="TEXT">IMediaSample::SetPreroll</A> method.
It sets the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_Preroll flag 
to the value of <I>bIsPreroll</I>.
Preroll samples are samples that are processed but not displayed, and are
located in the media stream before the displayable samples.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051500">CMediaSample::SetSyncPoint</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Property of a synchronization point.

<P><B>HRESULT</B> <B>SetSyncPoint</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bIsSyncPoint</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bIsSyncPoint</I>
 </DT><DD>Value specifying whether the synchronization point was set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144030f00" TARGET="TEXT">IMediaSample::SetSyncPoint</A> method.
It sets the value of the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> Sample_SyncPoint flag 
to the value of <I>bIsSyncPoint</I>.
A filter can begin a stream at any synchronization point.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060230051600">CMediaSample::SetTime</A></H3>
<A HREF="dssd0228.htm" TARGET="TEXT">CMediaSample Class</A>
<P>Sets the media time extents for this sample.

<P><B>HRESULT</B> <B>SetTime</B><B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pTimeStart</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pTimeEnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTimeStart</I>
</DT><DD>Stream time at which the sample begins.
</DD><DT><I>pTimeEnd</I>
</DT><DD>Stream time at which the sample ends.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR or an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0156.htm#If_0001060144031000" TARGET="TEXT">IMediaSample::SetTime</A> method. It sets the <A HREF="dssd0228.htm#Lib_0001060230010009" TARGET="TEXT">m_Start</A> data member to the value of <I>pTimeStart</I> and the <A HREF="dssd0228.htm#Lib_0001060230010008" TARGET="TEXT">m_End</A> data member to the value of <I>pTimeEnd</I>.
<P>If <I>pTimeStart</I> and <I>pTimeEnd</I> are null, DirectShow turns off the <A HREF="dssd0228.htm#Lib_0001060230010002" TARGET="TEXT">m_dwFlags</A> data member's Sample_TimeValid and Sample_StopValid bits.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
