<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>DAStatic Functions Relevant to DAVector3 Objects</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/DA_E0105.htm','/DA_E0000.htm','/DA_E0030.htm','/index.htm','/DA_E0107.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="vref_000106014c000000">DAStatic Functions Relevant to DAVector3 Objects</A></H2>
<BR CLEAR=ALL>
<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000100">AddVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. The direction and length of the vector are calculated by adding the corresponding coordinates of the given vectors. 

<P><B>lib.AddVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD>The <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object.


<H5>See Also</H5>
<P><A HREF="DA_E0106.htm#vref_000106014c000700" TARGET="TEXT">SubVector3</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000200">CrossVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object that represents the "cross product" of the given vectors. The new vector has a length that is equal to the product of the lengths of the original vectors and the sine of the angle between them. The new vector has a direction that is perpendicular to the plane formed by the original vectors and that obeys the right-hand rule.

<P><B>lib.CrossVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD>The <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000300">DerivativeVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P><P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object that is the instantaneous derivative (rate of change) of the given vector. For example, a constant vector behavior yields a constant derivative of [0 0 0], and Vector3(time, 0, 0) (without any additional time substitutions) yields a constant derivative vector of [1 0 0]. 

<P><B>lib.DerivativeVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>vec</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>vec</I>
 </DT><DD>A <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. 


<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000400">DotVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that represents the "dot product" of the given vectors. The dot product is the product of the lengths of the vectors and the cosine of the angle between them.

<P><B>lib.DotVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD><A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000500">IntegralVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object that represents the sum of the all values of <I>vec</I> from the given start time to the present. 

<P><B>lib.IntegralVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>vec</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. 


<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000600">NegVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object that has the same length as the original vector, but points in the opposite direction.

<P><B>lib.NegVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I>
 </DT><DD>A <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object that is the original vector.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000700">SubVector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. The direction and length of the vector are calculated by subtracting the coordinates of <I>v2</I> from the corresponding coordinates of <I>v1</I>. 

<P><B>lib.SubVector3</B><B>(</B><BR>&nbsp;&nbsp;<I>v1</I><B>,</B><BR>&nbsp;&nbsp;<I>v2</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>v1</I> and <I>v2</I>
 </DT><DD><A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object.


<H5>See Also</H5>
<P><A HREF="DA_E0106.htm#vref_000106014c000100" TARGET="TEXT">AddVector3</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000800">Vector3Anim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object having a direction and length as specified by the given Cartesian coordinates.

<P><B>lib.Vector3Anim</B><B>(</B><BR>&nbsp;&nbsp;<I>x</I><B>,</B><BR>&nbsp;&nbsp;<I>y</I><B>,</B><BR>&nbsp;&nbsp;<I>z</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>x</I>, <I>y</I>, and <I>z</I>
 </DT><DD>The <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> objects specifying the coordinate values. The <I>x</I> specifies a distance along the x-axis from the origin to a point, <I>y</I> specifies a distance along the y-axis, and <I>z</I> a distance along the z-axis. These must be animated numbers.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. 


<H5>See Also</H5>
<P><A HREF="DA_E0106.htm#vref_000106014c000b00" TARGET="TEXT">Vector3SphericalAnim</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000900">Vector3</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0106.htm#vref_000106014c000800" TARGET="TEXT">Vector3Anim</A> except that <I>x</I>, <I>y</I>, and <I>z</I> are non-animated numbers (doubles).

<P><B>lib.Vector3</B><B>(</B><BR>&nbsp;&nbsp;<I>x</I><B>,</B><BR>&nbsp;&nbsp;<I>y</I><B>,</B><BR>&nbsp;&nbsp;<I>z</I><BR>&nbsp;&nbsp;<B>)</B><BR><H3><HR COLOR=#0000FF><A NAME="vref_000106014c000a00">Vector3BSpline</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> behavior based on a B-spline function. The function depends on the control elements, the knot vector, the mathematical degree, and the weights of the control elements (these are optional).

<P>A B-spline function without weights is piecewise polynomial and with weights is piecewise rational (the quotient of two polynomials). It requires that:
 
<P>numberOfControlElements = numberOfKnots - <I>degree</I> + 1

<P>The control elements define the approximate direction and shape of the function. The knots represent junction values, in parameter space, between the connected polynomial parts. 

<P>Given a degree <I>d</I> and a number of knots <I>k</I>, the function is valid in the range knot<I>d</I> to knot<I>k-d</I>+1, and is otherwise undefined. For example, for a degree 2 curve, the valid range is from the second knot to the next to the last knot, inclusive.

<P>The returned <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> is the traversal of the spline function according to the <I>evaluation</I> parameter. The evaluation parameter is a <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> that must be in the valid range of the spline, which is [knot<I>d</I>, knot<I>k</I>-<I>d</I>+1]. Any values outside this range are automatically clamped to the end values.

<P><B>lib.Vector3BSpline</B><B>(</B><BR>&nbsp;&nbsp;<I>degree</I><B>,</B><BR>&nbsp;&nbsp;<I>knots</I><B>,</B><BR>&nbsp;&nbsp;<I>control_elements</I><B>,</B><BR>&nbsp;&nbsp;<I>weights</I><B>,</B><BR>&nbsp;&nbsp;<I>evaluation</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>degree</I>
 </DT><DD>A number (long) representing the mathematical degree of the B-spline to evaluate. Must be 1, 2, or 3. 
</DD><DT><I>knots</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> objects representing the knots used to calculate the B-spline. 
</DD><DT><I>control_elements</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> objects representing the control elements used to calculate the B-spline.
</DD><DT><I>weights</I>
 </DT><DD>An array (variant) of <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> objects representing the weights used to calculate the rational B-spline. There must be the same number of weights as control elements. For non-rational B-splines, the value of <I>weights</I> is null.
</DD><DT><I>evaluation</I>
 </DT><DD>A <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object that controls the spline evaluation. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object.


<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000b00">Vector3SphericalAnim</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Creates a <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object having a direction and length as specified by the given spherical coordinates.

<P><B>lib.Vector3SphericalAnim</B><B>(</B><BR>&nbsp;&nbsp;<I>XYangle</I><B>,</B><BR>&nbsp;&nbsp;<I>YZangle</I><B>,</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><H5>Parameters</H5>
<DL><DT><I>XYangle</I>
 </DT><DD>A <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object of the counter-clockwise XY angle, in radians, of the point about the positive y-axis. The angle begins at the positive z-ray, so that [0 0 1] has a <I>theta</I> of 0, and [1 0 0] has a <I>theta</I> of pi/2. This must be an animated number.
</DD><DT><I>YZangle</I>
 </DT><DD>A <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object of the counter-clockwise elevation angle, in radians, of the point above the XZ-plane. A <I>YZangle</I> of pi/2 means the point is straight up (on the positive y-ray), and a <I>YZangle</I> of -pi/2 is straight down (on the negative y-ray). This must be an animated number. 
</DD><DT><I>length</I>
 </DT><DD>A <A HREF="DA_E0054.htm" TARGET="TEXT">DANumber</A> object specifying the length of the vector. This must be an animated number.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0114.htm" TARGET="TEXT">DAVector3</A> object. 


<H5>Remarks</H5>
<P>The following table correlates Cartesian coordinates with polar coordinates (X means "Don't Care"):

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Cartesian</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>XYangle</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>YZangle</B></FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Length
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Coordinates
</B></FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[0 0 0]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">X</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">X</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[d 0 0]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">pi/2</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">d
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[-d 0 0]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">-pi/2</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">d</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> 
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[0 d 0]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">X</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">pi/2</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">d
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[0 -d 0]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">X</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">-pi/2</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">d
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[0 0 d]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">d
</FONT></TD>
</TR>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">[0 0 -d]</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">pi</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">0</FONT></TD>
<TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">d
</FONT></TD>
</TR>
</TABLE>
<H5>See Also</H5>
<P><A HREF="DA_E0106.htm#vref_000106014c000800" TARGET="TEXT">Vector3Anim</A>

<H3><HR COLOR=#0000FF><A NAME="vref_000106014c000c00">Vector3Spherical</A></H3>
<A HREF="DA_E0061.htm" TARGET="TEXT">DAStatics Class</A>
<P>Same as <A HREF="DA_E0106.htm#vref_000106014c000b00" TARGET="TEXT">Vector3SphericalAnim</A> except that <I>XYangle</I>, <I>YZangle</I>, and <I>length</I> are non-animated numbers (doubles).

<P><B>lib.Vector3Spherical</B><B>(</B><BR>&nbsp;&nbsp;<I>XYangle</I><B>,</B><BR>&nbsp;&nbsp;<I>YZangle</I><B>,</B><BR>&nbsp;&nbsp;<I>length</I><BR>&nbsp;&nbsp;<B>)</B><BR><P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
