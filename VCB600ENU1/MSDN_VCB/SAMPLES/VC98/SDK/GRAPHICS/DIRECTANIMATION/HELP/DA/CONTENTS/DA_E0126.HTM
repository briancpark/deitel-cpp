<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CameraBvr Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/DA_E0125.htm','/DA_E0000.htm','/DA_E0116.htm','/index.htm','/DA_E0127.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="dxmref_000107010a000000">CameraBvr Class</A></H2>
<BR CLEAR=ALL>
<PRE><FONT FACE="Courier" SIZE="2">public class CameraBvr extends Behavior {
    // Methods
    public CameraBvr depth(NumberBvr d);
    public CameraBvr depthResolution(NumberBvr n);
    public CameraBvr transform(Transform3Bvr xf);

    public static CameraBvr newUninitBvr();
}
</FONT></PRE>
<P>Creates an object that represents a camera behavior. A camera is used with the <A HREF="DA_E0138.htm" TARGET="TEXT">render</A> method to project geometry onto an infinite two-dimensional image. Related operations include rendering it into a microphone to extract the sound, or into a pair of microphones to extract stereo sounds. 

<P>There are two basic types of cameras: one for parallel projection and one for perspective projection. Both cameras are oriented so that they gaze in the negative z direction, with positive y considered "up." Also, both cameras have a near clipping plane. This plane (a product of Z-buffered rendering) specifies the closest distance at which an object is visible. Objects closer than the near clipping plane cannot be seen.

<P>Cameras are manipulated via standard three-dimensional transform operations. These transforms modify the camera characteristics and also position and orient the cameras. For more information about these operations, see the transform methods described below.

<P>For more information about behaviors, see the <A HREF="DA_E0122.htm" TARGET="TEXT">Behavior</A> class.
<UL><LI><A CLASS=tctop HREF="DA_E0126.htm#dxmref_000107010a010000" TARGET="TEXT">Methods</A>
<LI><A CLASS=tctop HREF="DA_E0126.htm#dxmref_000107010a020000" TARGET="TEXT">Relevant Methods from the Statics Class</A>
</UL>
<H3><A NAME="dxmref_000107010a010000">Methods</A></H3>
<P><A CLASS=tctop HREF="DA_E0126.htm#dxmref_000107010a010100" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">depth</A><BR>
<P><A CLASS=tctop HREF="DA_E0126.htm#dxmref_000107010a010200" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">depthResolution</A><BR>
<P><A CLASS=tctop HREF="DA_E0126.htm#dxmref_000107010a010300" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">transform</A><BR>
<P><A CLASS=tctop HREF="DA_E0126.htm#dxmref_000107010a010400" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">newUninitBvr</A><BR>
<H4><HR COLOR=#0000FF><A NAME="dxmref_000107010a010100">depth</A></H4>
<A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr Class</A>
<P>Creates a new camera behavior that is the result of applying the specified depth to the original behavior. By default, cameras have infinite depth, which means that all objects in front of the camera are visible. The new behavior is a CameraBvr whose maximum viewing depth is the NumberBvr <I>depth</I>. If <I>depth</I> &lt; 0, the CameraBvr will be unable to see anything. If you prefer to think in terms of hither and yon, this method sets yon = hither + <I>depth</I>. It is important to note that <I>depth</I> is the limit on the far plane. As with the near plane, the geometry is bounded as tightly as possible for maximum Z-resolution.

<P>Limiting the depth of the camera is useful for preserving depth resolution when using Z-buffered rendering. It is also useful for a camera inside a building, where no viewing region is larger than some value. 

<P><B>public</B> <B>CameraBvr</B> <B>depth</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>d</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>d</I>
 </DT><DD>The NumberBvr object that sets the maximum viewing depth of the CameraBvr. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr</A> object.


<H4><HR COLOR=#0000FF><A NAME="dxmref_000107010a010200">depthResolution</A></H4>
<A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr Class</A>
<P>Creates a new camera behavior by applying the specified depth resolution (<I>res</I>) to the original behavior. The Z-buffered rendering approach assigns one depth-value (typically one of 65,536 possibilities) to each pixel on the screen. The <I>res</I> is the minimum distance between two objects such that they still appear distinct. This resolution varies as you go from the near clipping plane to the far clipping plane (more precision is lost for far objects) and according to the amount of perspective for the given camera. This method (assuming a minimum distance to be observed for the entire visible space) adjusts the far clipping plane accordingly.

<P>For example, if the projection point is at (0,0,2), the image clip is at (0,0,1), and the depth resolution (<I>res</I>) is 1cm, then the resultant camera will have a viewing depth of slightly over 25.1 meters. It is important to note that depth represents the <B>limit</B> on the far plane. As with the near plane, the geometry will actually be bounded as tightly as possible for maximum Z-resolution. 

<P><B>public</B> <B>CameraBvr</B> <B>depthResolution</B><B>(</B><BR>&nbsp;&nbsp;<B>NumberBvr</B> <I>res</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>res</I>
 </DT><DD>The NumberBvr object that sets the minimum depth (in camera coordinates) that is guaranteed to be distinct. This parameter can also be of type double.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr</A> object.


<H4><HR COLOR=#0000FF><A NAME="dxmref_000107010a010300">transform</A></H4>
<A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr Class</A>
<P>Cameras are modified, positioned, and oriented via standard transforms. Scale transforms modify the camera while translations and rotations position and orient the camera. The basic steps for using a camera are defining it, modifying it if necessary, and then placing it in the scene.

<P>It is important to note that all camera scales should be applied before camera rotations, and that only scales, rotations, and translations are supported on cameras. Transformations that do not meet these criteria will yield a camera with undefined behavior.

<P>There are two types of scale transformations called Z-scales and X/Y-scales. Z-scales must be positive, non-zero values. Z-scales affect the position of the near clipping plane (if the clipping plane is set to a non-zero value.) For example, if the near clipping plane is located at 10 (that is, if Z=10), then a scale of [1 1 3] will yield a near clipping plane located at Z=30. More importantly, Z-scales move the projection point for a perspective camera. This means an increasing Z-scale yields a perspective camera that is zooming in, and a decreasing Z-scale yields a perspective camera that is zooming out. 

<P>Use X/Y-scales to affect the size of the projected image. One way to think of this is that an X/Y-scale sets the size of the camera relative to the world it's viewing. For example, if you are viewing a microscopic scene, use a small X/Y-scale. On the other hand, if you are viewing a solar system, use a large X/Y scale. Scaling a camera by some value in X/Y is exactly equivalent to inversely scaling the resulting image by the same amount. For example, scaling the camera by [10 10 1] is the same as scaling the resulting image by [1/10 1/10]. Finally, disparate scales in X and Y can be used to change the aspect ratio of the rendered image. 

<P>Once the camera is defined (via construction and scaling), it can be placed in the scene via rotations and translations just as a light source, microphone, or any other geometric object is placed. 

<P><B>public</B> <B>CameraBvr</B> <B>transform</B><B>(</B><BR>&nbsp;&nbsp;<B>Transform3Bvr</B> <I>xf</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>xf</I>
 </DT><DD>The <A HREF="DA_E0206.htm" TARGET="TEXT">Transform3Bvr</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr</A> object.


<H5>Remarks</H5>
<P>This attribute composes values.

<H4><HR COLOR=#0000FF><A NAME="dxmref_000107010a010400">newUninitBvr</A></H4>
<A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr Class</A>
<P>Allows you to refer to a camera behavior before that behavior has been defined. With this method you can create a camera behavior and use it in the definition of other behaviors, but not actually define its contents until some later point. (This is accomplished with the <A HREF="DA_E0122.htm#dxmref_0001070106010800" TARGET="TEXT">init</A> method, which is available on all behaviors.) The system generates a run-time error if you initialize a non-uninitialized behavior, initialize an uninitialized behavior that has already been initialized, or run an initialized behavior that has not yet been initialized.

<P><B>public</B> <B>static</B> <B>CameraBvr</B> <B>newUninitBvr</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr</A> object.


<H3><A NAME="dxmref_000107010a020000">Relevant Methods from the Statics Class</A></H3>
<P>The following methods are defined in the <A HREF="DA_E0157.htm" TARGET="TEXT">Statics</A> class and are most relevant to objects of type <A HREF="DA_E0126.htm" TARGET="TEXT">CameraBvr</A>:

<P><A HREF="DA_E0161.htm#dxmref_000107012d000100" TARGET="TEXT">public static CameraBvr parallelCamera(NumberBvr nearclip);</A>
<P><A HREF="DA_E0161.htm#dxmref_000107012d000200" TARGET="TEXT">public static CameraBvr perspectiveCamera(NumberBvr projdst, NumberBvr nearclip);</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
