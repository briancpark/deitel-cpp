<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IPin Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0164.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0166.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_000106014d000000">IPin Interface</A></H2>
<BR CLEAR=ALL>
<P>The <B>IPin</B> interface represents a single, unidirectional connection point on a
filter. A pin connects to exactly one other pin on another filter. Other objects can use this
interface on this pin. The interface between the filter and the pin is private to the implementation
of a specific filter.

<P>During the connection process, one pin takes the lead. The base classes assume that this is
the output pin of the upstream connecting filter. The filter graph manager calls the
<A HREF="dssd0165.htm#If_000106014d030200" TARGET="TEXT">IPin::Connect</A> method on this pin's <B>IPin</B> interface, passing the <B>IPin</B>
pointer for the connecting pin. This connecting pin then calls the <A HREF="dssd0165.htm#If_000106014d030f00" TARGET="TEXT">IPin::ReceiveConnection</A>
method located on the other pin, in addition to its format-enumeration, <A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">IUnknown::QueryInterface</A>,
and possibly <A HREF="dssd0165.htm#If_000106014d030a00" TARGET="TEXT">IPin::QueryAccept</A> methods, to establish whether the connection is possible.

<A NAME="If_000106014d010000"></A><P><B>When to Implement</B>
<P>All filters must implement this interface on each of its pins. Which methods are implemented
depends on whether the pin is an input pin or an output pin. Use the <A HREF="dssd0200.htm#Lib_0001060214000000" TARGET="TEXT">CBasePin</A>,
<A HREF="dssd0195.htm#Lib_000106020f000000" TARGET="TEXT">CBaseInputPin</A>, or <A HREF="dssd0199.htm#Lib_0001060213000000" TARGET="TEXT">CBaseOutputPin</A> class, or classes derived
from these classes, to implement this interface.

<A NAME="If_000106014d020000"></A><P><B>When to Use</B>
<P>This interface is used by other connecting pins and by the filter graph manager. Applications
should not use this interface directly but should go through the filter graph manager. Connecting
pins use the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface on the opposite pin to negotiate a common media type and
an agreed allocator to use for passing samples.

<A NAME="If_000106014d030000"></A><P><B>Methods in Vtable Order</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IPin methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030200" TARGET="TEXT">Connect</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Makes a connection to another pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030f00" TARGET="TEXT">ReceiveConnection</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Makes a connection to this pin and is called by a connecting pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030500" TARGET="TEXT">Disconnect</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Breaks a connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030300" TARGET="TEXT">ConnectedTo</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a pointer to the connecting pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030400" TARGET="TEXT">ConnectionMediaType</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the media type of this pin's connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030e00" TARGET="TEXT">QueryPinInfo</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves information about this pin (for example, the name, owning filter, and direction).
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030c00" TARGET="TEXT">QueryId</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves an identifier for the pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030a00" TARGET="TEXT">QueryAccept</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Queries whether a given media type is acceptable by the pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030800" TARGET="TEXT">EnumMediaTypes</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides an enumerator for this pin's preferred media types.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030d00" TARGET="TEXT">QueryInternalConnections</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides an array of the pins to which this pin internally connects.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">EndOfStream</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin that no additional data is expected until a new run command is issued.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030100" TARGET="TEXT">BeginFlush</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to begin a flush operation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030600" TARGET="TEXT">EndFlush</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to end a flush operation.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030900" TARGET="TEXT">NewSegment</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies that samples following this call are grouped as a segment with a given
start time, stop time, and rate.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0165.htm#If_000106014d030b00" TARGET="TEXT">QueryDirection</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the direction for this pin.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030100">IPin::BeginFlush</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Informs the pin to begin a flush operation.

<P><B>HRESULT</B> <B>BeginFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>When this method is called, the pin is entering flush state. In this case, carry out the
following steps.

<OL><LI>Set a flushing flag to prevent any more <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> methods
from succeeding.
<LI>Discard any queued data.
<LI>Free the pin if it was blocked by the <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A> method,
if possible.
<LI>Pass the <B>IPin::BeginFlush</B> method to any downstream pins.
</OL>
<P>The <B>BeginFlush</B> notification is passed downstream until it
reaches the renderer, which must free any sample it holds. This
unblocks other pins (usually in the <A HREF="dssd0160.htm#If_0001060148030300" TARGET="TEXT">IMemAllocator::GetBuffer</A> or
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> methods).

<P>After <B>BeginFlush</B> is called, all samples passed by the
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A> method to the pin, or on another transport,
are rejected with S_FALSE until the <A HREF="dssd0165.htm#If_000106014d030600" TARGET="TEXT">IPin::EndFlush</A> method is called.

<P>This method is implemented in the base classes by <A HREF="dssd0195.htm#Lib_000106020f070100" TARGET="TEXT">CBaseInputPin::BeginFlush</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030200">IPin::Connect</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Initiates a connection from this pin to the other pin.

<P><B>HRESULT</B> <B>Connect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <B>*</B> <I>pReceivePin</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>AM_MEDIA_TYPE</B> <B>*</B> <I>pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pReceivePin</I>
 </DT><DD>[in] Other pin to connect to.
</DD><DT><I>pmt</I>
 </DT><DD>[in] Type to use for the connections (optional).
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method calls the <A HREF="dssd0165.htm#If_000106014d030f00" TARGET="TEXT">IPin::ReceiveConnection</A> method for the other pin.
The <B>IPin::Connect</B> method verifies that the connection is
possible and might reject it. This pin proposes a media type to the other pin.

<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214060900" TARGET="TEXT">CBasePin::Connect</A>.

<P>Applications should not use this method. Instead, use <A HREF="dssd0140.htm#If_0001060134030200" TARGET="TEXT">IFilterGraph::ConnectDirect</A>,
which will use this method. Changing connections underneath the filter graph manager
can cause commands to be distributed incorrectly and can cause a deadlock.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030300">IPin::ConnectedTo</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>If this pin is connected to another pin, the <B>IPin::ConnectedTo</B> method
returns a pointer to that pin.

<P><B>HRESULT</B> <B>ConnectedTo</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <B>**</B> <I>ppPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppPin</I>
</DT><DD>[out] Pointer to an <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> pointer to the <B>IPin</B> interface of the other pin
(if any) to which this pin is connected. If there is no connection, the other pin interface pointer will be NULL.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214060a00" TARGET="TEXT">CBasePin::ConnectedTo</A>.
The interface returned by this method has had its reference count
incremented. Be sure to use <A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">IUnknown::Release</A> on the interface
to decrement the reference count when you have finished using the interface.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030400">IPin::ConnectionMediaType</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Determines the media type associated with the current connection of the pin.
This method fails if the pin is unconnected.

<P><B>HRESULT</B> <B>ConnectionMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>[out] Pointer to an <A HREF="dssd0287.htm#structs_0001060501000300" TARGET="TEXT">AM_MEDIA_TYPE</A> structure. If the pin is connected,
the media type is returned. Otherwise, the structure is initialized to a default
state in which all elements are 0, with the exception of <I>lSampleSize</I>, which
is set to 1, and <I>bFixedSizeSamples</I>, which is set to TRUE.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>The returned structure can contain an allocated format block
and a reference-counted <A HREF="dssd0175.htm" TARGET="TEXT">IUnknown</A> interface pointer. These
resources should be released by calling the <A HREF="dssd0267.htm#fmutil_000106030b000500" TARGET="TEXT">FreeMediaType</A> utility function.

<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214060b00" TARGET="TEXT">CBasePin::ConnectionMediaType</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030500">IPin::Disconnect</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Breaks a connection.

<P><B>HRESULT</B> <B>Disconnect</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR if there is no connection.

<H5>Remarks</H5>
<P>There are no parameters because there is only one possible connection on this pin.

<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214060f00" TARGET="TEXT">CBasePin::Disconnect</A>.

<P>A pin should never use this method to disconnect from its peer.
An application should not use this method. Use <A HREF="dssd0140.htm#If_0001060134030300" TARGET="TEXT">IFilterGraph::Disconnect</A> instead.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030600">IPin::EndFlush</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Informs the pin to end a flush operation.

<P><B>HRESULT</B> <B>EndFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>When this method is called, the pin is beginning to end a flush operation.
It should perform the following steps.

<OL><LI>Ensure that your filter will not push any additional data. (To do this, synchronize with
a thread, stop it pushing, and discard any queued data.)
<LI>Reenable the <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method by
clearing the internal flushing flag.
<LI>Pass the <B>EndFlush</B> method downstream by calling the method
on the connecting input pin.
</OL>
<P>This method is implemented in the base classes by <A HREF="dssd0195.htm#Lib_000106020f070500" TARGET="TEXT">CBaseInputPin::EndFlush</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030700">IPin::EndOfStream</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Informs the input pin that no additional data is expected until a new run command is issued.

<P><B>HRESULT</B> <B>EndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns one of the following <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> values.

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">No error occurred.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_UNEXPECTED </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Method was probably called on an output pin
that does not support this.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>Calling this method notifies the pin that no additional data is expected until a new run
command is issued. The end-of-stream notification should be queued and delivered after
all queued data is delivered. It can be delivered immediately if there is no queued data.

<P>The <A HREF="dssd0165.htm#If_000106014d030100" TARGET="TEXT">IPin::BeginFlush</A> method flushes any queued end-of-stream notifications.
This is intended for input pins only.

<P>This method is implemented in the base classes by <A HREF="dssd0199.htm#Lib_0001060213040f00" TARGET="TEXT">CBaseOutputPin::EndOfStream</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030800">IPin::EnumMediaTypes</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Provides an enumerator for this pin's preferred media types.

<P><B>HRESULT</B> <B>EnumMediaTypes</B><B>(</B><BR>&nbsp;&nbsp;<B>IEnumMediaTypes</B> <B>**</B> <I>ppEnum</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppEnum</I>
</DT><DD>[out] Pointer to an enumerator for the media types.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>If an enumerator is received, it must be released when the operation is finished.

<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214061300" TARGET="TEXT">CBasePin::EnumMediaTypes</A>.

<H3><HR COLOR=#0000FF><A NAME="If_000106014d030900">IPin::NewSegment</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Specifies that samples following this method are grouped as a segment with a
given start time, stop time, and rate.

<P><B>HRESULT</B> <B>NewSegment</B><B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStart</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStop</I><B>,</B><BR>&nbsp;&nbsp;<B>double</B> <I>dRate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>tStart</I>
</DT><DD>[in] Start time of the segment.
</DD><DT><I>tStop</I>
</DT><DD>[in] Stop time of the segment.
</DD><DT><I>dRate</I>
</DT><DD>[in] Rate of the segment.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method allows filters that process buffers containing more than
one sample to delineate the rendering of the samples between start and
stop time, as indicated by the <I>tStart</I> and <I>tStop</I> parameters.

<P>This method is intended to be implemented on an input pin. A connected output pin
on the upstream filter calls this method after completing delivery of
previous data and before calling <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> with any new data. It indicates
that all data arriving after this call is part of a segment delineated by the parameters.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030a00">IPin::QueryAccept</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Determines if the pin could accept the format type.

<P><B>HRESULT</B> <B>QueryAccept</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>AM_MEDIA_TYPE</B> <B>*</B> <I>pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>[in] Pointer to a proposed media type.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if the format is acceptable; otherwise, returns
S_FALSE.

<H5>Remarks</H5>
<P>This method is implemented in the base classes by
<A HREF="dssd0200.htm#Lib_0001060214062100" TARGET="TEXT">CBasePin::QueryAccept</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030b00">IPin::QueryDirection</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Retrieves the direction for this pin.

<P><B>HRESULT</B> <B>QueryDirection</B><B>(</B><BR>&nbsp;&nbsp;<B>PIN_DIRECTION</B> <B>*</B> <I>pPinDir</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPinDir</I>
</DT><DD>[out] Pointer to a <A HREF="dssd0288.htm#dtypes_0001060601001c00" TARGET="TEXT">PIN_DIRECTION</A> variable.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The returned <I>pPinDir</I> parameter will contain PINDIR_INPUT
if the pin is an input pin or PINDIR_OUTPUT otherwise.
The same information is available by using <A HREF="dssd0165.htm#If_000106014d030e00" TARGET="TEXT">IPin::QueryPinInfo</A>, but this
method is more direct and more efficient.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030c00">IPin::QueryId</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Retrieves an identifier for the pin.

<P><B>HRESULT</B> <B>QueryId</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <B>*</B> <I>Id</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Id</I>
</DT><DD>[out] Pin identifier.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This method and the <A HREF="dssd0116.htm#If_000106011c030200" TARGET="TEXT">IBaseFilter::FindPin</A> method allow connections in a filter graph
to be saved and restored. Because pins are identified only by their <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface
pointers at run time, and pointer information cannot be reliably saved,
an identifier is necessary to specify which pins belong to each filter.
The implementation of this method by the pin provides a unique
name that the filter graph manager can use to turn into an <B>IPin</B> interface pointer,
by calling <B>IBaseFilter::FindPin</B> when the filter graph is restored.

<P>The storage is allocated by the filter using the Microsoft&#174; Win32&#174; <A HREF="dssd0389.htm#external_00010a0109000010" TARGET="TEXT">CoTaskMemAlloc</A>
function. The caller should free it by using <A HREF="dssd0389.htm#external_00010a0109000011" TARGET="TEXT">CoTaskMemFree</A>.

<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214062300" TARGET="TEXT">CBasePin::QueryId</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030d00">IPin::QueryInternalConnections</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Provides an array of pointers to the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface of the pins to which
this pin internally connects.

<P><B>HRESULT</B> <B>QueryInternalConnections</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <B>**</B> <I>apPin</I><B>,</B><BR>&nbsp;&nbsp;<B>ULONG</B> <B>*</B> <I>nPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>apPin</I>
</DT><DD>[out] Array of <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> pointers.
</DD><DT><I>nPin</I>
</DT><DD>[out] Upon input, indicates the number of array elements; upon output,
indicates the number of pins.
</DD></DL>
<H5>Return Values</H5>
<P>Returns one of the following <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> values.

<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Undetermined.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Insufficient number of array elements to return all the results,
 in which case no pins are returned in the <I>apPin</I> array.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_NOTIMPL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Filter graph manager interprets E_NOTIMPL as meaning that
 any input pin connects to all visible output pins, and vice versa.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>All pins put in the array are added by the <A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A> method. The
<I>apPin</I> parameter can be NULL if the <I>nPin</I> parameter equals zero.
This allows the calling application to determine the number of required arrays.

<P>This method is implemented in the base classes by
<A HREF="dssd0200.htm#Lib_0001060214062400" TARGET="TEXT">CBasePin::QueryInternalConnections</A>.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030e00">IPin::QueryPinInfo</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Retrieves information about the pin.

<P><B>HRESULT</B> <B>QueryPinInfo</B><B>(</B><BR>&nbsp;&nbsp;<B>PIN_INFO</B> <B>*</B> <I>pInfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pInfo</I>
</DT><DD>[out] Pointer to a <A HREF="dssd0287.htm#structs_0001060501001500" TARGET="TEXT">PIN_INFO</A> structure that specifies the name of the pin,
a pointer to an <A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter</A> interface on its owning filter, and the direction of the pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>Unlike the pin name in the <A HREF="dssd0165.htm#If_000106014d030c00" TARGET="TEXT">IPin::QueryId</A> method,
which is used by the filter graph manager, the name in the <A HREF="dssd0287.htm#structs_0001060501001500" TARGET="TEXT">PIN_INFO</A> structure is
intended to be read by users.

<P>Note that on return, the <A HREF="dssd0287.htm#structs_0001060501001501" TARGET="TEXT">pFilter</A> member of <A HREF="dssd0287.htm#structs_0001060501001500" TARGET="TEXT">PIN_INFO</A>
has an outstanding reference count if it is non-NULL, and therefore
should be released when the interface is no longer needed.
<H3><HR COLOR=#0000FF><A NAME="If_000106014d030f00">IPin::ReceiveConnection</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Makes a connection to the calling pin.

<P><B>HRESULT</B> <B>ReceiveConnection</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <B>*</B> <I>pConnector</I><B>,</B><BR>&nbsp;&nbsp;<B>AM_MEDIA_TYPE</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pConnector</I>
 </DT><DD>[in] Connecting pin.
</DD><DT><I>pmt</I>
 </DT><DD>[in] Media type of the samples to be streamed.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is intended for input pins only. Output pins should implement
this to return an error. The pin should verify that it accepts the media type
passed to it and return S_OK if so.

<P>This method is implemented in the base classes by <A HREF="dssd0200.htm#Lib_0001060214062600" TARGET="TEXT">CBasePin::ReceiveConnection</A>.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
