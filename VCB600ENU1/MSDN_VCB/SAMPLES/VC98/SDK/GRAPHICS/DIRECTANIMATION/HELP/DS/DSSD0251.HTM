<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CTransInPlaceInputPin Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0250.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0252.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060247000000">CTransInPlaceInputPin Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/tsip01.gif" WIDTH="363" HEIGHT="293" ALT="CTransInPlaceInputPin class hierarchy" >

<P>The <B>CTransInPlaceInputPin</B> class implements the input pin of a transform-inplace 
filter (<A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A>). This is part of a transform filter that transforms data in place
rather than making a copy of it. The <A HREF="dssd0250.htm#Lib_0001060246030800" TARGET="TEXT">CTransInPlaceFilter::InputPin</A> member function returns a pointer to <B>CTransInPlaceInputPin</B> object. 

<P>Typically, you can create objects of a class derived from <B>CTransInPlaceInputPin</B> without
modifying this class. That is, you can usually override member functions in
the <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A> class that member functions of the <B>CTransInPlaceInputPin</B> class call, and not have to derive your own classes for either of the pin classes.

<P>However, if you want to override this class and derive your
filter class from <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A>, you must override the
<A HREF="dssd0250.htm#Lib_0001060246030700" TARGET="TEXT">CTransInPlaceFilter::GetPin</A> member function to create pins of your derived class.

<A NAME="Lib_0001060247010000"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060247010001">m_pTIPFilter</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A> object that owns this pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060247010002">m_bReadOnly</A></B> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to indicate if the stream is read-only.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060247020000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050200" TARGET="TEXT">CTransInPlaceInputPin</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050700" TARGET="TEXT">PeekAllocator</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a pointer to the default allocator. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050800" TARGET="TEXT">ReadOnly</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns <A HREF="dssd0251.htm#Lib_0001060247010002" TARGET="TEXT">m_bReadOnly</A> to 
 indicate whether or not a stream is read-only.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060247030000"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050100" TARGET="TEXT">CheckMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the pin can use a specified media type.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060247040000"></A><P><B>Implemented IPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050300" TARGET="TEXT">EnumMediaTypes</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides a media type enumerator from the downstream filter.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060247050000"></A><P><B>Implemented IMemInputPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050400" TARGET="TEXT">GetAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the upstream allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050500" TARGET="TEXT">GetAllocatorRequirements</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes requests for allocator requirements downstream. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0251.htm#Lib_0001060247050600" TARGET="TEXT">NotifyAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Receives notification of which allocator the connected output pin will use.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050100">CTransInPlaceInputPin::CheckMediaType</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Determines if the media type is acceptable.

<P><B>HRESULT</B> <B>CheckMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType*</B> <I>pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
 </DT><DD>Media type being checked.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the owning filter's <A HREF="dssd0247.htm#Lib_0001060243040500" TARGET="TEXT">CTransformFilter::CheckInputType</A> member function. <B>HRESULT</B> can be one of the following standard constants, or other values not listed:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Failure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_POINTER </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Null pointer argument.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_INVALIDARG </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Invalid argument.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_NOTIMPL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Method isn't supported.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK or NOERROR </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Success.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0248.htm#Lib_0001060244050400" TARGET="TEXT">CTransformInputPin::CheckMediaType</A> 
member function. It first calls the owning filter's 
<A HREF="dssd0247.htm#Lib_0001060243040500" TARGET="TEXT">CheckInputType</A> member function. (This is a purely virtual function which must be overridden when deriving a class from the <A HREF="dssd0247.htm" TARGET="TEXT">CTransformFilter</A> class. The overridden CheckInputType member function determines which media types the input pin supports.) 
Then, if the filter's output pin is not connected, this member function agrees to any media type.
If the output pin is connected, it asks the downstream connected input pin if it accepts this type and returns the result.
<P>The <A HREF="dssd0247.htm#Lib_0001060243040500" TARGET="TEXT">CheckInputType</A> member function must be overridden by the class of the owning filter.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050200">CTransInPlaceInputPin::CTransInPlaceInputPin</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Constructs a <A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin</A> object.

<P><B>CTransInPlaceInputPin</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pObjectName</I><B>,</B><BR>&nbsp;&nbsp;<B>CTransInPlaceFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <B>*</B> <I>phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObjectName</I>
 </DT><DD>Name of the <A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin</A> class object.
</DD><DT><I>pFilter</I>
 </DT><DD>Pointer to the <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A> class.
</DD><DT><I>phr</I>
</DT><DD>Pointer to an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value in which to return resulting information. This should be 
modified only if a failure occurs. If it is a failure code on input, construction can be terminated; 
but in any case the destructor will be called by the creator when the <B>HRESULT</B> error is detected.
</DD><DT><I>pName</I>
 </DT><DD>Name of the pin.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function doesn't create the pins. The pins are created when they are 
first required. All external attempts to access pins (by enumeration or by <A HREF="dssd0194.htm#Lib_000106020e080300" TARGET="TEXT">CBaseFilter::FindPin</A>) 
go through <A HREF="dssd0250.htm#Lib_0001060246030700" TARGET="TEXT">CTransInPlaceFilter::GetPin</A>, which creates the pins initially.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050300">CTransInPlaceInputPin::EnumMediaTypes</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Provides an enumerator for media types by retrieving one from downstream.

<P><B>HRESULT</B> <B>EnumMediaTypes</B><B>(</B><BR>&nbsp;&nbsp;<B>IEnumMediaTypes</B> <I>**ppEnum</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppEnum</I>
</DT><DD>[out] Pointer to an enumerator for the media types.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful, VFW_E_NOT_CONNECTED if there is no connection, or an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> that indicates an error with the enumerator, such as E_POINTER or E_OUTOFMEMORY. 



<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0200.htm#Lib_0001060214061300" TARGET="TEXT">CBasePin::EnumMediaTypes</A> member function 
and implements the <A HREF="dssd0165.htm#If_000106014d030800" TARGET="TEXT">IPin::EnumMediaTypes</A> method. Transform-inplace filters use the 
media type enumerator from adjacent filters because they do not change the media type. When 
asked by a connected output pin of the upstream filter for this pin's media type enumerator, this 
member function simply retrieves the allocator from the input pin connected to its output pin 
(if it is connected). 

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050400">CTransInPlaceInputPin::GetAllocator</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Retrieves the upstream allocator.

<P><B>HRESULT</B> <B>GetAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>**</B> <I>ppAllocator</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppAllocator</I>
 </DT><DD>Returned allocator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a NOERROR if the method retrieves an allocator being used by the downstream filter. If no such allocator exists, returns S_OK if the method retrieves an allocator being used by the output pin of the in-place transform filter. If neither of these types of allocators can be retrieved, returns VFW_E_NO_ALLOCATOR.

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0195.htm#Lib_000106020f070600" TARGET="TEXT">CBaseInputPin::GetAllocator</A> 
member function and implements the <A HREF="dssd0161.htm#If_0001060149030100" TARGET="TEXT">IMemInputPin::GetAllocator</A> method.
If an allocator has already been agreed upon, this member function supplies that allocator.
Otherwise, if the downstream input pin can supply an allocator, it does so.
If no allocator is available, this member function returns VFW_E_NO_ALLOCATOR.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050500">CTransInPlaceInputPin::GetAllocatorRequirements</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Passes requests for allocator requirements downstream.

<P><B>HRESULT</B> <B>GetAllocatorRequirements</B><B>(</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>pProps</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pProps</I>
 </DT><DD><A HREF="dssd0287.htm#structs_0001060501000100" TARGET="TEXT">ALLOCATOR_PROPERTIES</A> structure containing the required size,
count, and alignment of the allocator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_NOTIMPL if the filter's output 
pin is not connected. Otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> that indicates whether the allocator properties were successfully received. <B>HRESULT</B> can be one of the following standard constants, or other values not listed:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Failure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_POINTER </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Null pointer argument.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_INVALIDARG </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Invalid argument.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_NOTIMPL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Method isn't supported.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK or NOERROR</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Success.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0195.htm#Lib_000106020f070700" TARGET="TEXT">CBaseInputPin::GetAllocatorRequirements</A> 
member function and implements the <A HREF="dssd0161.htm#If_0001060149030200" TARGET="TEXT">IMemInputPin::GetAllocatorRequirements</A> method.
If the downstream input pin can supply allocator requirements, it does so.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050600">CTransInPlaceInputPin::NotifyAllocator</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Receives notification of which allocator will be used by the connected output pin.

<P><B>HRESULT</B> <B>NotifyAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAllocator</I><B>,</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bReadOnly</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pAllocator</I>
 </DT><DD>Pointer to the <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> object to use. This might or might not 
be the same <A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin</A> object that the input pin provided in the 
<A HREF="dssd0251.htm#Lib_0001060247050400" TARGET="TEXT">CTransInPlaceInputPin::GetAllocator</A> member function (the output pin could provide its 
own allocator).
</DD><DT><I>bReadOnly</I>
 </DT><DD>Flag to indicate if the samples from this allocator are read-only.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful. Returns E_POINTER if the pointer is invalid. Otherwise, returns an error due to calling <A HREF="dssd0252.htm#Lib_0001060248040700" TARGET="TEXT">CTransInPlaceOutputPin::ReceiveAllocator</A>.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0195.htm#Lib_000106020f070d00" TARGET="TEXT">CBaseInputPin::NotifyAllocator</A> 
member function and implements the <A HREF="dssd0161.htm#If_0001060149030300" TARGET="TEXT">IMemInputPin::NotifyAllocator</A> method.
This member function remembers the allocator and passes it to the output pin because they both 
must share the same allocator.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050700">CTransInPlaceInputPin::PeekAllocator</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Returns a pointer to the default allocator.

<P><B>IMemAllocator</B> <B>*</B> <B>PeekAllocator</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="dssd0195.htm#Lib_000106020f010001" TARGET="TEXT">m_pAllocator</A> data 
member inherited from <A HREF="dssd0195.htm" TARGET="TEXT">CBaseInputPin</A>.

<H5>Remarks</H5>
<P>This method does not increment the reference count.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060247050800">CTransInPlaceInputPin::ReadOnly</A></H3>
<A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin Class</A>
<P>Returns <A HREF="dssd0251.htm#Lib_0001060247010002" TARGET="TEXT">m_bReadOnly</A> to 
indicate whether or not a stream is read-only.

<P><B>const</B> <B>BOOL</B> <B>ReadOnly</B><B>(</B> <B>)</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the stream is read-only. Returns FALSE otherwise.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
