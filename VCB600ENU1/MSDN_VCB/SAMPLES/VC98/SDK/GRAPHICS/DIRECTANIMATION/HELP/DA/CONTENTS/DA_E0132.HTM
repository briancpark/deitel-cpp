<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>DXMEvent Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/DA_E0131.htm','/DA_E0000.htm','/DA_E0116.htm','/index.htm','/DA_E0133.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="dxmref_0001070110000000">DXMEvent Class</A></H2>
<BR CLEAR=ALL>
<PRE><FONT FACE="Courier" SIZE="2">public class DXMEvent extends Behavior{

    // Constructor
    public DXMEvent();

    // Methods
    public DXMEvent attachData(Object object);
    public DXMEvent notifyEvent(UntilNotifier notifier);
    public Object registerCallback(EventCallbackObject object, BvrsToRun extraBvrsToRun, boolean bool);
    public DXMEvent snapshotEvent(Behavior a);

    public static DXMEvent newUninitBvr();
    
}
</FONT></PRE>
<P>Creates an object that represents an event. Events identify specific times, states or user actions and are used to specify when given actions should occur. Typically, you use events with the <A HREF="DA_E0122.htm" TARGET="TEXT">until</A> and <A HREF="DA_E0122.htm" TARGET="TEXT">untilNotify</A> methods to create behaviors that change as a result of the event. For example, you can change the color of an object when the user presses a mouse button by specifying the mouse button event in a call to the <A HREF="DA_E0127.htm" TARGET="TEXT">until</A> method of the <A HREF="DA_E0127.htm" TARGET="TEXT">ColorBvr</A> class. Every event, when it occurs, returns some event data. This data may or may not be meaningful. The data returned, for example, by <A HREF="DA_E0167.htm#dxmref_0001070133000002" TARGET="TEXT">leftButtonDown</A> has no meaning. 

<P>You can combine existing events to create new, more complex events. For example, the <A HREF="DA_E0166.htm#dxmref_0001070132000100" TARGET="TEXT">andEvent</A> method lets you combine two events so that the resulting event occurs only if both of the original events occur simultaneously.

<UL><LI><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110010000" TARGET="TEXT">Constructor</A>
<LI><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110020000" TARGET="TEXT">Methods</A>
<LI><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110030000" TARGET="TEXT">Relevant Methods from the Statics Class</A>
<LI><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110040000" TARGET="TEXT">Relevant Fields from the Statics Class</A>
</UL>
<H3><A NAME="dxmref_0001070110010000">Constructor</A></H3>
<P><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110010100" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">DXMEvent</A><BR>
<H4><HR COLOR=#0000FF><A NAME="dxmref_0001070110010100">DXMEvent</A></H4>
<A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent Class</A>
<P>Constructs an <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A> object.

<P><B>public</B> <B>DXMEvent</B><B>(</B> <B>)</B><B>;</B><BR><H3><A NAME="dxmref_0001070110020000">Methods</A></H3>
<P><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110020100" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">attachData</A><BR>
<P><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110020200" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">notifyEvent</A><BR>
<P><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110020300" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">registerCallback</A><BR>
<P><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110020400" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">snapshotEvent</A><BR>
<P><A CLASS=tctop HREF="DA_E0132.htm#dxmref_0001070110020500" TARGET=TEXT><IMG SRC="../art/bullet1.gif" WIDTH="5" HEIGHT="11" BORDER=0 ALT="bullet1.gif">newUninitBvr</A><BR>
<H4><HR COLOR=#0000FF><A NAME="dxmref_0001070110020100">attachData</A></H4>
<A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent Class</A>
<P>Takes an arbitrary object and produces a new event. The new event occurs at the same time as the original event, but its data is now the data that was specified in the call to <B>attachData</B>. This allows an application to associate arbitrary client data with an event and know that it will be delivered to the notifier when the event occurs. In the following example, the behavior is red until the left mouse button is pressed. It then passes either green or yellow, depending on what is returned by the notifier.

<PRE><FONT FACE="Courier" SIZE="2">DXMEvent greenLeft = leftButtonDown.attachData(green);
DXMEvent yellowright = rightButtonDown.attachData(yellow);
ColorBvr myBvr = (ColorBvr)untilNotify(red, orEvent(greenLeft, yellowRight), notifier);
</FONT></PRE>
<P><B>public</B> <B>DXMEvent</B> <B>attachData</B><B>(</B><BR>&nbsp;&nbsp;<B>Object</B> <I>object</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>object</I>
 </DT><DD>An arbitrary object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A> object. The event data is the event data of the new event.


<H4><HR COLOR=#0000FF><A NAME="dxmref_0001070110020200">notifyEvent</A></H4>
<A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent Class</A>
<P>Creates a new event. This occurs when the original event occurs. It then calls the notifier and uses the result as its event data.

<P><B>public</B> <B>DXMEvent</B> <B>notifyEvent</B><B>(</B><BR>&nbsp;&nbsp;<B>UntilNotifier</B> <I>notifier</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>notifier</I>
 </DT><DD>Returns the new behavior.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A> object. The event data is the time the event fired and the new behavior.


<H4><HR COLOR=#0000FF><A NAME="dxmref_0001070110020300">registerCallback</A></H4>
<A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent Class</A>
<P>Causes an external action when an event occurs in DirectAnimation for Java and is used in conjunction with the <A HREF="DA_E0136.htm" TARGET="TEXT">EventCallbackObject</A>. Whenever that event occurs, the <A HREF="DA_E0136.htm#dxmref_0001070114010100" TARGET="TEXT">invoke</A> method of the callback is called with the event data produced by the event. An example of where this method is used is displaying a GUI window when the mouse moves to a particular area.

<P><B>public</B> <B>Object</B> <B>registerCallback</B><B>(</B><BR>&nbsp;&nbsp;<B>EventCallbackObject</B> <I>object</I><B>,</B><BR>&nbsp;&nbsp;<B>BvrsToRun</B> <I>extraBvrsToRun</I><B>,</B><BR>&nbsp;&nbsp;<B>boolean</B> <I>bool</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>object</I>
 </DT><DD>An object that implements the <A HREF="DA_E0136.htm" TARGET="TEXT">EventCallback</A> interface.
</DD><DT><I>extraBvrsToRun</I>
 </DT><DD>Behaviors that are not part of the model.
</DD><DT><I>bool</I>
 </DT><DD>If true, the first occurrence of the event will trigger invoke. If false, every occurrence of the event will trigger invoke. 
</DD></DL>
<H5>Return Values</H5>
<P>Returns an object of type java.lang.Object. This object can be used to unregister the callback.


<H5>See Also</H5>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000900" TARGET="TEXT">unregisterCallback</A>

<H4><HR COLOR=#0000FF><A NAME="dxmref_0001070110020400">snapshotEvent</A></H4>
<A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent Class</A>
<P>When called on an instance of a behavior, samples the given behavior and returns it as a constant behavior with the value as data. The event time of the new event is when the original event occurs. In the following example, the value of <I>n</I> is localTime until the left mouse button is pressed. It then becomes whatever the value of localTime was when the event occurred:

<PRE><FONT FACE="Courier" SIZE="2">
n=until(localTime, leftButtonDown.snapshotEvent(localTime));
</FONT></PRE>
<P><B>public</B> <B>DXMEvent</B> <B>snapshotEvent</B><B>(</B><BR>&nbsp;&nbsp;<B>Behavior</B> <I>a</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>a</I>
 </DT><DD>The <A HREF="DA_E0122.htm" TARGET="TEXT">Behavior</A> object which will be sampled when the method is invoked.
</DD></DL>
<H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A> object. The event data is the value of the behavior at the time it was sampled, returned as a constant behavior.


<H4><HR COLOR=#0000FF><A NAME="dxmref_0001070110020500">newUninitBvr</A></H4>
<A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent Class</A>
<P>This method allows you to refer to an DXMEvent behavior before that behavior has been defined. With this method you can create the behavior and use it in the definition of other behaviors, but not actually define its contents until some later point. (This is accomplished with the <A HREF="DA_E0122.htm#dxmref_0001070106010800" TARGET="TEXT">init</A> method, which is available on all behaviors.) The system generates a run-time error if you initialize a non-uninitialized behavior, initialize an uninitialized behavior that has already been initialized, or run an initialized behavior that has not yet been initialized.

<P><B>public</B> <B>static</B> <B>newUninitBvr</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A> object.


<H3><A NAME="dxmref_0001070110030000">Relevant Methods from the Statics Class</A></H3>
<P>The following methods are defined in the <A HREF="DA_E0157.htm" TARGET="TEXT">Statics</A> class and are most relevant to objects of type <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A>.

<P><A HREF="DA_E0166.htm#dxmref_0001070132000100" TARGET="TEXT">public static DXMEvent andEvent(DXMEvent first, DXMEvent second);</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000200" TARGET="TEXT">public static DXMEvent keyDown(int keyCode)</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000300" TARGET="TEXT">public static DXMEvent keyUp(int keyCode)</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000400" TARGET="TEXT">public static DXMEvent notEvent(DXMEvent ev);</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000500" TARGET="TEXT">public static DXMEvent orEvent(DXMEvent first, DXMEvent second);</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000600" TARGET="TEXT">public static DXMEvent predicate(BooleanBvr bool);</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000700" TARGET="TEXT">public static DXMEvent thenEvent(DXMEvent e1, DXMEvent e2);</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000800" TARGET="TEXT">public static DXMEvent timer(NumberBvr timeout);</A>
<P><A HREF="DA_E0166.htm#dxmref_0001070132000900" TARGET="TEXT">public static void unregisterCallback(Object object);</A>

<H3><A NAME="dxmref_0001070110040000">Relevant Fields from the Statics Class</A></H3>
<P><P>The following fields are defined in the <A HREF="DA_E0157.htm" TARGET="TEXT">Statics</A> class and are most relevant to objects of type <A HREF="DA_E0132.htm" TARGET="TEXT">DXMEvent</A>.

<P><A HREF="DA_E0167.htm#dxmref_0001070133000001" TARGET="TEXT">public final static DXMEvent always;</A>
<P><A HREF="DA_E0167.htm#dxmref_0001070133000002" TARGET="TEXT">public final static DXMEvent leftButtonDown;</A>
<P><A HREF="DA_E0167.htm#dxmref_0001070133000003" TARGET="TEXT">public final static DXMEvent leftButtonUp;</A>
<P><A HREF="DA_E0167.htm#dxmref_0001070133000004" TARGET="TEXT">public final static DXMEvent never;</A>
<P><A HREF="DA_E0167.htm#dxmref_0001070133000005" TARGET="TEXT">public final static DXMEvent rightButtonDown;</A>
<P><A HREF="DA_E0167.htm#dxmref_0001070133000006" TARGET="TEXT">public final static DXMEvent rightButtonUp;</A>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
