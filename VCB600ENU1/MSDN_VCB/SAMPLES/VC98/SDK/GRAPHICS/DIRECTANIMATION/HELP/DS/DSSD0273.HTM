<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>String Functions</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0272.htm','/dssd0000.htm','/dssd0256.htm','/index.htm','/dssd0274.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="fmutil_0001060311000000">String Functions</A></H2>
<BR CLEAR=ALL>
<P>The Wxutil.h header file in the DirectShow base classes provides wide string functions, if they are not already provided by the Microsoft&#174; Win32&#174; environment.


<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Function </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0273.htm#fmutil_0001060311000100" TARGET="TEXT">AMGetWideString</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allocates and creates a wide string version of an existing nonwide string.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0273.htm#fmutil_0001060311000200" TARGET="TEXT">lstrcmpiW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compares two wide strings, ignoring case.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0273.htm#fmutil_0001060311000300" TARGET="TEXT">lstrcmpW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Compares two wide strings.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0273.htm#fmutil_0001060311000500" TARGET="TEXT">lstrcpynW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Copies one wide string to another, with a maximum length.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0273.htm#fmutil_0001060311000400" TARGET="TEXT">lstrcpyW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Copies one wide string to another.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0273.htm#fmutil_0001060311000600" TARGET="TEXT">lstrlenW</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Gets the length of a wide string in wide characters.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060311000100">AMGetWideString</A></H3>
<P>Allocates and creates a Unicode version of an existing non-Unicode string.

<P><B>STDAPI</B> <B>AMGetWideString</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pszString</I><B>,</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>*ppszReturn</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pszString</I>
 </DT><DD>Non-Unicode source string.
</DD><DT><I>ppszReturn</I>
 </DT><DD>Address of a Unicode string that will contain <I>pszString</I>.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if successful, E_POINTER if <I>ppszReturn</I> is NULL, or E_OUTOFMEMORY if not enough memory is available.

<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060311000200">lstrcmpiW</A></H3>
<P>Compares two wide-character strings. The comparison is not case sensitive.

<P><B>int</B> <B>lstrcmpiW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString1</I><B>,</B>&nbsp;&nbsp;/* address of first wide string */<BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><BR>&nbsp;&nbsp;<B>)</B><I>;</I> &nbsp;&nbsp;/* address of second wide string */<BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to the first null-terminated wide string to be compared.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the second null-terminated wide string to be compared.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a negative value if the function succeeds and the string that <I>lpszString1</I> points to is less than the string that <I>lpszString2</I> points to. Returns a positive value if the string that <I>lpszString1</I> points to is greater than the string that <I>lpszString2</I> points to. Returns zero if the strings are equal.

<H5>Remarks</H5>
<P>The <B>lstrcmpiW</B> function compares two wide strings by checking the first characters against each other, the second characters against each other, and so on until it finds an inequality or reaches the ends of the strings.

<P>The function returns the difference of the values of the first unequal characters it encounters. For instance, <B>lstrcmpiW</B> determines that L"abcz" is greater than L"abcdefg" and returns the difference of L'z' and L'd'.

<P>The language (locale) is treated as always being English.
<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060311000300">lstrcmpW</A></H3>
<P>Compares two wide-character strings. The comparison is case sensitive.

<P><B>int</B> <B>lstrcmpW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString1</I><B>,</B>&nbsp;&nbsp;/* address of first wide string */<BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><BR>&nbsp;&nbsp;<B>)</B><I>;</I> &nbsp;&nbsp;/* address of second wide string */<BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to the first null-terminated wide string to be compared.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the second null-terminated wide string to be compared.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a negative value if the function succeeds and the string that <I>lpszString1</I> points to is less than the string that <I>lpszString2</I> points to. Returns a positive value if the string that <I>lpszString1</I> points to is greater than the string that <I>lpszString2</I> points to. Returns zero if the strings are equal.

<H5>Remarks</H5>
<P>The <B>lstrcmpW</B> function compares two wide strings by checking the first characters against each other, the second characters against each other, and so on until it finds an inequality or reaches the ends of the strings.

<P>The function returns the difference of the values of the first unequal characters it encounters. For instance, <B>lstrcmpW</B> determines that L"abcz" is greater than L"abcdefg" and returns the difference of L'z' and L'd'.

<P>The language (locale) is treated as always being English.
<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060311000400">lstrcpyW</A></H3>
<P>Copies a wide string to a buffer.

<P><B>LPWSTR</B> <B>lstrcpyW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>lpszString1</I><B>,</B>&nbsp;&nbsp;/* address of buffer */<BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><BR>&nbsp;&nbsp;<B>)</B><I>;</I> &nbsp;&nbsp;/* address of wide string to copy */<BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to a buffer to receive the contents of the string pointed to by the <I>lpszString2</I> parameter. The buffer must be large enough to contain the string, including the terminating wide null character.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the null-terminated wide string to be copied.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the buffer.

<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060311000500">lstrcpynW</A></H3>
<P>Copies a wide string to a buffer, up to a specified number of wide characters.

<P><B>LPWSTR</B> <B>lstrcpynW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPWSTR</B> <I>lpszString1</I><B>,</B>&nbsp;&nbsp;/* address of buffer */<BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString2</I><B>,</B>&nbsp;&nbsp;/* address of wide string to copy */<BR>&nbsp;&nbsp;<B>int</B> <I>iMaxLength</I><BR>&nbsp;&nbsp;<B>)</B><I>;</I> &nbsp;&nbsp;/* max wide characters to copy */<BR><H5>Parameters</H5>
<DL><DT><I>lpszString1</I>
 </DT><DD>Pointer to a buffer to receive the contents of the string that the <I>lpszString2</I> parameter points to. The buffer must be large enough to contain the string, including the terminating wide null character.
</DD><DT><I>lpszString2</I>
 </DT><DD>Pointer to the null-terminated wide string to be copied.
</DD><DT><I>iMaxLength</I>
 </DT><DD>Maximum number of wide characters to copy, including a terminating null character.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the buffer.

<H5>Remarks</H5>
<P>If <I>iMaxLength</I> is nonzero, <B>lstrcpynW</B> always inserts a terminating null wide character in the destination string, which could result in the source string being truncated.
<H3><HR COLOR=#0000FF><A NAME="fmutil_0001060311000600">lstrlenW</A></H3>
<P>Retrieves the length of the specified wide string.

<P><B>int</B> <B>lstrlenW</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>lpszString</I><BR>&nbsp;&nbsp;<B>)</B><I>;</I> &nbsp;&nbsp;/* address of wide string to count */<BR><H5>Parameters</H5>
<DL><DT><I>lpszString</I>
 </DT><DD>Pointer to a null-terminated wide string.
</DD></DL>
<H5>Return Values</H5>
<P>If the function succeeds, the return value specifies the length of the string, in wide characters.

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
