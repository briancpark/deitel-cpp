<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>Transform Filters</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0349.htm','/dssd0000.htm','/dssd0294.htm','/index.htm','/dssd0351.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="samples_0001070204000000">Transform Filters</A></H2>
<BR CLEAR=ALL>
<P>This article details sample transform filters (sometimes called <I>effects</I>). The sample transform filters include an audio effect, some video effects, some MPEG codecs, a VCR controller, and various "null" (pass-through) filters. 

<P><B>Contents of this article:</B>
<UL><LI><A HREF="dssd0350.htm#samples_0001070204010000" TARGET="TEXT">Contrast Filter</A>
<LI><A HREF="dssd0350.htm#samples_0001070204020000" TARGET="TEXT">Image Effect Filter (EzRGB24)</A>
<LI><A HREF="dssd0350.htm#samples_0001070204030000" TARGET="TEXT">Gargle (Simple Audio Processing Filter)</A>
<LI><A HREF="dssd0350.htm#samples_0001070204040000" TARGET="TEXT">MPEG Framework Audio Codec</A>
<LI><A HREF="dssd0350.htm#samples_0001070204050000" TARGET="TEXT">MPEG Framework Video Codec</A>
<LI><A HREF="dssd0350.htm#samples_0001070204060000" TARGET="TEXT">Null In-place Filter</A>
<LI><A HREF="dssd0350.htm#samples_0001070204070000" TARGET="TEXT">Nullnull Filter</A>
<LI><A HREF="dssd0350.htm#samples_0001070204080000" TARGET="TEXT">VCR Device Control Filter</A>
</UL>
<A NAME="samples_0001070204010000"></A><P><B>Contrast Filter</B>
<P>The Contrast filter illustrates how to define and implement a simple custom interface within the structure provided by the DirectShow&#153; base classes. This filter demonstrates how to use the <A HREF="dssd0247.htm" TARGET="TEXT">CTransformFilter</A> class to implement a simple effects filter.

<P>The Contrast filter also provides a good example of the flexibility of the filter graph architecture. This flexibility is demonstrated when the filter is used in conjunction with a tee filter to produce "before and after" (side-by-side original and modified) video streams.

<P>The Contrast filter is a simple transform filter that adjusts the contrast of the video stream that is passed through it. It provides a custom interface for adjusting the contrast. The Contrast filter also uses the <A HREF="dssd0201.htm" TARGET="TEXT">CBasePropertyPage</A> class to provide a property page for applications that do not provide a user interface.

<P><B>Note</B>  The Contrast filter adjusts the contrast by using a trick with palettes. The color palette of an image effectively determines how the image is interpreted. By changing the palette, the filter can change the contrast without changing the image pixels themselves.
<A NAME="samples_0001070204020000"></A><P><B>Image Effect Filter (EzRGB24)</B>
<P>The RGB 24 video effect filter, EzRGB24, is a sample of an image processing filter. This shows usage of a number of DirectShow classes and interfaces, including <A HREF="dssd0247.htm" TARGET="TEXT">CTransformFilter</A>, <A HREF="dssd0235.htm" TARGET="TEXT">CPersistStream</A>, <A HREF="dssd0201.htm" TARGET="TEXT">CBasePropertyPage</A>, and <A HREF="dssd0389.htm#external_00010a01090000a2" TARGET="TEXT">ISpecifyPropertyPages</A>.

<P>This filter's purpose is to provide fast and single stream effects. The EzRGB24 filter also shows how to add image processing effects using DirectShow. You can use this filter as a component of an DirectShow video editor. Some applications can provide more sophisticated effects than these.


Effects with fast execution were selected to help demonstrate DirectShow's power in enabling real-time effects&#151;the idea was to show something that could not have been built using Microsoft Video for Windows. Developers should see this sample and be motivated to create their own image effects.

<P>This filter performs a number of individual video effects. These include red, green, blue, darken, XOR, blur, gray, and emboss image-processing effects.


<A NAME="samples_0001070204030000"></A><P><B>Gargle (Simple Audio Processing Filter)</B>
<P>The audio processing filter, Gargle, illustrates how to do a simple sound effect. Echo, flanging,
band-pass filtering, and other effects can be carried out in a way similar to that demonstrated 
by the Gargle filter. This sample demonstrates the <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A>, <A HREF="dssd0235.htm" TARGET="TEXT">CPersistStream</A>, and <A HREF="dssd0201.htm" TARGET="TEXT">CBasePropertyPage</A> classes. It also shows use of the <A HREF="dssd0277.htm#fmdebug_0001060402000100" TARGET="TEXT">ASSERT</A>, <A HREF="dssd0278.htm#fmdebug_0001060403000100" TARGET="TEXT">DbgBreak</A>, <A HREF="dssd0283.htm#fmdebug_0001060408020300" TARGET="TEXT">DbgLog</A>, and <A HREF="dssd0278.htm#fmdebug_0001060403000200" TARGET="TEXT">DbgBreakPoint</A> debug macros.

<P>The Gargle filter modulates the waveform passing through the filter by multiplying it by another waveform that is mathematically generated within the filter. The modulating waveform is, by default, a triangular wave. The property sheet also allows the alternative of a square wave. You can set the frequency of the modulating wave through the property sheet of the filter. At low frequencies (near 1 Hz), the sound grows and diminishes. At medium frequencies (5 to 15 Hz), the sound has a tremolo quality, which is why it is referred to as gargling. At higher frequencies (100 Hz and up), the filter generates extra frequencies in the original sound. If a 500 Hz sound is played at 100 Hz, then it produces additional frequencies of 400 Hz, 600 Hz, 200 Hz, 800 Hz, and so on.

<P>This filter is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category. 


<A NAME="samples_0001070204040000"></A><P><B>MPEG Framework Audio Codec</B>
<P>The MPEG framework audio codec, MPGAudio, provides a prototype for an MPEG audio decoder. It uses the <A HREF="dssd0247.htm" TARGET="TEXT">CTransformFilter</A> class.

<P>As supplied, this framework just consumes the passed-in audio frames. That is, audio frames do not produce any output from this framework. You would need to expand the framework with code specific to the outputs desired.



<A NAME="samples_0001070204050000"></A><P><B>MPEG Framework Video Codec</B>
<P>The MPEG framework video codec, MPGVideo, provides a prototype for an MPEG video decoder.
It uses the <A HREF="dssd0247.htm" TARGET="TEXT">CTransformFilter</A> class. The MPGVideo filter also shows the processing of quality-management messages.

<P>As supplied, this framework just consumes the passed-in video frames. That is, video frames do not produce any output from this framework. You would need to expand the framework with code specific to the outputs desired.


<A NAME="samples_0001070204060000"></A><P><B>Null In-place Filter</B>
<P>The null in-place filter, Nullip, is an example of a transform-inplace filter. It illustrates how a transform filter can behave in a relatively transparent manner. Nullip is a simple filter that passes all data from its input pin to its output pin. No transformations are performed on the data.

<P>The Nullip filter provides an example of using the <A HREF="dssd0251.htm" TARGET="TEXT">CTransInPlaceInputPin</A> class. It shows using the <A HREF="dssd0188.htm" TARGET="TEXT">CAutoLock</A> class to automatically release critical sections. Other classes used include <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A>, <A HREF="dssd0201.htm" TARGET="TEXT">CBasePropertyPage</A>, <A HREF="dssd0229.htm" TARGET="TEXT">CMediaType</A>, and <A HREF="dssd0252.htm" TARGET="TEXT">CTransInPlaceOutputPin</A>. It also enables a user to select the media types that it can pass through itself. This filter has one input pin, one output pin, and performs its transform inplace (without copying the data) in the push thread. In other words, the <A HREF="dssd0250.htm#Lib_0001060246030a00" TARGET="TEXT">CTransInPlaceFilter::Receive</A> method is called with a buffer, which it transforms and delivers to the next filter downstream. The 
<A HREF="dssd0250.htm#Lib_0001060246030a00" TARGET="TEXT">Receive</A> method is then blocked until that filter returns; it subsequently returns to its own calling member function.
<P>This filter is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category. 



<A NAME="samples_0001070204070000"></A><P><B>Nullnull Filter</B>
<P>The NullNull sample 


 illustrates a minimal filter, called Minimal Null in the Filter Graph Editor. It does not support the media type selection that Nullip does. The Minimal Null filter uses the <A HREF="dssd0250.htm" TARGET="TEXT">CTransInPlaceFilter</A> class.
<P>This filter is available through the Filter Graph Editor when you choose <B>Insert Filters</B> from the <B>Graph</B> menu, and select the DirectShow Filters category. 








<A NAME="samples_0001070204080000"></A><P><B>VCR Device Control Filter</B>
<P>The Vcrctrl sample is a simple implementation of DirectShow's external device control interfaces. It provides basic transport control and SMPTE timecode reading capabilities for certain Betacam and SVHS videocassette recorders with RS-422 or RS-232 serial interfaces (please see source code for specific machine types supported).

<P>Once you build the filter from the sample code, you can register it by typing the following at the command line:
<PRE><FONT FACE="Courier" SIZE="2">
regsvr32 vcrctrl.ax
</FONT></PRE>
<P>For information about building filters, see <A HREF="dssd0051.htm" TARGET="TEXT">Build a Filter or Application with Visual C++ 5.x</A>. Once you have registered the filter, run GraphEdit and insert the filter. 
<P>This sample is not intended to be a frame-accurate, system-ready implementation ready for professional applications. It is designed to show basic device control filter structure, and therefore does not implement several of the more sophisticated features of the interfaces such as edit event control. Frame-accurate control is best achieved by writing a low level, kernel-mode communications driver underneath the filter. Developers should refer to the Driver Development Kit (DDK) for the appropriate platform.
<P><B>Using the Sample</B>
<P>With this sample, a VCR can be controlled through property pages. You should keep in mind the following:
<UL><LI>The sample automatically links the transport to the graph's Run, Pause, and Stop methods. You can unlink the transport on the General property page by removing the selection from the Link to Graph checkbox. This is a persistent property, so if you save the graph the transport will remain unlinked.
<LI>The filter automatically detects the presence of a compatible VCR on COM2. If it can't find a VCR or if the port is in use, it switches to simulation mode. You can select the port to use on the General property page. 
<LI>The timecode pin can connect either to the text renderer or the timecode renderer (tcrender.ax), which accepts the media type MEDIATYPE_AuxData/MEDIASUBTYPE_Timecode. 
<LI>The main property page shows the available video and audio inputs, although they cannot be selected. The hardware does not support this feature, and it was implemented to show physical pin property enumeration.
<LI>The device communications class (devcom) is thread-safe and handles SMPTE timecodes. On some VCRs, timecode detection is not supported, so timecode values might not be accurate.
</UL>
<P>This sample contains the following files:
<UL><LI>cvcrutil.h, .cpp - implementation of the device control interfaces
<LI>fvcrctrl.h, .cpp - the filter implementation
<LI>cdevcom.h, .cpp - the communications object that handles device-specific protocols and the serial port interface
<LI>ctimecod.h, .cpp - the SMPTE timecode support
<LI>trprop.h, .cpp - the transport properties
<LI>vcrprop.h, .cpp - the general properties
<LI>vcrprop.rc - the dialog resources
<LI>vcrctrl.def - the module definition file
<LI>vcruids.h - the CLSIDs used by the filter
</UL>
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
