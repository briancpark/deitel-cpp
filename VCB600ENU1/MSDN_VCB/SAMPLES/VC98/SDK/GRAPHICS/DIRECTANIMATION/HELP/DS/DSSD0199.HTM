<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CBaseOutputPin Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0198.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0200.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060213000000">CBaseOutputPin Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/filter06.gif" WIDTH="302" HEIGHT="202" ALT="CBaseOutputPin class hierarchy" >

<P><B>CBaseOutputPin</B> is an abstract base class derived from the <A HREF="dssd0200.htm" TARGET="TEXT">CBasePin</A> class 
that provides support for the common memory transport. <B>CBaseOutputPin</B> connects only 
to an input pin that supplies an <A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin</A> interface (such as a pin class derived from 
the <A HREF="dssd0195.htm" TARGET="TEXT">CBaseInputPin</A> class), and provides methods for the filter to access that interface. 
Derive your output pins from this class for the easiest implementation.

<P>An output pin must provide one or more media types when connected to an
input pin. If the media type that returns an index size, for example,
is not currently available, the output pin should return S_FALSE in the
<A HREF="dssd0200.htm#Lib_0001060214061500" TARGET="TEXT">CBasePin::GetMediaType</A> member function, and the base class will skip it.

<P>Your output pin class methods (represented here with the class name CYourPin) should call
<B>CBaseOutputPin</B>. For example, CYourPin::Active should call <A HREF="dssd0199.htm#Lib_0001060213040100" TARGET="TEXT">CBaseOutputPin::Active</A>
first, to see if it should proceed. CYourPin::Inactive should call
<A HREF="dssd0199.htm#Lib_0001060213041100" TARGET="TEXT">CBaseOutputPin::Inactive</A> first, to decommit the sample
allocator and avoid deadlock problems with <A HREF="dssd0199.htm#Lib_0001060213041000" TARGET="TEXT">CBaseOutputPin::GetDeliveryBuffer</A>.

<P>All member functions in this class that return <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> and accept a pointer as a 
parameter return E_POINTER when passed a null pointer. 

<P>All <A HREF="dssd0167.htm" TARGET="TEXT">IQualityControl</A> method implementations are inherited from the <A HREF="dssd0200.htm" TARGET="TEXT">CBasePin</A> 
class and are not overridden by this class. 

<A NAME="Lib_0001060213010000"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060213010001">m_pAllocator</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> interface for this pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060213010002">m_pInputPin</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pointer to the input pin to which this pin is connected.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060213020000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040400" TARGET="TEXT">CBaseOutputPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin</A> object.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060213030000"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040100" TARGET="TEXT">Active</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches the pin to the active (running) mode.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040300" TARGET="TEXT">BreakConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Releases the allocator and the <A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin</A> interface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040500" TARGET="TEXT">CheckConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calls <A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> to retrieve an <A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin</A> interface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040600" TARGET="TEXT">CompleteConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Completes the connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040700" TARGET="TEXT">DecideAllocator</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Negotiates the allocator.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040800" TARGET="TEXT">DecideBufferSize</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the number and size of buffers required for the transfer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040900" TARGET="TEXT">Deliver</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Delivers an <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> buffer to the connecting pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040a00" TARGET="TEXT">DeliverBeginFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calls the <A HREF="dssd0165.htm#If_000106014d030100" TARGET="TEXT">IPin::BeginFlush</A> method on the connected pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040b00" TARGET="TEXT">DeliverEndFlush</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calls <A HREF="dssd0165.htm#If_000106014d030600" TARGET="TEXT">IPin::EndFlush</A> on the connected input pin to pass an end-flushing notification.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040c00" TARGET="TEXT">DeliverEndOfStream</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calls <A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">IPin::EndOfStream</A> on the connected input pin to pass an end-of-stream 
notification.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040d00" TARGET="TEXT">DeliverNewSegment</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calls <A HREF="dssd0165.htm#If_000106014d030900" TARGET="TEXT">IPin::NewSegment</A> on the connected input pin to pass a segment.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213041000" TARGET="TEXT">GetDeliveryBuffer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> buffer suitable for passing across the connection.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213041100" TARGET="TEXT">Inactive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches the pin to the inactive (stopped) mode.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213041200" TARGET="TEXT">InitAllocator</A> 
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Creates a default memory allocator. Override this to provide your
 own allocator or to provide no allocator.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060213040000"></A><P><B>Implemented IPin Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040200" TARGET="TEXT">BeginFlush</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to begin a flush operation. Implemented to return E_UNEXPECTED 
because it is an error to call this on an output pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040e00" TARGET="TEXT">EndFlush</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin to end a flush operation. Implemented to return E_UNEXPECTED 
because it is an error to call this on an output pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0199.htm#Lib_0001060213040f00" TARGET="TEXT">EndOfStream</A>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the pin that no additional data is expected until a new run command is issued. 
Implemented to return E_UNEXPECTED because it is an error to call this on an output pin.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040100">CBaseOutputPin::Active</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Called by the <A HREF="dssd0194.htm" TARGET="TEXT">CBaseFilter</A> implementation when the state changes from stopped to either paused or running.

<P><B>HRESULT</B> <B>Active</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000032" TARGET="TEXT">VFW_E_NO_ALLOCATOR</A> if there is no allocator.


<H5>Remarks</H5>
<P>This member function calls <A HREF="dssd0189.htm#Lib_0001060209050300" TARGET="TEXT">CMemAllocator::Commit</A> to commit memory required before becoming active.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040200">CBaseOutputPin::BeginFlush</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Informs the pin to begin a flush operation.

<P><B>HRESULT</B> <B>BeginFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns E_UNEXPECTED.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0165.htm#If_000106014d030100" TARGET="TEXT">IPin::BeginFlush</A> method. It returns E_UNEXPECTED because this should be called only on input pins. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040300">CBaseOutputPin::BreakConnect</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Releases <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> and <A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin</A> objects acquired by the pin.

<P><B>HRESULT</B> <B>BreakConnect</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR by the default base class implementation.


<H5>Remarks</H5>
<P>This member function releases the <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> and <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interfaces used
during the connection.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040400">CBaseOutputPin::CBaseOutputPin</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Constructs a <A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin</A> object.

<P><B>CBaseOutputPin</B><B>(</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pObjectName</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseFilter</B> <I>*pFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>CCritSec</B> <I>*pLock</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <B>*</B> <I>phr</I><B>,</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>pName</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pObjectName</I>
 </DT><DD>Name of the object used in the <A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin</A> constructor for debugging purposes.
</DD><DT><I>pFilter</I>
 </DT><DD>Filter to which the pin will be attached.
</DD><DT><I>pLock</I>
 </DT><DD>Pointer to a <A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin</A> object for locking.
</DD><DT><I>phr</I>
</DT><DD>Pointer to the general OLE return value. This value is changed only if this function fails.
</DD><DT><I>pName</I>
 </DT><DD>Pin name.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040500">CBaseOutputPin::CheckConnect</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Calls <A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> on the connected pin to retrieve an <A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin</A> interface.

<P><B>HRESULT</B> <B>CheckConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
</DT><DD>Pointer to the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface on the connecting pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful; otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> error value.


<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040600">CBaseOutputPin::CompleteConnect</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Completes a connection to another filter.

<P><B>virtual</B> <B>HRESULT</B> <B>CompleteConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pReceivePin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pReceivePin</I>
 </DT><DD>Pointer to the connected (receiving) pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value. The default implementation returns NOERROR.


<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0200.htm#Lib_0001060214060800" TARGET="TEXT">CBasePin::CompleteConnect</A> member 
function and calls the <A HREF="dssd0199.htm#Lib_0001060213040700" TARGET="TEXT">CBaseOutputPin::DecideAllocator</A> member function to finish 
completing the connection.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040700">CBaseOutputPin::DecideAllocator</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Negotiates the allocator to use.

<P><B>virtual</B> <B>HRESULT</B> <B>DecideAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemInputPin</B> <B>*</B> <I>pPin</I><B>,</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>**</B> <I>pAlloc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
</DT><DD>Pointer to the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface of the connecting pin.
</DD><DT><I>pAlloc</I>
</DT><DD>Pointer to the negotiated <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful; otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function calls the <A HREF="dssd0199.htm#Lib_0001060213040800" TARGET="TEXT">CBaseOutputPin::DecideBufferSize</A> member 
function, which is not implemented by this base class.
Override <A HREF="dssd0199.htm#Lib_0001060213040800" TARGET="TEXT">DecideBufferSize</A>
to call <A HREF="dssd0160.htm#If_0001060148030600" TARGET="TEXT">IMemAllocator::SetProperties</A>.

<P>If the connected input pin fails a call to <A HREF="dssd0161.htm#If_0001060149030100" TARGET="TEXT">IMemInputPin::GetAllocator</A>, 
this member function constructs a <A HREF="dssd0230.htm" TARGET="TEXT">CMemAllocator</A> object and calls 
<A HREF="dssd0199.htm#Lib_0001060213040800" TARGET="TEXT">CBaseOutputPin::DecideBufferSize</A> on that object. If the call to 
<A HREF="dssd0199.htm#Lib_0001060213040800" TARGET="TEXT">DecideBufferSize</A> is successful, this member 
function notifies the input pin of the selected allocator. This function is called by the base class 
implementation of the <A HREF="dssd0165.htm#If_000106014d030200" TARGET="TEXT">IPin::Connect</A> method, which is responsible for locking the 
object's critical section.

<P>Override this member function if you want to use your own allocator. The input pin
gets the first choice for the allocator, and the output pin agrees or forces it to use
another allocator.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040800">CBaseOutputPin::DecideBufferSize</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Retrieves the number and size of buffers required for the transfer.

<P><B>virtual</B> <B>HRESULT</B> <B>DecideBufferSize</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <B>*</B> <I>pAlloc</I><B>,</B><BR>&nbsp;&nbsp;<B>ALLOCATOR_PROPERTIES</B> <B>*</B> <I>ppropInputRequest</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pAlloc</I>
</DT><DD>Allocator assigned to the transfer.
</DD><DT><I>ppropInputRequest</I>
</DT><DD>Requested allocator properties for count, size, and alignment,
as specified by the <A HREF="dssd0287.htm#structs_0001060501000100" TARGET="TEXT">ALLOCATOR_PROPERTIES</A> structure.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The <A HREF="dssd0199.htm#Lib_0001060213040700" TARGET="TEXT">CBaseOutputPin::DecideAllocator</A> member function calls this member function.
You must override this member function in your derived class and call
<A HREF="dssd0160.htm#If_0001060148030600" TARGET="TEXT">IMemAllocator::SetProperties</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040900">CBaseOutputPin::Deliver</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Delivers the <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> buffer to the connected pin.

<P><B>virtual</B> <B>HRESULT</B> <B>Deliver</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSample</I>
</DT><DD>Buffer to deliver.
</DD></DL>
<H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000031" TARGET="TEXT">VFW_E_NOT_CONNECTED</A> if no input pin is found;
otherwise, returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function delivers this buffer to the connected input pin by calling its
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040a00">CBaseOutputPin::DeliverBeginFlush</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Calls the <A HREF="dssd0165.htm#If_000106014d030100" TARGET="TEXT">IPin::BeginFlush</A> method on the connected input pin.

<P><B>virtual</B> <B>HRESULT</B> <B>DeliverBeginFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000031" TARGET="TEXT">VFW_E_NOT_CONNECTED</A> if no input pin is found; 
otherwise, returns the value that is returned by the <A HREF="dssd0165.htm#If_000106014d030100" TARGET="TEXT">IPin::BeginFlush</A> method.


<H5>Remarks</H5>
<P>This member function delivers the BeginFlush notification downstream.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040b00">CBaseOutputPin::DeliverEndFlush</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Calls the <A HREF="dssd0165.htm#If_000106014d030600" TARGET="TEXT">IPin::EndFlush</A> method on the connected input pin.

<P><B>virtual</B> <B>HRESULT</B> <B>DeliverEndFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000031" TARGET="TEXT">VFW_E_NOT_CONNECTED</A> if no input pin is found; otherwise,
returns the value that is returned by <A HREF="dssd0165.htm#If_000106014d030600" TARGET="TEXT">IPin::EndFlush</A>.


<H5>Remarks</H5>
<P>This member function delivers the EndFlush notification downstream.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040c00">CBaseOutputPin::DeliverEndOfStream</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Calls the <A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">IPin::EndOfStream</A> method on the connected input pin.

<P><B>virtual</B> <B>HRESULT</B> <B>DeliverEndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000031" TARGET="TEXT">VFW_E_NOT_CONNECTED</A> if no input pin is found; 
otherwise, returns the value returned by the <A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">IPin::EndOfStream</A> call to the connected pin.


<H5>Remarks</H5>
<P>This member function delivers the end-of-stream notification downstream by calling the
<A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">IPin::EndOfStream</A> method on the connected pin.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040d00">CBaseOutputPin::DeliverNewSegment</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Calls the <A HREF="dssd0165.htm#If_000106014d030900" TARGET="TEXT">IPin::NewSegment</A> method on the connected input pin.

<P><B>virtual</B> <B>HRESULT</B> <B>DeliverNewSegment</B><B>(</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStart</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>tStop</I><B>,</B><BR>&nbsp;&nbsp;<B>double</B> <I>dRate</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>tStart</I>
</DT><DD>Start time of the segment.
</DD><DT><I>tStop</I>
</DT><DD>Stop time of the segment.
</DD><DT><I>dRate</I>
</DT><DD>Rate of the segment.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>You will need to override this member function in your derived output pin class if your filter
queues any data in the output pin.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040e00">CBaseOutputPin::EndFlush</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Informs the pin to end a flush operation.

<P><B>HRESULT</B> <B>EndFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns E_UNEXPECTED.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0165.htm#If_000106014d030600" TARGET="TEXT">IPin::EndFlush</A> method. It returns E_UNEXPECTED because this should be called only on input pins. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213040f00">CBaseOutputPin::EndOfStream</A></H3>
<A HREF="dssd0165.htm" TARGET="TEXT">IPin Interface</A>
<P>Informs the input pin that no additional data is expected until a new run command is issued.

<P><B>HRESULT</B> <B>EndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns E_UNEXPECTED.


<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">IPin::EndOfStream</A> method but isn't expected to be called on an output pin. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213041000">CBaseOutputPin::GetDeliveryBuffer</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Retrieves an <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> buffer suitable for passing across the connection.

<P><B>virtual</B> <B>HRESULT</B> <B>GetDeliveryBuffer</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <B>**</B> <I>ppSample</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pStartTime</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <B>*</B> <I>pEndTime</I><B>,</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwFlags</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppSample</I>
 </DT><DD><A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> buffer to be provided.
</DD><DT><I>pStartTime</I>
 </DT><DD>Start time of the media sample (optional and can be NULL).
</DD><DT><I>pEndTime</I>
 </DT><DD>Stop time of the media sample (optional and can be NULL).
</DD><DT><I>dwFlags</I>
 </DT><DD>The following flags are supported.
 <TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">AM_GBF_NOTASYNCPOINT
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Dynamic format changes are not allowed on this buffer because it is not a key frame. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">AM_GBF_PREVFRAMESKIPPED
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Buffer returned will not be filled with data contiguous with any previous data sent.
 </FONT></TD></TR></TABLE>
</DD></DL>
<H5>Return Values</H5>
<P>Returns E_NOINTERFACE if an allocator is not found; otherwise, returns the 
value returned from calling the <A HREF="dssd0160.htm#If_0001060148030300" TARGET="TEXT">IMemAllocator::GetBuffer</A> method.


<H5>Remarks</H5>
<P>The pin object must lock itself before calling this member function; otherwise,
the filter graph could disconnect this pin from the input pin midway through the process.
If the filter has no worker threads, the lock is best applied on the <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> call; 
otherwise, it should be done when the worker thread is ready to deliver the sample.

<P>This call can block; therefore, to avoid deadlocking with an <A HREF="dssd0153.htm#If_0001060141030600" TARGET="TEXT">IMediaFilter::Stop</A> 
command, a two-tier locking scheme (such as that implemented in <A HREF="dssd0247.htm" TARGET="TEXT">CTransformFilter</A>) 
is required. Only the second-level lock is acquired here. The <A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter</A> base class 
implementation of <B>IMediaFilter::Stop</B> first gets the first-level lock and then calls 
<A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A> on the allocator. This has the effect of
making <B>GetDeliveryBuffer</B> return with a failure code. 
The <A HREF="dssd0194.htm#Lib_000106020e081700" TARGET="TEXT">Stop</A> member function 
then gets the second-level lock and completes the command by calling <A HREF="dssd0199.htm#Lib_0001060213041100" TARGET="TEXT">Inactive</A> for this pin.

<P>No lock is needed when calling <B>CBaseOutputPin::GetDeliveryBuffer</B> when passing 
on samples using a worker thread. In this case, the <A HREF="dssd0194.htm#Lib_000106020e081700" TARGET="TEXT">CBaseFilter::Stop</A> base class implementation 
acquires its filter-level lock and just calls <A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A> on the allocator, 
at which point the worker thread is freed up to listen for a command to stop.

<P>You must release the sample yourself after this function. If the connected
input pin needs to hold on to the sample beyond the function, it will add the reference for the 
sample itself through <A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">IUnknown::AddRef</A>. You must release this one and call 
<B>CBaseOutputPin::GetDeliveryBuffer</B> for the next. (You cannot reuse it directly.)
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213041100">CBaseOutputPin::Inactive</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Called by the <A HREF="dssd0194.htm" TARGET="TEXT">CBaseFilter</A> implementation when the state changes from either 
paused or running to stopped.

<P><B>HRESULT</B> <B>Inactive</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000032" TARGET="TEXT">VFW_E_NO_ALLOCATOR</A> if there is no allocator; 
otherwise, returns the value from calling the <A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A> method.


<H5>Remarks</H5>
<P>This member function calls <A HREF="dssd0160.htm#If_0001060148030200" TARGET="TEXT">IMemAllocator::Decommit</A> to decommit memory before 
becoming inactive.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060213041200">CBaseOutputPin::InitAllocator</A></H3>
<A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin Class</A>
<P>Creates a default memory allocator. Override this to provide your
own allocator or to provide no allocator.

<P><B>virtual</B> <B>HRESULT</B> <B>InitAllocator</B><B>(</B><BR>&nbsp;&nbsp;<B>IMemAllocator</B> <I>**ppAlloc</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppAlloc</I>
 </DT><DD>Returned memory allocator.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The allocator should be released after use. This is typically handled in the 
<A HREF="dssd0199.htm#Lib_0001060213040300" TARGET="TEXT">CBaseOutputPin::BreakConnect</A> member function. 
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
