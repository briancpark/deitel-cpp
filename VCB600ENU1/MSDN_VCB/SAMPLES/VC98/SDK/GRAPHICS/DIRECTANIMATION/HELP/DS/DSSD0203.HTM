<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CBaseRenderer Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0202.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0204.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_0001060217000000">CBaseRenderer Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/rbase02.gif" WIDTH="299" HEIGHT="229" ALT="CBaseRenderer class hierarchy" >

<P><B>CBaseRenderer</B> is the base renderer class for writing renderers.
This class handles a single input pin, all state changes, and synchronization.

<A NAME="Lib_0001060217010000"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010001">m_bRepaintStatus</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Flag to determine if an EC_REPAINT message can be signaled.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010002">m_pPosition</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0242.htm" TARGET="TEXT">CRendererPosPassThru</A> object for passing positioning data upstream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010003">m_RenderEvent</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used to signal timer events.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010004">m_ThreadSignal</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Event signaled to release the source filter thread.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010005">m_evComplete</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Event signaled when the pause state is complete.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010006">m_bAbort</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Stop rendering data.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010007">m_bStreaming</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicator for whether the filter graph is currently streaming.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010008">m_dwAdvise</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Timer advise token returned by the clock. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010009">m_pMediaSample</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Current media sample about to be, or being rendered.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106021701000a">m_bEOS</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicator for whether there are more samples in the stream.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106021701000b">m_bEOSDelivered</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Indicator for whether an EC_COMPLETE event has been delivered.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106021701000c">m_pInputPin</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Renderer input pin object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106021701000d">m_InterfaceLock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Critical section for interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106021701000e">m_RendererLock</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Controller for access to current media sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106021701000f">m_pQSink</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Quality control sink.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010010">m_SignalTime</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Amount of time that must elapse before <A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer</A> returns EC_COMPLETE.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_0001060217010011">m_EndOfStreamTimer</A></B>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Time that specifies the end of the stream.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060217020000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060100" TARGET="TEXT">Active</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when the state is switched to paused or running.
 Override to add functionality.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060500" TARGET="TEXT">CBaseRenderer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060700" TARGET="TEXT">CheckReady</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the event is set.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060b00" TARGET="TEXT">DisplayRendererState</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Displays the status of the video renderer. This function is available only in debug mode.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061400" TARGET="TEXT">GetRealState</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the actual state of the renderer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061500" TARGET="TEXT">GetRenderEvent</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the event to render.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061a00" TARGET="TEXT">IsEndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the end of the stream has been reached.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061b00" TARGET="TEXT">IsEndOfStreamDelivered</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the end of the stream has been delivered to the filter graph manager.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061c00" TARGET="TEXT">IsStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the filter is currently rendering data.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061f00" TARGET="TEXT">NotifyEndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sends an EC_COMPLETE event to the filter graph manager.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061e00" TARGET="TEXT">NotReady</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Forces the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> event into a nonsignaled state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062a00" TARGET="TEXT">Ready</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Puts the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> event into a signaled state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062e00" TARGET="TEXT">ResetEndOfStreamTimer</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the end of stream timer to zero.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063000" TARGET="TEXT">ScheduleSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets up an advise link with the clock.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063200" TARGET="TEXT">SendNotifyWindow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Passes the notification window handle to the upstream filter. 
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063300" TARGET="TEXT">SendRepaint</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Conditionally signals an EC_REPAINT message to the filter graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063400" TARGET="TEXT">SetAbortSignal</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the abort signal flag.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063600" TARGET="TEXT">SetRepaintStatus</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Resets the repaint status flag.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063800" TARGET="TEXT">SignalTimerFired</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Resets the current advise time to zero after a timer fires.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063d00" TARGET="TEXT">TimerCallback</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Checks if it is time to signal the end of the current data stream.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060217030000"></A><P><B>Overridable Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060200" TARGET="TEXT">BeginFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Signals the start of flushing on the input pin.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060300" TARGET="TEXT">BreakConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Breaks the input pin connection and resets the end-of-stream flags.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060400" TARGET="TEXT">CancelNotification</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Cancels any currently scheduled notification with the clock.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060600" TARGET="TEXT">CheckMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the renderer will accept a given media type.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060800" TARGET="TEXT">ClearPendingSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called to release the pending sample after it has been rendered.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060900" TARGET="TEXT">CompleteConnect</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called as part of the connection protocol. Override to add functionality.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060a00" TARGET="TEXT">CompleteStateChange</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Ensures that a sample is waiting before allowing a pause.



</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060c00" TARGET="TEXT">DoRenderSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when a sample is ready to render.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061000" TARGET="TEXT">GetCurrentSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the current sample waiting at the video renderer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061200" TARGET="TEXT">GetPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns a <A HREF="dssd0200.htm" TARGET="TEXT">CBasePin</A> object to the renderer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061300" TARGET="TEXT">GetPinCount</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns the number of input pins supported.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060d00" TARGET="TEXT">EndFlush</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when the input pin receives an end-flush notification.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060e00" TARGET="TEXT">EndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when the input pin receives an end-of-stream notification.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061100" TARGET="TEXT">GetMediaPositionInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves <A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> and <A HREF="dssd0158.htm" TARGET="TEXT">IMediaSeeking</A> interfaces for the video renderer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061600" TARGET="TEXT">GetSampleTimes</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves sample time information for this sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061800" TARGET="TEXT">HaveCurrentSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if a sample is waiting at the renderer.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061900" TARGET="TEXT">Inactive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called when going into a stopped state. Override to add functionality.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061d00" TARGET="TEXT">NonDelegatingQueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns an interface and increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062000" TARGET="TEXT">OnReceiveFirstSample</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Provides derived classes with an opportunity to render static data.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062100" TARGET="TEXT">OnRenderEnd</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the derived class that a sample has just finished rendering.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062200" TARGET="TEXT">OnRenderStart</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the derived class that a sample is about to be rendered.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062300" TARGET="TEXT">OnStartStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the derived class that rendering has started.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062400" TARGET="TEXT">OnStopStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the derived class that rendering has stopped.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062500" TARGET="TEXT">OnWaitEnd</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the derived class that a wait for a rendering time has just ended.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062600" TARGET="TEXT">OnWaitStart</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Notifies the derived class that a wait for a rendering time is about to start.

</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062700" TARGET="TEXT">Pause</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Tells the renderer to transition to the new (paused) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062800" TARGET="TEXT">PrepareReceive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called to schedule a clock time when the renderer receives a sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062900" TARGET="TEXT">PrepareRender</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Allows derived classes to set themselves just before a sample is rendered.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062b00" TARGET="TEXT">Receive</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called by the source filter when a sample is available to render.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062c00" TARGET="TEXT">Render</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Asks the derived class to render the sample.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062d00" TARGET="TEXT">ResetEndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Resets the end-of-stream flag.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217062f00" TARGET="TEXT">Run</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Transitions the renderer to State_Running if it is not already in this
state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063100" TARGET="TEXT">SendEndOfStream</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the end-of-stream flag.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063500" TARGET="TEXT">SetMediaType</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Informs the derived class of the selected media type.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063700" TARGET="TEXT">ShouldDrawSampleNow</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines if the sample should be drawn between the start and stop times given.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063900" TARGET="TEXT">SourceThreadCanWait</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets or resets the thread event.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063a00" TARGET="TEXT">StartStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Called to schedule any pending sample with the clock, and to display any timing information.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063b00" TARGET="TEXT">Stop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Tells the renderer to transition to the new (stopped) state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063c00" TARGET="TEXT">StopStreaming</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets an internal flag to indicate not to schedule arrival of any more samples.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063f00" TARGET="TEXT">WaitForRenderTime</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Waits for either the time to arrive or for rendering to be stopped.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060217040000"></A><P><B>Implemented IMediaFilter Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217061700" TARGET="TEXT">GetState</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines the state of the renderer.
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060217050000"></A><P><B>Implemented IBaseFilter Methods</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217060f00" TARGET="TEXT">FindPin</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a pointer to the pin with the specified identifier. (There is only one pin.)
</FONT></TD></TR></TABLE>
<A NAME="Lib_0001060217060000"></A><P><B>Helper Function</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0203.htm#Lib_0001060217063e00" TARGET="TEXT">WaitForReceiveToComplete</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Waits for the <A HREF="dssd0203.htm#Lib_0001060217062b00" TARGET="TEXT">CBaseRenderer::Receive</A> method to complete.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060100">CBaseRenderer::Active</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called when the state is switched to paused or running.

<P><B>virtual</B> <B>HRESULT</B> <B>Active</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value. Returns NOERROR by default.


<H5>Remarks</H5>
<P>This member function does nothing by default. Derived classes can
optionally override this member function to add functionality.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060200">CBaseRenderer::BeginFlush</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Informs the renderer that flushing has started.

<P><B>virtual</B> <B>HRESULT</B> <B>BeginFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by <A HREF="dssd0241.htm#Lib_000106023d040300" TARGET="TEXT">CRendererInputPin::BeginFlush</A>
when informed of a flush from the upstream filter. It releases the source
thread and signals the start of flushing on the input pin. Any samples received 
by the renderer when it is in a flushing state will be rejected.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060300">CBaseRenderer::BreakConnect</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called when a connection is broken.

<P><B>virtual</B> <B>HRESULT</B> <B>BreakConnect</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function resets the end-of-stream flag and
checks for a valid connection, or that the filter is in a stopped state.
Override to customize.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060400">CBaseRenderer::CancelNotification</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Cancels any currently scheduled notification.

<P><B>virtual</B> <B>HRESULT</B> <B>CancelNotification</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is called when the renderer is told to stop streaming. If there is no
timer link outstanding, calling this member function does nothing;
otherwise, this function stops the advise link and resets the render event. The normal process
when running is to receive a sample, wait until it is time to render it and then render it. The
clock is given an event to signal when the desired time arrives.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060500">CBaseRenderer::CBaseRenderer</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Constructs a <A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer</A> object.

<P><B>CBaseRenderer</B><B>(</B><BR>&nbsp;&nbsp;<B>REFCLSID</B> <I>RenderClass</I><B>,</B><BR>&nbsp;&nbsp;<B>TCHAR</B> <I>*pName</I><B>,</B><BR>&nbsp;&nbsp;<B>LPUNKNOWN</B> <I>pUnk</I><B>,</B><BR>&nbsp;&nbsp;<B>HRESULT</B> <I>*phr</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>RenderClass</I>
</DT><DD>Class identifier for this renderer.
</DD><DT><I>pName</I>
</DT><DD>Name used for debugging purposes.
</DD><DT><I>pUnk</I>
</DT><DD>Owner object.
</DD><DT><I>phr</I>
</DT><DD>Pointer to the <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> return code.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060600">CBaseRenderer::CheckMediaType</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if the renderer will accept a given media type.

<P><B>virtual</B> <B>HRESULT</B> <B>CheckMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <B>*</B> <I>pmt</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>Pointer to a media type object that contains the proposed media type.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function must be overridden and implemented, typically to
return the media type of the display. It is called from the
<A HREF="dssd0241.htm#Lib_000106023d040500" TARGET="TEXT">CRendererInputPin::CheckMediaType</A> member function during the connection process.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060700">CBaseRenderer::CheckReady</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if the renderer is ready to process the next sample.

<P><B>BOOL</B> <B>CheckReady</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> event is currently set, but does not block.


<H5>Remarks</H5>
<P>This member function calls the <A HREF="dssd0184.htm#Lib_0001060204020200" TARGET="TEXT">CAMEvent::Check</A> member function. This
is mainly used in transitioning to paused states. When a renderer is paused, it
should not complete the state change until it has received some data. So although
the call to <A HREF="dssd0153.htm#If_0001060141030300" TARGET="TEXT">IMediaFilter::Pause</A> completes immediately, if the application
calls <A HREF="dssd0153.htm#If_0001060141030100" TARGET="TEXT">IMediaFilter::GetState</A> it will return VFW_S_STATE_INTERMEDIATE. When a
sample arrives at the renderer, the event that is initially reset during the
pause call will be signaled. At this point, an application calling <B>IMediaFilter::GetState</B>
will return NOERROR. This process allows an application to pause a filter graph and
then wait until data is actually queued and ready to be rendered.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060800">CBaseRenderer::ClearPendingSample</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called to clear the pending sample when in a stopped or inactivated state.

<P><B>virtual</B> <B>HRESULT</B> <B>ClearPendingSample</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function releases the <A HREF="dssd0156.htm" TARGET="TEXT">IMediaSample</A> interface.
This allows the allocator to reuse it and allocate it to the upstream filter again.
If the state is being changed to inactive, <A HREF="dssd0160.htm#If_0001060148030300" TARGET="TEXT">IMemAllocator::GetBuffer</A> will
return an error. This function also resets the current
media sample to NULL to indicate that no data is now available.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060900">CBaseRenderer::CompleteConnect</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called as part of the connection protocol.

<P><B>virtual</B> <B>HRESULT</B> <B>CompleteConnect</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pReceivePin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pReceivePin</I>
</DT><DD>Connecting pin.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value (NOERROR by default).


<H5>Remarks</H5>
<P>This member function calls the <A HREF="dssd0203.htm#Lib_0001060217063600" TARGET="TEXT">SetRepaintStatus</A> member function
to set the <A HREF="dssd0203.htm#Lib_0001060217010001" TARGET="TEXT">m_bRepaintStatus</A> data member to TRUE so that EC_REPAINT
notifications can be sent in the future. (To prevent
unnecessary EC_REPAINT notifications from being sent, <B>m_bRepaintStatus</B> is
set to FALSE when an end-of-stream notification arrives.)
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060a00">CBaseRenderer::CompleteStateChange</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Ensures that a sample is waiting before allowing a pause.

<P><B>virtual</B> <B>HRESULT</B> <B>CompleteStateChange</B><B>(</B><BR>&nbsp;&nbsp;<B>FILTER_STATE</B> <I>OldState</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>OldState</I>
</DT><DD>State prior to the transition.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_OK if the filter can be paused; otherwise, returns S_FALSE.


<H5>Remarks</H5>
<P>This member function is called from the <A HREF="dssd0203.htm#Lib_0001060217062700" TARGET="TEXT">CBaseRenderer::Pause</A> member
function. If the filter is being paused and there is no sample waiting, the transition is
not completed and the function returns S_FALSE until the first sample arrives.
However, if the <A HREF="dssd0203.htm#Lib_0001060217010006" TARGET="TEXT">m_bAbort</A> flag has been set, all samples are rejected so there
is no point waiting for one. If a sample is available, this member function returns
NOERROR.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060b00">CBaseRenderer::DisplayRendererState</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Displays the status of the video renderer. This function is available only in debug mode.

<P><B>void</B> <B>CBaseRenderer::DisplayRendererState</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Use this function to monitor the activity of the video renderer. The following is a sample output of this function.
<PRE><FONT FACE="Courier" SIZE="2">
Timed out in WaitForRenderTime
Signal sanity check 0
Filter state 1
Abort flag 0
Streaming flag 0
Clock advise link 0
Current media sample 0
EOS signalled 0
EOS delivered 0
Repaint status 1
End of stream timer 0
Deliver time 0x000000000
Flushing sanity check 0
Last run time 0x000000000
Clock time 0x22C2CD23430
Time difference 238875379ms
</FONT></PRE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060c00">CBaseRenderer::DoRenderSample</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called when a sample is ready to render.

<P><B>virtual</B> <B>HRESULT</B> <B>DoRenderSample</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B> <B>PURE;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function must be overridden in the derived class.
It is called by <A HREF="dssd0203.htm#Lib_0001060217062c00" TARGET="TEXT">CBaseRenderer::Render</A>.

<P>The derived class should render the object at this time. For example,
the sample video renderer (SAMPVID) calls its drawing object
(a <A HREF="dssd0214.htm" TARGET="TEXT">CDrawImage</A> object):

<PRE><FONT FACE="Courier" SIZE="2">
// Have the drawing object render the current image

HRESULT CVideoRenderer::DoRenderSample(IMediaSample *pMediaSample)
{
    return m_DrawImage.DrawImage(pMediaSample);
}
</FONT></PRE>
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060d00">CBaseRenderer::EndFlush</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called when the input pin receives an end-flush notification.

<P><B>virtual</B> <B>HRESULT</B> <B>EndFlush</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called from the <A HREF="dssd0241.htm#Lib_000106023d040800" TARGET="TEXT">CRendererInputPin::EndFlush</A>
member function. It calls <A HREF="dssd0203.htm#Lib_0001060217063900" TARGET="TEXT">CBaseRenderer::SourceThreadCanWait</A>
with a TRUE value to allow the upstream filter's thread to wait in
<A HREF="dssd0203.htm#Lib_0001060217062b00" TARGET="TEXT">CBaseRenderer::Receive</A> again.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060e00">CBaseRenderer::EndOfStream</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called when the input pin receives an end-of-stream notification.

<P><B>HRESULT</B> <B>EndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>If all received samples have been rendered, this member function notifies EC_COMPLETE.
If samples have been received and not yet rendered, this function sets <A HREF="dssd0203.htm#Lib_000106021701000a" TARGET="TEXT">m_bEOS</A> and checks
for it on completing samples. If the filter is waiting to be paused, this function completes the
transition to paused state by setting the state event.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217060f00">CBaseRenderer::FindPin</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves a pointer to the pin with the specified identifier.

<P><B>HRESULT</B> <B>FindPin</B><B>(</B><BR>&nbsp;&nbsp;<B>LPCWSTR</B> <I>Id</I><B>,</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>**ppPin</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Id</I>
</DT><DD>Identifier of the pin.
</DD><DT><I>ppPin</I>
</DT><DD>Pointer to the <A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface for this pin after the renderer has been restored.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful; otherwise, returns VFW_E_NOT_FOUND.

<H5>Remarks</H5>
<P>This member function implements the <A HREF="dssd0116.htm#If_000106011c030200" TARGET="TEXT">IBaseFilter::FindPin</A> method.
It assumes that the default pin name is "In" and checks for this.
If the pin is found, its reference count is incremented.
The <I>ppPin</I> parameter is set to NULL if the identifier cannot be matched.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061000">CBaseRenderer::GetCurrentSample</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves the current sample waiting at the video renderer, or NULL if there is not one.

<P><B>virtual</B> <B>IMediaSample</B> <B>*GetCurrentSample</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns a pointer to the sample.


<H5>Remarks</H5>
<P>The reference count for the sample is incremented before returning. This
is so that if the sample comes due for rendering, it is not added back to the
allocator free list until the caller of this member function releases it.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061100">CBaseRenderer::GetMediaPositionInterface</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves <A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> and <A HREF="dssd0158.htm" TARGET="TEXT">IMediaSeeking</A> interfaces for the video renderer.

<P><B>virtual</B> <B>HRESULT</B> <B>GetMediaPositionInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <I>**ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>A <A HREF="dssd0242.htm" TARGET="TEXT">CRendererPosPassThru</A> helper object is created dynamically when this is called
to support passing the <A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> or <A HREF="dssd0158.htm" TARGET="TEXT">IMediaSeeking</A> interface
calls from the filter graph manager to the upstream filter.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061200">CBaseRenderer::GetPin</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Returns a <A HREF="dssd0200.htm" TARGET="TEXT">CBasePin</A> object on the renderer.

<P><B>virtual</B> <B>CBasePin</B> <B>*GetPin</B><B>(</B><BR>&nbsp;&nbsp;<B>int</B> <I>n</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>n</I>
</DT><DD>Number of the specified pin, which is always zero in the case of the renderer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the pin specified by the <I>n</I> parameter.


<H5>Remarks</H5>
<P>This member function overrides <A HREF="dssd0194.htm#Lib_000106020e080600" TARGET="TEXT">CBaseFilter::GetPin</A>.
Only one pin is supported on the renderer; it is numbered zero.

A call to this member function with <I>n</I> equal to zero will result in an
input pin of type <A HREF="dssd0241.htm" TARGET="TEXT">CRendererInputPin</A> being returned. It will be
created if it does not yet exist.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061300">CBaseRenderer::GetPinCount</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves the number of input pins supported.

<P><B>virtual</B> <B>int</B> <B>GetPinCount</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>The default implementation returns one, since only one pin is supported. Override to
support more than one pin. Because the base renderer class is specifically designed for
single-pin operation, considerably more of the base class functionality would have to be
changed to make a multipin renderer.
Future versions of the SDK might provide this functionality.


<H5>Remarks</H5>
<P>This member function overrides <A HREF="dssd0194.htm#Lib_000106020e080700" TARGET="TEXT">CBaseFilter::GetPinCount</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061400">CBaseRenderer::GetRealState</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves the actual state of the renderer.

<P><B>FILTER_STATE</B> <B>GetRealState</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns <A HREF="dssd0194.htm#Lib_000106020e010004" TARGET="TEXT">m_State</A>, the state flag for the renderer.


<H5>Remarks</H5>
<P>This member function provides an internal way of getting the real state.
Calling through the <A HREF="dssd0116.htm" TARGET="TEXT">IBaseFilter</A> interface to get the state would require the
main filter critical section to be taken; this internal method does not do this.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061500">CBaseRenderer::GetRenderEvent</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves the event to render.

<P><B>CAMEvent</B> <B>*GetRenderEvent</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns the value of <A HREF="dssd0203.htm#Lib_0001060217010003" TARGET="TEXT">m_RenderEvent</A>.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061600">CBaseRenderer::GetSampleTimes</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves sample time information for this sample.

<P><B>virtual</B> <B>HRESULT</B> <B>GetSampleTimes</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>*pStartTime</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>*pEndTime</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD><DT><I>pStartTime</I>
</DT><DD>Start time.
</DD><DT><I>pEndTime</I>
</DT><DD>End time.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_FALSE if the sample should be scheduled according to the times specified
in the sample; returns S_OK to indicate that the sample should be rendered
immediately.

<H5>Remarks</H5>
<P>Note that the sample times are passed in by reference, not value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061700">CBaseRenderer::GetState</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines the state of the renderer.

<P><B>HRESULT</B> <B>GetState</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>dwMilliSecsTimeout</I><B>,</B><BR>&nbsp;&nbsp;<B>FILTER_STATE</B> <B>*</B> <I>State</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>dwMilliSecsTimeout</I>
</DT><DD>Duration of the time-out, in milliseconds.
</DD><DT><I>State</I>
</DT><DD>Returned state of the renderer.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value. Returns <A HREF="dssd0293.htm#errcodes_0001060a01000060" TARGET="TEXT">VFW_S_STATE_INTERMEDIATE</A> if
paused and waiting for a sample; otherwise, returns NOERROR.

<H5>Remarks</H5>
<P>This member function overrides the <A HREF="dssd0194.htm#Lib_000106020e080a00" TARGET="TEXT">CBaseFilter::GetState</A>
member function. It returns the value of <A HREF="dssd0194.htm#Lib_000106020e010004" TARGET="TEXT">m_State</A>.
Because the renderer does not complete the full transition to the paused
state until it has a sample to render, if the state is requested while it
is waiting for a sample, it will return <A HREF="dssd0293.htm#errcodes_0001060a01000060" TARGET="TEXT">VFW_S_STATE_INTERMEDIATE</A> along with
the state.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061800">CBaseRenderer::HaveCurrentSample</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if a sample is waiting at the renderer.

<P><B>virtual</B> <B>BOOL</B> <B>HaveCurrentSample</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if a sample is ready to be rendered, or FALSE if no data is available.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061900">CBaseRenderer::Inactive</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called when going into a stopped state.

<P><B>virtual</B> <B>HRESULT</B> <B>Inactive</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR by default; overriding member function should return
a valid <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is a placeholder that derived classes can
optionally override to add functionality when the filter is stopped.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061a00">CBaseRenderer::IsEndOfStream</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if the end of the stream has been reached.

<P><B>BOOL</B> <B>IsEndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the stream's end has been reached, or FALSE if it hasn't.



<H5>Remarks</H5>
<P>The default implementation returns <A HREF="dssd0203.htm#Lib_000106021701000a" TARGET="TEXT">m_bEOS</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061b00">CBaseRenderer::IsEndOfStreamDelivered</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if the end of the stream has been delivered to the filter graph manager.

<P><B>BOOL</B> <B>IsEndOfStreamDelivered</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the stream's end has been delivered, or FALSE if it hasn't.



<H5>Remarks</H5>
<P>The default implementation returns <A HREF="dssd0203.htm#Lib_000106021701000b" TARGET="TEXT">m_bEOSDelivered</A>.
This is used by the base renderer class so that only one <A HREF="dssd0291.htm#events_0001060801000400" TARGET="TEXT">EC_COMPLETE</A> message is sent to the filter graph
manager each time it is run, regardless of the number of times <A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">EndOfStream</A> is called.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061c00">CBaseRenderer::IsStreaming</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if the filter is streaming data.

<P><B>BOOL</B> <B>IsStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns TRUE if the renderer is rendering, or FALSE if it isn't.



<H5>Remarks</H5>
<P>The default implementation returns <A HREF="dssd0203.htm#Lib_0001060217010007" TARGET="TEXT">m_bStreaming</A>. In the base renderer class, "streaming" and "rendering" are used in the same context as "running".
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061d00">CBaseRenderer::NonDelegatingQueryInterface</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Retrieves an interface and increments the reference count.

<P><B>HRESULT</B> <B>NonDelegatingQueryInterface</B><B>(</B><BR>&nbsp;&nbsp;<B>REFIID</B> <I>riid</I><B>,</B><BR>&nbsp;&nbsp;<B>void</B> <B>**</B> <I>ppv</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>riid</I>
 </DT><DD>Reference identifier.
</DD><DT><I>ppv</I>
 </DT><DD>Pointer to the interface.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a pointer to the interface.


<H5>Remarks</H5>
<P>This member function overrides <A HREF="dssd0194.htm#Lib_000106020e080f00" TARGET="TEXT">CBaseFilter::NonDelegatingQueryInterface</A>. It exposes the <A HREF="dssd0154.htm" TARGET="TEXT">IMediaPosition</A> and <A HREF="dssd0158.htm" TARGET="TEXT">IMediaSeeking</A> interfaces and then calls <B>CBaseFilter::NonDelegatingQueryInterface</B> for interfaces implemented in the base classes.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061e00">CBaseRenderer::NotReady</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Forces the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> event into a nonsignaled state.

<P><B>void</B> <B>NotReady</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function calls the <A HREF="dssd0184.htm#Lib_0001060204020300" TARGET="TEXT">CAMEvent::Reset</A> member function of the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> event object.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217061f00">CBaseRenderer::NotifyEndOfStream</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Sends an <A HREF="dssd0291.htm#events_0001060801000400" TARGET="TEXT">EC_COMPLETE</A> event to the filter graph manager.

<P><B>void</B> <B>NotifyEndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062000">CBaseRenderer::OnReceiveFirstSample</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Provides derived classes with an opportunity to render static data.

<P><B>virtual</B> <B>void</B> <B>OnReceiveFirstSample</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is unimplemented. It is primarily used by video renderers. When they receive their first sample while paused, they typically draw the frame as a poster image. This virtual method is called by the base classes when the first sample arrives.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062100">CBaseRenderer::OnRenderEnd</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Notifies the derived class that rendering has finished.

<P><B>virtual</B> <B>void</B> <B>OnRenderEnd</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is available for quality management and performance measuring. It is called immediately after the sample is rendered.

<P>Quality management implementations typically need to know how long it takes the renderer to render the data.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062200">CBaseRenderer::OnRenderStart</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Notifies the derived class that rendering is about to start.

<P><B>virtual</B> <B>void</B> <B>OnRenderStart</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is available for quality management and
performance measuring. It is called immediately before the sample is rendered.

<P>Quality management implementations
typically need to know how long it takes the renderer to render the data.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062300">CBaseRenderer::OnStartStreaming</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Notifies the derived class that streaming has started.

<P><B>virtual</B> <B>HRESULT</B> <B>OnStartStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR in the default implementation.


<H5>Remarks</H5>
<P>This member function is called from <A HREF="dssd0203.htm#Lib_0001060217063a00" TARGET="TEXT">CBaseRenderer::StartStreaming</A>.
Override this in your derived class to provide special handling when streaming
starts.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062400">CBaseRenderer::OnStopStreaming</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Notifies the derived class that streaming has stopped.

<P><B>virtual</B> <B>HRESULT</B> <B>OnStopStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns NOERROR in the default implementation.


<H5>Remarks</H5>
<P>This member function is called from <A HREF="dssd0203.htm#Lib_0001060217063c00" TARGET="TEXT">CBaseRenderer::StopStreaming</A>.
Override this in your derived class to provide special handling when streaming
stops.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062500">CBaseRenderer::OnWaitEnd</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Notifies the derived class that a wait for a rendering time has just ended.

<P><B>virtual</B> <B>void</B> <B>OnWaitEnd</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is available for quality control and is called from
<A HREF="dssd0203.htm#Lib_0001060217063f00" TARGET="TEXT">CBaseRenderer::WaitForRenderTime</A> just after waiting for the
presentation time for a sample. Override this
member function to obtain performance measurements in a derived class.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062600">CBaseRenderer::OnWaitStart</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Notifies the derived class that a wait for a rendering time is about to start.

<P><B>virtual</B> <B>void</B> <B>OnWaitStart</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is available for quality control and is called from
<A HREF="dssd0203.htm#Lib_0001060217063f00" TARGET="TEXT">CBaseRenderer::WaitForRenderTime</A> just before waiting for the
presentation time for a sample. Override this
member function to obtain performance measurements in a derived class.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062700">CBaseRenderer::Pause</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Changes the renderer to State_Paused if it isn't already.

<P><B>HRESULT</B> <B>Pause</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The following steps comprise a pause operation.
<OL><LI>Commit the allocator used for the connection.
<LI>Allow the thread for the upstream filter to wait in <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A>.
<LI>Cancel any outstanding clock advise links.
<LI>Check to see if the renderer is connected and allow a state change.
<LI>If a sample is available, complete the state change to State_Paused.
</OL>
<P>If the member function succeeds, DirectShow sets the filter's <A HREF="dssd0194.htm#Lib_000106020e010004" TARGET="TEXT">m_State</A> member variable to State_Paused. If the renderer is in the State_Stopped state, DirectShow calls the <A HREF="dssd0200.htm#Lib_0001060214060100" TARGET="TEXT">CBasePin::Active</A> member function for each of the renderer's connected pins.

<P>This member function overrides <A HREF="dssd0194.htm#Lib_000106020e081100" TARGET="TEXT">CBaseFilter::Pause</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062800">CBaseRenderer::PrepareReceive</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Ensures that a sample can be rendered.

<P><B>virtual</B> <B>HRESULT</B> <B>PrepareReceive</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR if successful, VFW_E_SAMPLE_REJECTED if the delivered sample is later than the sample's timestamp, or E_UNEXPECTED if a renderable sample is already available.


<H5>Remarks</H5>
<P>This member function is called when the upstream filter delivers a sample. If the upstream filter is running (streaming), the sample is scheduled with the reference clock. If the upstream filter is not streaming, a sample in paused mode has been received, so any state transition can be completed. On leaving this function, everything will be unlocked so an application thread can get in and change the state to stopped. In this case, it will also signal the thread event so that the wait call is stopped.

<P>This function is typically called from the <A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">IMemInputPin::Receive</A> method on the renderer's input pin. Although <B>PrepareReceive</B> returns VFW_E_SAMPLE_REJECTED if the sample was delivered too late to be useful, the 
<B>IMemInputPin::Receive</B> method should not pass the VFW_E_SAMPLE_REJECTED error on to the upstream filter in this case. Instead, <B>IMemInputPin::Receive</B> should return NOERROR, because no error occurred. 

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062900">CBaseRenderer::PrepareRender</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Provides an opportunity for the derived class to prepare itself for rendering a sample.

<P><B>virtual</B> <B>void</B> <B>PrepareRender</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function is called from <A HREF="dssd0203.htm#Lib_0001060217062b00" TARGET="TEXT">CBaseRenderer::Receive</A> before rendering each frame. A derived class can take this opportunity to prepare itself for rendering. For example, a video renderer might realize its palette. This is not implemented in the base class.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062a00">CBaseRenderer::Ready</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Puts the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> event into a signaled state.

<P><B>void</B> <B>Ready</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This member function calls the <A HREF="dssd0203.htm#Lib_0001060217010005" TARGET="TEXT">m_evComplete</A> <A HREF="dssd0184.htm" TARGET="TEXT">CAMEvent</A> object's
<A HREF="dssd0184.htm#Lib_0001060204020400" TARGET="TEXT">Set</A> member function.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062b00">CBaseRenderer::Receive</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called by the upstream filter when a sample is available to render.

<P><B>virtual</B> <B>HRESULT</B> <B>Receive</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function sets an advise link with the clock, waits for the time to arrive, and then renders the data by calling the pure virtual <A HREF="dssd0203.htm#Lib_0001060217060c00" TARGET="TEXT">DoRenderSample</A> member function that the derived class will have overridden. After rendering the sample, the end of stream can also be signaled if it was the last one sent before <A HREF="dssd0203.htm#Lib_0001060217060e00" TARGET="TEXT">EndOfStream</A> was called.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062c00">CBaseRenderer::Render</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Asks the derived class to render the sample.

<P><B>virtual</B> <B>HRESULT</B> <B>Render</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called when the derived class should render the sample.
The action taken is dependent on the nature of the renderer; a video
renderer will typically draw the image in a window. This class calls the pure
virtual <A HREF="dssd0203.htm#Lib_0001060217060c00" TARGET="TEXT">DoRenderSample</A> to be implemented by the derived class.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062d00">CBaseRenderer::ResetEndOfStream</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Resets the end-of-stream flag.

<P><B>virtual</B> <B>HRESULT</B> <B>ResetEndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is typically called when changing to stopped states.
A renderer must keep track of when it gets told that no more data is going
to arrive (this is done when the sourcing filter calls <A HREF="dssd0165.htm#If_000106014d030700" TARGET="TEXT">IPin::EndOfStream</A>).
At this point the renderer finishes rendering any data it has and then
sends an EC_COMPLETE event to the filter graph manager.

<P>However, when the filter is stopped, the whole state is cleared. When the
filter is subsequently run, the source filter will signal the
end of stream again if it has no data to send. In this case, the renderer
should signal another EC_COMPLETE event to the filter graph manager. This member function
resets the state so that when next requested it will send an EC_COMPLETE event.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062e00">CBaseRenderer::ResetEndOfStreamTimer</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>If the end-of-stream timer is nonzero, this function sets it to zero.

<P><B>void</B> <B>ResetEndOfStreamTimer</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217062f00">CBaseRenderer::Run</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Transitions the renderer to State_Running if it is not in this state already.

<P><B>HRESULT</B> <B>Run</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>If the renderer is in the State_Stopped state,
the <A HREF="dssd0203.htm#Lib_0001060217062700" TARGET="TEXT">CBaseRenderer::Pause</A> member function is called first to transition the renderer to the
State_Paused state, which has the effect of activating any of the filter's connected pins. If this
member function succeeds, the renderer's <A HREF="dssd0194.htm#Lib_000106020e010004" TARGET="TEXT">m_State</A> member
variable is set to State_Running.


<P>This member function overrides <A HREF="dssd0194.htm#Lib_000106020e081500" TARGET="TEXT">CBaseFilter::Run</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063000">CBaseRenderer::ScheduleSample</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Schedules the sample for rendering.

<P><B>virtual</B> <B>BOOL</B> <B>ScheduleSample</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
</DT><DD>Media sample.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>One of the main purposes of the renderer base class is to manage the timing and synchronization of the samples it is sent; that is,
the timely presentation of data. It also must look after quality management, which might involve dropping samples or rendering them earlier than indicated in the time stamps on the sample. This method and its overrides in derived classes manage the setting up of advise links with the clock, so that the samples can be rendered at the appropriate time.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063100">CBaseRenderer::SendEndOfStream</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Signals an EC_COMPLETE event to the filter graph manager.

<P><B>virtual</B> <B>HRESULT</B> <B>SendEndOfStream</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>When the renderer receives an end-of-stream notification, it will finish rendering
any data it currently has and then send an EC_COMPLETE event to the filter graph
manager.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063200">CBaseRenderer::SendNotifyWindow</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Passes the notification window handle to the upstream filter. 

<P><B>void</B> <B>SendNotifyWindow</B><B>(</B><BR>&nbsp;&nbsp;<B>IPin</B> <I>*pPin</I><B>,</B><BR>&nbsp;&nbsp;<B>HWND</B> <I>hwnd</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pPin</I>
 </DT><DD><A HREF="dssd0165.htm" TARGET="TEXT">IPin</A> interface of the upstream pin.
</DD><DT><I>hwnd</I>
 </DT><DD>Handle of the notification window.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>If the output pin of the upstream filter supports the <A HREF="dssd0152.htm" TARGET="TEXT">IMediaEventSink</A> interface, 
this member function sends it the EC_NOTIFY_WINDOW event code with the window handle
in <I>hwnd</I>. 
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063300">CBaseRenderer::SendRepaint</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Signals an <A HREF="dssd0291.htm#events_0001060801000f00" TARGET="TEXT">EC_REPAINT</A> message to the filter graph.

<P><B>void</B> <B>SendRepaint</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This should be used with some care. <A HREF="dssd0291.htm#events_0001060801000f00" TARGET="TEXT">EC_REPAINT</A> events are processed by the filter
graph manager by setting the current position to the same position that the graph is
currently in. This has the effect of sending the same data through the graph again,
which is an expensive operation. Video renderers are the main users of this event, because
they sometimes need the same image sent again to refresh the display.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063400">CBaseRenderer::SetAbortSignal</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Sets the <A HREF="dssd0203.htm#Lib_0001060217010006" TARGET="TEXT">m_bAbort</A> abort signal flag.

<P><B>void</B> <B>SetAbortSignal</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bAbort</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bAbort</I>
</DT><DD>Abort value to be set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063500">CBaseRenderer::SetMediaType</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Informs the derived class of the selected media type.

<P><B>virtual</B> <B>HRESULT</B> <B>SetMediaType</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pmt</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmt</I>
</DT><DD>Media type to be set.
</DD></DL>
<H5>Return Values</H5>
<P>Returns NOERROR by default; the overriding member function should return
a valid <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This member function is called by the <A HREF="dssd0241.htm#Lib_000106023d040d00" TARGET="TEXT">CRendererInputPin::SetMediaType</A>
member function and has no implementation in this class. Derived classes can
optionally override to add functionality.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063600">CBaseRenderer::SetRepaintStatus</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Resets the <A HREF="dssd0203.htm#Lib_0001060217010001" TARGET="TEXT">m_bRepaintStatus</A> flag when <A HREF="dssd0291.htm#events_0001060801000f00" TARGET="TEXT">EC_REPAINT</A> has been signaled to the filter graph.

<P><B>void</B> <B>SetRepaintStatus</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bRepaint</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bRepaint</I>
 </DT><DD>Boolean value assigned to the <A HREF="dssd0203.htm#Lib_0001060217010001" TARGET="TEXT">m_bRepaintStatus</A> flag.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>The <A HREF="dssd0203.htm#Lib_0001060217010001" TARGET="TEXT">m_bRepaintStatus</A> flag ensures that the filter graph
is not flooded with redundant calls. Once one <A HREF="dssd0291.htm#events_0001060801000f00" TARGET="TEXT">EC_REPAINT</A> message has been
sent, no more will be sent until the renderer receives some data.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063700">CBaseRenderer::ShouldDrawSampleNow</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Determines if the sample should be drawn between the start and stop times given.

<P><B>virtual</B> <B>HRESULT</B> <B>ShouldDrawSampleNow</B><B>(</B><BR>&nbsp;&nbsp;<B>IMediaSample</B> <I>*pMediaSample</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>*pStartTime</I><B>,</B><BR>&nbsp;&nbsp;<B>REFERENCE_TIME</B> <I>*pEndTime</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pMediaSample</I>
 </DT><DD>Media sample.
</DD><DT><I>pStartTime</I>
 </DT><DD>Start time in question.
</DD><DT><I>pEndTime</I>
 </DT><DD>End time in question.
</DD></DL>
<H5>Return Values</H5>
<P>Returns S_FALSE by default. The overriding member function can return S_OK
to indicate that the sample should be drawn immediately instead of waiting for its
scheduled time.

<H5>Remarks</H5>
<P>This member function is used by the derived video renderer class for quality management.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063800">CBaseRenderer::SignalTimerFired</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Resets the current advise time to zero after a timer fires.

<P><B>virtual</B> <B>void</B> <B>SignalTimerFired</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063900">CBaseRenderer::SourceThreadCanWait</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Sets or resets the thread event.

<P><B>virtual</B> <B>HRESULT</B> <B>SourceThreadCanWait</B><B>(</B><BR>&nbsp;&nbsp;<B>BOOL</B> <I>bCanWait</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>bCanWait</I>
 </DT><DD>TRUE or FALSE, depending on intent.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>In some states, such as paused or running, it is expected that the
upstream filter's thread will be blocked in the call to the renderer's input pin
<A HREF="dssd0161.htm#If_0001060149030400" TARGET="TEXT">Receive</A> method. In other cases, such as when the
renderer is stopped, the upstream filter should not be required to wait.
This member function represents a manual
reset event that sets this TRUE to wait, or FALSE to keep the thread from waiting.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063a00">CBaseRenderer::StartStreaming</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Called to schedule any pending sample with the clock, and to display
timing information.

<P><B>virtual</B> <B>HRESULT</B> <B>StartStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>If no sample is available but an end-of-stream flag is queued, this member function sends
an EC_COMPLETE message to the filter graph manager. If a sample is available, the 
EC_COMPLETE message will not be sent until it has been rendered.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063b00">CBaseRenderer::Stop</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Transitions the renderer to State_Stopped if it is not in this state already.

<P><B>HRESULT</B> <B>Stop</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>If the renderer is not in the State_Stopped
state, the <A HREF="dssd0241.htm#Lib_000106023d040a00" TARGET="TEXT">CRendererInputPin::Inactive</A> member function is called for each of the renderer's
connected pins.
If this member function succeeds, the filter's <A HREF="dssd0194.htm#Lib_000106020e010004" TARGET="TEXT">m_State</A> member variable is set to
State_Stopped.

<P>This member function overrides <A HREF="dssd0194.htm#Lib_000106020e081700" TARGET="TEXT">CBaseFilter::Stop</A>.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063c00">CBaseRenderer::StopStreaming</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Sets the internal flag to indicate not to schedule arrival of any more samples.

<P><B>virtual</B> <B>HRESULT</B> <B>StopStreaming</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>Call this member function when streaming stops. The state change methods in the filter
implementation take care of canceling any clock advise link that has been set up and
clearing any pending sample.
<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063d00">CBaseRenderer::TimerCallback</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Checks if it is time to signal the end of the current data stream.

<P><B>void</B> <B>TimerCallback</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>If the <A HREF="dssd0203.htm#Lib_0001060217010011" TARGET="TEXT">m_EndOfStreamTimer</A> data member is nonzero, this function sets it to zero and calls <A HREF="dssd0203.htm#Lib_0001060217063100" TARGET="TEXT">CBaseRenderer::SendEndOfStream</A> to signal the end of the current data stream.

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063e00">CBaseRenderer::WaitForReceiveToComplete</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Waits for the <A HREF="dssd0203.htm#Lib_0001060217062b00" TARGET="TEXT">CBaseRenderer::Receive</A> method to complete.

<P><B>void</B> <B>WaitForReceiveToComplete</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>Use this method when you wish to avoid deadlock which occurs when <A HREF="dssd0203.htm#Lib_0001060217063b00" TARGET="TEXT">CBaseRenderer::Stop</A> is called and the <A HREF="dssd0203.htm#Lib_0001060217062b00" TARGET="TEXT">CBaseRenderer::Receive</A> hasn't completed. 

<H3><HR COLOR=#0000FF><A NAME="Lib_0001060217063f00">CBaseRenderer::WaitForRenderTime</A></H3>
<A HREF="dssd0203.htm" TARGET="TEXT">CBaseRenderer Class</A>
<P>Waits for either the due time for the current sample to arrive or for rendering to be stopped.

<P><B>virtual</B> <B>HRESULT</B> <B>WaitForRenderTime</B><B>(</B><B>void</B><B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>The member function is virtual because derived classes might have more events that they
also want to wait on, which might interrupt the waiting process. The base class
has two events: <A HREF="dssd0203.htm#Lib_0001060217010003" TARGET="TEXT">m_RenderEvent</A> and <A HREF="dssd0203.htm#Lib_0001060217010004" TARGET="TEXT">m_ThreadSignal</A>.
The former is signaled by the clock when the sample is due for rendering.
The latter is signaled by the filter when it should
give up waiting and abort (making the assumption that the filter was stopped).
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
