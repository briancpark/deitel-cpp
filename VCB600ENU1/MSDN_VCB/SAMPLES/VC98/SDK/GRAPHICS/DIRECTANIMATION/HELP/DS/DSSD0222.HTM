<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>CImagePalette Class</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0221.htm','/dssd0000.htm','/dssd0180.htm','/index.htm','/dssd0223.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="Lib_000106022a000000">CImagePalette Class</A></H2>
<BR CLEAR=ALL>
<P><IMG SRC="art/wutil05.gif" WIDTH="179" HEIGHT="24" ALT="CImagePalette class hierarchy" >

<P>The <B>CImagePalette</B> class is a specialized class for image renderers that must create and manage palettes. It can be used to create palette handles from a media format containing a <A HREF="dssd0287.htm#structs_0001060501001d00" TARGET="TEXT">VIDEOINFO</A> structure in the format block. To maximize performance, the class attempts to create a palette that is an identity palette (that is, one that exactly matches the current system palette),
and compares palettes before updating to ensure that palettes are changed only when actually required.

<A NAME="Lib_000106022a010000"></A><P><B>Protected Data Members</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106022a010001">m_hPalette</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Palette handle owned by this object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106022a010002">m_pBaseWindow</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Window in which to realize the palette.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106022a010003">m_pDrawImage</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Object that will perform the drawing.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B><A NAME="Lib_000106022a010004">m_pMediaFilter</A></B>
</FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Media filter to send events to.
</FONT></TD></TR></TABLE>
<A NAME="Lib_000106022a020000"></A><P><B>Member Functions</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Name </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020100" TARGET="TEXT">CImagePalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Constructs a <A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette</A> object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020200" TARGET="TEXT">CopyPalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Copies the palette out of any YUV or true-color <A HREF="dssd0287.htm#structs_0001060501001e00" TARGET="TEXT">VIDEOINFOHEADER</A> structure
into a palettized <B>VIDEOINFOHEADER</B> structure.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020300" TARGET="TEXT">MakeIdentityPalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Ensures the palette entries will become an identity palette.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020400" TARGET="TEXT">MakePalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the color palette from the specified video image.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020500" TARGET="TEXT">PreparePalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies an entry point for updating and creating palettes.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020600" TARGET="TEXT">RemovePalette</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Releases any palette resources allocated.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0222.htm#Lib_000106022a020700" TARGET="TEXT">ShouldUpdate</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies an internal helper member function for updating palettes dynamically.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020100">CImagePalette::CImagePalette</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P>Constructs a <A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette</A> object.

<P><B>CImagePalette</B><B>(</B><BR>&nbsp;&nbsp;<B>CBaseFilter</B> <I>*pBaseFilter</I><B>,</B><BR>&nbsp;&nbsp;<B>CBaseWindow</B> <I>*pBaseWindow</I><B>,</B><BR>&nbsp;&nbsp;<B>CDrawImage</B> <I>*pDrawImage</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pBaseFilter</I>
 </DT><DD>Filter that this class is owned by.
</DD><DT><I>pBaseWindow</I>
 </DT><DD>Window to realize palette in.
</DD><DT><I>pDrawImage</I>
 </DT><DD>Object that draws using this palette.
</DD></DL>
<H5>Return Values</H5>
<P>No return value.
<H5>Remarks</H5>
<P>This class looks after the creation, management, and deletion of a window
palette. It is passed in a number of other objects that might be interested in
palettes. The class is optimized so that requested palette changes will 
be acted on only if the new set of colors differs from the current set. This is
a performance optimization, because changing palettes is an expensive process.

<P>This constructor is passed in the owning filter (<I>pBaseFilter</I>),
which must be a valid pointer.
When the class actually creates a palette, it tells the owning filter to send an
EC_PALETTE_CHANGED message to the filter graph manager.
The constructor might also be passed two further object pointers.
If <I>pBaseWindow</I> is not null, when the renderer creates a new palette
the class automatically installs it in this window. When told to remove a palette,
the class also removes the palette from the base window and installs a
standard VGA palette instead.

<P>The constructor can also be passed a drawing object derived from the
<A HREF="dssd0214.htm" TARGET="TEXT">CDrawImage</A> class. If this is non-NULL, when creating a new palette
the class will inform the drawing object that the palette has changed
(this is normally used in conjunction with a window object).
This ensures that the drawing object is notified when the palette changes
so that it can update any samples it has that were created using
<A HREF="dssd0389.htm#external_00010a0109000013" TARGET="TEXT">CreateDIBSection</A> (because they might need their internal
color tables updated).
<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020200">CImagePalette::CopyPalette</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P>Copies the palette out of any YUV or true-color <A HREF="dssd0287.htm#structs_0001060501001e00" TARGET="TEXT">VIDEOINFOHEADER</A> structure
into a palettized <B>VIDEOINFOHEADER</B> structure.

<P><B>HRESULT</B> <B>CopyPalette</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pSrc</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pDest</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pSrc</I>
 </DT><DD>Source media type.
</DD><DT><I>pDest</I>
 </DT><DD>Destination media type.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This member function is used when changing palettes on DirectDraw&#174; samples.
A filter acting as a source to the renderer can attach a palette to any
buffer and pass it to the renderer as a new <A HREF="dssd0287.htm#structs_0001060501001e00" TARGET="TEXT">VIDEOINFOHEADER</A> format. The renderer
can then call <B>CopyPalette</B> to make a new palette from that format, and
copy the palette colors into the new connection type.
<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020300">CImagePalette::MakeIdentityPalette</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P>Modifies the <A HREF="dssd0389.htm#external_00010a01090000b9" TARGET="TEXT">PALETTEENTRY</A> structure to create an identity palette.
<P><B>HRESULT</B> <B>MakeIdentityPalette</B><B>(</B><BR>&nbsp;&nbsp;<B>PALETTEENTRY</B> <I>*pEntry</I><B>,</B><BR>&nbsp;&nbsp;<B>INT</B> <I>iColours</I><B>,</B><BR>&nbsp;&nbsp;<B>LPSTR</B> <I>szDevice</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pEntry</I>
 </DT><DD>Array of prospective palette colors.
</DD><DT><I>iColours</I>
 </DT><DD>Number of colors in the array.
</DD><DT><I>szDevice</I> 
 </DT><DD><A HREF="dssd0389.htm#external_00010a01090000ae" TARGET="TEXT">LPSTR</A> value that contains the name of the destination device. If omitted, this parameter defaults to the main device.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>When a palette is installed in a window, GDI does a fair job of compressing
the requested colors where possible. So, for example, if the array contains
five entries of black, they will be compressed into one palette entry. This
is useful for most applications; however, when drawing video it will force GDI
to map the pixels in the supplied image to the compressed palette (which
results in serious performance penalties).

<P>Therefore, the <A HREF="dssd0389.htm#external_00010a01090000b9" TARGET="TEXT">PALETTEENTRY</A> fields supplied must be adjusted so that they
will never have colors compressed. This means that when the window displaying the image has
the foreground focus, the palette created by this object will map directly to the
palette selected in the display device: a so-called identity palette.
<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020400">CImagePalette::MakePalette</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P>Retrieves the color palette from the specified video image.

<P><B>HPALETTE</B> <B>MakePalette</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>VIDEOINFOHEADER</B> <I>*pVideoInfo</I><B>,</B><BR>&nbsp;&nbsp;<B>LPSTR</B> <I>szDevice</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pVideoInfo</I>
 </DT><DD>Container for the palette colors required.
</DD><DT><I>szDevice</I> 
 </DT><DD><A HREF="dssd0389.htm#external_00010a01090000ae" TARGET="TEXT">LPSTR</A> value that contains the name of the destination device. If omitted, this parameter defaults to the main device.
</DD></DL>
<H5>Return Values</H5>
<P>Returns a handle to the new palette (NULL if it fails).

<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020500">CImagePalette::PreparePalette</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P>Specifies an entry point for creating and installing palettes.

<P><B>HRESULT</B> <B>PreparePalette</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pmtNew</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>CMediaType</B> <I>*pmtOld</I><B>,</B><BR>&nbsp;&nbsp;<B>LPSTR</B> <I>szDevice</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pmtNew</I>
 </DT><DD>Media type holding new palette information.
</DD><DT><I>pmtOld</I>
 </DT><DD>Media type holding old palette information.
</DD><DT><I>szDevice</I> 
 </DT><DD><A HREF="dssd0389.htm#external_00010a01090000ae" TARGET="TEXT">LPSTR</A> value that contains the name of the destination device. If omitted, this parameter defaults to the main device.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This is the main entry point for creating new palettes. It tries to detect
situations where the palette colors requested have not changed (in which case
it does not need to create a new palette). It uses the old media type to
determine if the colors have changed. It also handles optionally installing
the palette in a window (if supplied) and notifying the filter graph manager of
a change in palettes (it uses the filter passed in to the constructor for this).
Finally, it handles notifying the draw object of palette changes (also optional,
depending on whether a draw object was passed in to the constructor).
<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020600">CImagePalette::RemovePalette</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P>Removes and deletes any palette previously created.

<P><B>HRESULT</B> <B>RemovePalette</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H3><HR COLOR=#0000FF><A NAME="Lib_000106022a020700">CImagePalette::ShouldUpdate</A></H3>
<A HREF="dssd0222.htm" TARGET="TEXT">CImagePalette Class</A>
<P><A HREF="dssd0201.htm#Lib_0001060215050600" TARGET="TEXT">Help</A> member function that checks if two sets of colors match.

<P><B>BOOL</B> <B>ShouldUpdate</B><B>(</B><BR>&nbsp;&nbsp;<B>const</B> <B>VIDEOINFOHEADER</B> <I>*pNewInfo</I><B>,</B><BR>&nbsp;&nbsp;<B>const</B> <B>VIDEOINFOHEADER</B> <I>*pOldInfo</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pNewInfo</I>
 </DT><DD><A HREF="dssd0287.htm#structs_0001060501001e00" TARGET="TEXT">VIDEOINFOHEADER</A> structure containing the new set of colors.
</DD><DT><I>pOldInfo</I>
 </DT><DD><A HREF="dssd0287.htm#structs_0001060501001e00" TARGET="TEXT">VIDEOINFOHEADER</A> structure containing the old set of colors.
</DD></DL>
<H5>Return Values</H5>
<P>Returns one of the following values.
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">TRUE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A new palette is required.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">FALSE </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The existing palette suffices.
</FONT></TD></TR></TABLE>

<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
