<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>Infinite Pin Tee</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0325.htm','/dssd0000.htm','/dssd0294.htm','/index.htm','/dssd0327.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="filteref_0001070120000000">Infinite Pin Tee</A></H2>
<BR CLEAR=ALL>
<P>The Infinite Pin Tee filter has multiple output pins and passes through type enumerators from source filters. The filter uses the <A HREF="dssd0188.htm" TARGET="TEXT">CAutoLock</A>, <A HREF="dssd0194.htm" TARGET="TEXT">CBaseFilter</A>, <A HREF="dssd0195.htm" TARGET="TEXT">CBaseInputPin</A>, <A HREF="dssd0199.htm" TARGET="TEXT">CBaseOutputPin</A>, <A HREF="dssd0210.htm" TARGET="TEXT">CCritSec</A>, and <A HREF="dssd0234.htm" TARGET="TEXT">COutputQueue</A> base classes.

<P>The Infinite Pin Tee filter has one input pin and a variable number of output pins, typically two. It accepts data samples through the <A HREF="dssd0161.htm" TARGET="TEXT">IMemInputPin</A> transport which it implements. All data samples sent to the filter are delivered down all paths simultaneously, therefore <I>teeing</I> the input into multiple separate output streams. The data samples are not type-specific, so the input, for example, can be text lyrics, video images, or audio buffers.

<P>When considering two output pins, the tee filter sends the same data down both of the pins; therefore the pins must have negotiated the same media type during connection. The Infinite Pin Tee filter handles this negotiation so that the input pin and both output pins converge when using the same media type. If a suitable media type cannot be found, then the connection is rejected.

<P>The filter always uses the suggested allocator. The filter that provides the data suggests the allocator. The data arriving at the input pin is not copied before it is sent to the output pins. The filter also ensures that the data is delivered to the downstream filters to guarantee that both outputs receive timely service. In particular, if one of the outputs can block in the <A HREF="dssd0234.htm#Lib_0001060236020d00" TARGET="TEXT">COutputQueue::Receive</A> member function, then the tee spins off a thread to deliver the sample. If there were no thread to deliver the sample, then the thread that delivers the sample to the tee input pin might pass the data to a downstream filter at which point it might block, keeping data from the other downstream filter for long periods of time.



<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
