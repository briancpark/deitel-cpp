<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IAMTimecodeReader Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0108.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0110.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_0001060115000000">IAMTimecodeReader Interface</A></H2>
<BR CLEAR=ALL>
<P><B>IAMTimecodeReader</B> is an interface that can be implemented to read SMPTE (Society of Motion Picture and Television Engineers) or MIDI timecode



 from an external device. It contains properties and methods that specify the timecode format that an external device should read and how it is embedded in the media.



 It is expected that you will use this interface with the <A HREF="dssd0100.htm" TARGET="TEXT">IAMExtDevice</A> and <A HREF="dssd0101.htm" TARGET="TEXT">IAMExtTransport</A> interfaces to control an external device, such as a VCR, which can read timecode data. 

<P>SMPTE timecode is a frame addressing system that identifies video and audio sources, makes automatic track synchronization possible, and provides a container for additional data related to the source material. SMPTE timecode's main purpose is to provide a machine-readable address for video and audio. It is displayed in hh:mm:ss:ff (hours, minutes, seconds, frames)



 format and is thoroughly defined in ANSI/SMPTE 12-1986.


<P>For more information on SMPTE timecode see the <A HREF="dssd0049.htm" TARGET="TEXT">Control an External Device in DirectShow</A> overview article.










<A NAME="If_0001060115010000"></A><P><B>When to Implement
</B>
<P>Implement this interface on an external device filter when you want to specify how an external device should read SMPTE/MIDI timecode information. 

<P>Expose the <A HREF="dssd0158.htm" TARGET="TEXT">IMediaSeeking</A> interface on your filter so that applications can convert timecode to DirectShow reference time (by using the <A HREF="dssd0158.htm#If_0001060146030200" TARGET="TEXT">IMediaSeeking::ConvertTimeFormat</A> method).

<P>Your external device must be able to read timecode and send it to the computer over its control interface. If this is not the case, you must either have a timecode reader card in your computer, or you can write a software decoder that converts VITC (Vertical Interval Timecode) in captured video frames or LTC (Linear Timecode) captured as an audio signal into DirectShow timecode samples.




<A NAME="If_0001060115020000"></A><P><B>When to Use
</B>
<P>Use this interface when you need to read timecode information for controlling an external device, or when you want to use timecode information from an external device in applications that must refer to original program information. 

<P>Applications generally save timecode in one of two ways. It is either written to the capture file as an additional stream or as a discontinuity table stored in the extended AVI file index. It is commonly used to trigger capture or playback and to create edit decision lists that describes how source material is organized into a finished product.

<P>If you intend to capture timecode, treat it as a separate stream that has its own media type. It can be consumed by an appropriate file-writing multiplexer filter. However, sometimes there are errors in reading the timecode off the tape because of dropouts and other mechanical tape problems. In such cases, the timecode source filter should simply drop samples and mark the next valid one with the discontinuity property.

<P>If you intend to use timecodes to trigger capture or playback from a timecoded (or "striped") videotape, the sequence of events goes as follows:
<OL><LI>Build a capture graph, open a target AVI file, and preallocate disk space if necessary. If the captured material will be appended to an existing AVI file, seek to the end of the file before writing.



 The capture graph is paused at this point.
<LI>Search the VCR to the capture start point and note the timecode. You can either enter this value manually into your program, or the application can automatically read it.







 Automatic reading requires that the graph is running but the stream control interfaces on the file multiplexer's input pins are discarding incoming samples, effectively gating the capture.
<LI>Cue the VCR to preroll position, usually five seconds before the target point.
<LI>Start the VCR and the graph. When the trigger point is reached (or the trigger point minus the file writer's <A HREF="dssd0404.htm#gloss_00010b010f000006" TARGET="TEXT">preroll</A>), the stream control interfaces release the file multiplexer and it begins streaming media samples to the file writer.
<LI>You can stop the capture process manually or by setting a duration property on the stream control interface.



</OL>
<P>You must consider discontinuous timecode, both during preroll and during the capture process; it is reasonable to demand that the timecode be continuous and monotonically increasing throughout the preroll and capture start point. This prevents a potentially ambiguous calculation of relative stream times by the <A HREF="dssd0158.htm#If_0001060146030200" TARGET="TEXT">IMediaSeeking::ConvertTimeFormat</A> method. Also, the timecode need not be the only gating signal for triggered capture. Any time-stamped data stored in the <A HREF="dssd0410.htm#gloss_00010b0115000002" TARGET="TEXT">vertical blanking interval</A>,



 such as Intercast or Closed Caption data (XDS), can be used to start the streaming of video and audio data to disk.




<A NAME="If_0001060115030000"></A><P><B>Hardware Requirements
</B>
<P>See the <A HREF="dssd0101.htm" TARGET="TEXT">IAMExtTransport</A> interface for hardware requirements.

<A NAME="If_0001060115040000"></A><P><B>Methods in Vtable Order

</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
 </B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves pointers to supported interfaces.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IAMTimecodeReader methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
 </B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0109.htm#If_0001060115040100" TARGET="TEXT">GetTCRMode</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves properties of the timecode reader.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0109.htm#If_0001060115040200" TARGET="TEXT">SetTCRMode</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Sets the timecode reader properties.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0109.htm#If_0001060115040300" TARGET="TEXT">put_VITCLine</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Specifies the vertical interval line that the timecode reader will use to read timecode.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0109.htm#If_0001060115040400" TARGET="TEXT">get_VITCLine</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the vertical interval line that the timecode reader is using to read timecode.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0109.htm#If_0001060115040500" TARGET="TEXT">GetTimecode</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the most recent timecode, <A HREF="dssd0409.htm#gloss_00010b0114000003" TARGET="TEXT">userbits</A>, and flag values available in the stream.



</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_0001060115040100">IAMTimecodeReader::GetTCRMode</A></H3>
<A HREF="dssd0109.htm" TARGET="TEXT">IAMTimecodeReader Interface</A>
<P>Retrieves the timecode reader's properties.
<P><B>HRESULT</B> <B>GetTCRMode</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>Param</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pValue</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Param</I>
 </DT><DD>[in] Timecode reader property to get (use ED_TCR_SOURCE). 
</DD><DT><I>pValue</I>
 </DT><DD>[out] Value of the requested timecode reader property. Must be one of the following:



<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ED_TCR_CT </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Control track
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ED_TCR_LTC </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Linear timecode
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ED_TCR_VITC </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Vertical interval timecode



</FONT></TD></TR></TABLE>
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface. 

<H5>Remarks</H5>
<P>Linear TimeCode is recorded on an analog audio track as a <A HREF="dssd0392.htm#gloss_00010b0103000002" TARGET="TEXT">bi-phase mark</A>-encoded signal. 





Each timecode frame is one video frame time in duration.

<P>Vertical TimeCode is usually stored in two lines of a video signal's vertical interval, somewhere between lines 11 and 20.

<P>Control Track is a once-per-frame signal recorded on a special track on a tape. The head and drive servo mechanisms use it to keep everything locked. It is also used to drive the counter on machines without timecode capability, and can optionally be used on machines equipped with a timecode reader.
 
<H5>See Also</H5>
<P><A HREF="dssd0109.htm#If_0001060115040200" TARGET="TEXT">IAMTimecodeReader::SetTCRMode</A>
<H3><HR COLOR=#0000FF><A NAME="If_0001060115040200">IAMTimecodeReader::SetTCRMode</A></H3>
<A HREF="dssd0109.htm" TARGET="TEXT">IAMTimecodeReader Interface</A>
<P>Sets the timecode reader properties.
<P><B>HRESULT</B> <B>SetTCRMode</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>Param</I><B>,</B><BR>&nbsp;&nbsp;<B>long</B> <I>Value</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Param</I>
 </DT><DD>[in] Property you want to set (use ED_TCR_SOURCE).



</DD><DT><I>Value</I>
 </DT><DD>[in] Value of the specified property; currently one of the following:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"> ED_TCR_CT </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Control Track
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ED_TCR_LTC </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Linear TimeCode
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">ED_TCR_VITC </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Vertical Interval TimeCode
</FONT></TD></TR></TABLE>
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface. 

<H5>Remarks</H5>
<P>Linear TimeCode is recorded on an analog audio track as an NRZ <A HREF="dssd0392.htm#gloss_00010b0103000002" TARGET="TEXT">bi-phase mark</A>-encoded signal. Each timecode frame is one video frame time in duration.

<P>Vertical TimeCode is usually stored in two lines of a video signal's vertical interval, somewhere between 10 and 20.

<P>Control Track is a once-per-frame signal recorded on a special track on a tape. The head and drive servo mechanisms use it to keep everything locked. It is also used to drive the counter on machines without timecode capability, and can optionally be used on machines equipped with a timecode reader.
 
<H5>See Also</H5>
<P><A HREF="dssd0109.htm#If_0001060115040100" TARGET="TEXT">IAMTimecodeReader::GetTCRMode</A>
<H3><HR COLOR=#0000FF><A NAME="If_0001060115040300">IAMTimecodeReader::put_VITCLine</A></H3>
<A HREF="dssd0109.htm" TARGET="TEXT">IAMTimecodeReader Interface</A>
<P>Specifies the vertical interval line that the timecode reader will use to read timecode.
<P><B>HRESULT</B> <B>put_VITCLine</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>Line</I> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>Line</I>
 </DT><DD>[in] Vertical line containing timecode information (valid lines are 11-20; 0 means autoselect).
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface. 

<H5>Remarks</H5>
<P>If VITC mode is specified in the <A HREF="dssd0109.htm#If_0001060115040200" TARGET="TEXT">IAMTimecodeReader::SetTCRMode</A> method, you must specify which line or lines will contain timecode information. To read VITC on specific multiple lines, the caller would make successive calls to <B>put_VITCLine</B>, once for each line desired.

<P>Set the hi bit to add to the list of lines for readers that test across multiple lines.


 
<H5>See Also</H5>
<P><A HREF="dssd0109.htm#If_0001060115040400" TARGET="TEXT">IAMTimecodeReader::get_VITCLine</A>

<H3><HR COLOR=#0000FF><A NAME="If_0001060115040400">IAMTimecodeReader::get_VITCLine</A></H3>
<A HREF="dssd0109.htm" TARGET="TEXT">IAMTimecodeReader Interface</A>
<P>Retrieves the vertical interval line that the timecode reader is using to read timecode.
<P><B>HRESULT</B> <B>get_VITCLine</B><B>(</B><BR>&nbsp;&nbsp;<B>long</B> <I>*pLine</I> <B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pLine</I>
 </DT><DD>[out] Vertical line containing timecode information (valid lines are 11-20).
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface. 

<H5>Remarks</H5>
<P>The hi bit indicates that multiple lines are used and successive calls will cycle through the line numbers.
 

<H5>See Also</H5>
<P><A HREF="dssd0109.htm#If_0001060115040300" TARGET="TEXT">IAMTimecodeReader::put_VITCLine</A>
<H3><HR COLOR=#0000FF><A NAME="If_0001060115040500">IAMTimecodeReader::GetTimecode</A></H3>
<A HREF="dssd0109.htm" TARGET="TEXT">IAMTimecodeReader Interface</A>
<P>Retrieves the most recent timecode, userbit, and flag values available in the stream.

<P><B>HRESULT</B> <B>GetTimecode</B><B>(</B><BR>&nbsp;&nbsp;<B>PTIMECODE_SAMPLE</B> <I>pTimecodeSample</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pTimecodeSample</I>
 </DT><DD>[out] Pointer to a <A HREF="dssd0287.htm#structs_0001060501001a00" TARGET="TEXT">TIMECODE_SAMPLE</A> timecode structure.





</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface.

<H5>Remarks</H5>
<P>Use this method to monitor the timecode and to parse duplicates and discontinuities.



 The source filter supplying the timecode, or possibly a downstream filter, might want to parse for discontinuities or errors since you have to look at every sample to be able to retrieve the most recent timecode.



<P>Applications can fill undefined bits in the timecode word to store syncronization information, or to encode original film and audio tape information. These undefined bits, or userbits, are retrieved by calling this method.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
