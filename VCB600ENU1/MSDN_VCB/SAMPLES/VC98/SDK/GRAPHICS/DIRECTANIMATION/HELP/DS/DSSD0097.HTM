<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IAMDevMemoryControl Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0096.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0098.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_0001060109000000">IAMDevMemoryControl Interface</A></H2>
<BR CLEAR=ALL>
<P>The <B>IAMDevMemoryControl</B> interface controls and identify



 the on-board memory of codecs.



 The interface is supported by a device memory control object. This object is aggregated with an <A HREF="dssd0160.htm" TARGET="TEXT">IMemAllocator</A> object that is used in the connection.



 Typically, filters will call the <A HREF="dssd0096.htm#If_0001060108030400" TARGET="TEXT">IAMDevMemoryAllocator::GetDevMemoryObject</A> method to obtain a pointer to this interface.


<A NAME="If_0001060109010000"></A><P><B>When to Implement
</B>
<P>Implement this interface with



 the <A HREF="dssd0096.htm" TARGET="TEXT">IAMDevMemoryAllocator</A> interface when pins need to have greater control of memory allocation.



<A NAME="If_0001060109020000"></A><P><B>When to Use
</B>
<P>Use this interface to synchronize the completed data write


 of a memory allocator, and to get the device ID of the on-board memory allocator.

<A NAME="If_0001060109030000"></A><P><B>Methods in Vtable Order

</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
 </B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves pointers to supported interfaces.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IAMDevMemoryControl methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
 </B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0097.htm#If_0001060109030200" TARGET="TEXT">QueryWriteSync</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Checks if the memory supported by the allocator requires the use of the <A HREF="dssd0097.htm#If_0001060109030300" TARGET="TEXT">WriteSync</A> method.



 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0097.htm#If_0001060109030300" TARGET="TEXT">WriteSync</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Used to synchronize with the completed write.


 This method returns when any data being written to the specified



 allocator region is fully written into the memory.


 </FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0097.htm#If_0001060109030100" TARGET="TEXT">GetDevId</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the device ID of the on-board memory allocator.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_0001060109030100">IAMDevMemoryControl::GetDevId</A></H3>
<A HREF="dssd0097.htm" TARGET="TEXT">IAMDevMemoryControl Interface</A>
<P>Retrieves the device ID of the on-board memory allocator.
<P><B>HRESULT</B> <B>GetDevId</B><B>(</B><BR>&nbsp;&nbsp;<B>DWORD</B> <I>*pdwDevId</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>pdwDevId</I>
 </DT><DD>[out] Pointer to the device ID.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface.

<H5>Remarks</H5>
<P>This method retrieves a unique ID that the hardware filter can use to verify that the specified allocator passed



 uses its on-board memory (because there can be more than one). The ID



 will be the same one as used to create the allocator object (using CoCreateNamedInstance).



 For another filter to be able to use the on-board memory, it must have the same device ID as the on-board memory allocator.





<H3><HR COLOR=#0000FF><A NAME="If_0001060109030200">IAMDevMemoryControl::QueryWriteSync</A></H3>
<A HREF="dssd0097.htm" TARGET="TEXT">IAMDevMemoryControl Interface</A>
<P>Checks if the memory supported by the allocator requires the use of the <A HREF="dssd0097.htm#If_0001060109030300" TARGET="TEXT">IAMDevMemoryControl::WriteSync</A> method.
<P><B>HRESULT</B> <B>QueryWriteSync</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns S_OK if the method is required, or S_FALSE otherwise.

<H5>Remarks</H5>
<P>Not all on-board memory needs to have <A HREF="dssd0097.htm#If_0001060109030300" TARGET="TEXT">WriteSync</A> called to synchronize with the completed write. This method is used to check if the call is necessary.



<H3><HR COLOR=#0000FF><A NAME="If_0001060109030300">IAMDevMemoryControl::WriteSync</A></H3>
<A HREF="dssd0097.htm" TARGET="TEXT">IAMDevMemoryControl Interface</A>
<P>Used to synchronize with the completed write. This method returns when any data being written to the particular allocator region is fully written into the memory.
<P><B>HRESULT</B> <B>WriteSync</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value that depends on the implementation of the interface. Common return values include:
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Value </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Meaning
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">E_FAIL </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">A time-out has occurred without confirming that data was written.


</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">S_OK </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Operation proceeded normally.


</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0293.htm#errcodes_0001060a01000039" TARGET="TEXT">VFW_E_NOT_COMMITTED</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">The allocator hasn't called the <A HREF="dssd0160.htm#If_0001060148030100" TARGET="TEXT">IMemAllocator::Commit</A> method.
</FONT></TD></TR></TABLE>

<H5>Remarks</H5>
<P>This method guarantees that all prior write operations to allocated memory have been successfully written. 



Subsequent memory write operations require another call to <B>WriteSync</B>.

<P>This method is implementation dependent, and is used (when necessary) to synchronize memory write operations to the memory. The driver of the on-board memory provides the implementation.

<P>The <A HREF="dssd0097.htm" TARGET="TEXT">IAMDevMemoryControl</A> interface is typically found on memory that is accessed through



 a PCI-bridge.



 Memory behind a PCI bridge


 must be synchronized after a memory write operation completes if another device will access that memory from behind the PCI bridge. This is because the host access to the memory is buffered via the PCI bridge FIFO (first in first out),



 and the host will think the write is completed before the data is actually written by the bridge. A subsequent action by a device behind the bridge, such as a SCSI controller, might read the memory before the write is completed if the <B>IAMDevMemoryControl::WriteSync</B> method is not called. 









<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
