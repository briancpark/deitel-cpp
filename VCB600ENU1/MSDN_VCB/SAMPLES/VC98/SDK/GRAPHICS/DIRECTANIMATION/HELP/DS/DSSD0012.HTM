<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>Using the ActiveMovie Control in Visual Basic</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0011.htm','/dssd0000.htm','/dssd0009.htm','/index.htm','/dssd0013.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="amocx_0001020103000000">Using the ActiveMovie Control in Visual Basic</A></H2>
<BR CLEAR=ALL>
<P>This article describes how Microsoft&#174; Visual Basic&#174; applications can use the ActiveMovie Control. The ActiveMovie Control is a high-level interface that meets the needs of most multimedia application developers. Additional lower-level interfaces are also available to Visual Basic programmers. 

<P><B>Contents of this article</B>:
<UL><LI><A HREF="dssd0012.htm#amocx_0001020103010000" TARGET="TEXT">Quick Start: Insert and Use the ActiveMovie Control</A>
<LI><A HREF="dssd0012.htm#amocx_0001020103020000" TARGET="TEXT">The Visual Basic Ocxvb01 Sample</A>
<LI><A HREF="dssd0012.htm#amocx_0001020103030000" TARGET="TEXT">Opening and Running DirectShow Source Files</A>
<LI><A HREF="dssd0012.htm#amocx_0001020103040000" TARGET="TEXT">Managing the User Interface of the ActiveMovie Control</A>
<LI><A HREF="dssd0012.htm#amocx_0001020103050000" TARGET="TEXT">Monitoring ActiveMovie Control Events</A>
</UL>
<A NAME="amocx_0001020103010000"></A><P><B>Quick Start: Insert and Use the ActiveMovie Control</B>
<P>This section describes how to insert the ActiveMovie Control and use it in a Visual Basic application. It is a simple example to get you started, and implements only playing and stopping a movie. 
<P>Follow these steps to insert the ActiveMovie Control into a Visual Basic form and play a movie:
<OL><LI>Install Internet Explorer to install the ActiveMovie Control.
<LI>Open a project or create a new project in Visual Basic.
<LI>Choose <B>Components</B> from the <B>Projects</B> menu. Choose the <B>Controls</B> tab. If the ActiveMovie Control does not appear in the list of 
<B>Controls</B>, click the <B>Browse</B> button. In the <B>Add ActiveX Control</B> dialog box that appears, navigate to the directory containing the control (by default, the \Windows\System or \Winnt\System32 directory).


 Double-click the Amovie.ocx file to add the ActiveMovie Control to the <B>Controls</B> list. 
<LI>Add the ActiveMovie Control to the Visual Basic toolbox by selecting the check box next to <B>Microsoft ActiveMovie Control</B> in the <B>Controls</B> list. 
<LI>Add the ActiveMovie Control to your form and size the control to the screen size you want for your movie. (Click the control in the Toolbox, and then draw its size on the form.)
<LI>In the <B>Properties</B> list for the ActiveMovie Control, initialize the <B>FileName</B> property to the movie file you want to play. The <B>FileName</B> property should contain the full path. For example:

<PRE><FONT FACE="Courier" SIZE="2">c:\movies\mymovie.avi
</FONT></PRE>
<LI>Set the <B>ShowControls</B> and <B>ShowDisplay</B> properties to FALSE.
<LI>Add code to start and stop the movie to two events the ActiveMovie Control supports. For example:
<PRE><FONT FACE="Courier" SIZE="2">Private Sub ActiveMovie1_Click()
    ActiveMovie1.Run
End Sub

Private Sub ActiveMovie1_KeyPress(KeyAscii As Integer)
     ActiveMovie1.Stop
End Sub 
</FONT></PRE>
<LI>Compile the application.
<LI>Run the application. In this example, click anywhere on the movie screen to start the movie. Press any key to stop the movie.
</OL>
<P>Follow these steps to use the ActiveMovie Control to play a movie controlled by Visual Basic controls:
<OL><LI>Follow steps 1-6 as shown earlier in this section.
<LI>Add Visual Basic controls (such as a CommandButton or ListBox)


 to your form to play and stop the movie. 
<LI>Add code to play and stop the movie. For example:

<PRE><FONT FACE="Courier" SIZE="2">Private Sub Command1_Click()
ActiveMovie1.Run
End Sub

Private Sub Command2_Click()
ActiveMovie1.Stop
End Sub
</FONT></PRE>
<LI>Compile the application.
<LI>Run the application. In this example, Click the Command1 button to start the movie. Click the Command2 button to stop the movie.
</OL>
<A NAME="amocx_0001020103020000"></A><P><B>The Visual Basic Ocxvb01 Sample</B>
<P>This section describes some of the features of the DirectShow Visual Basic sample application called Ocxvb01 in the VB\OCX directory of the DirectShow samples. The ActiveMovie Control manages most of the details of the display and playback of DirectShow files, while giving the Visual Basic developer control over the image size, playback rate, volume, balance, and position. With the control, the developer can manage a variety of standard user interface controls, such as rewind and fast forward, and a trackbar control to set positions within the media file.

<P>The Visual Basic sample application Ocxvb01 consists of two forms: the main control form frmMain (Ocxvb01.frm) and the display form frmViewer (Viewer.frm). 
 
<P>The frmMain form's menu commands call ActiveMovie Control methods to run, pause, and stop multimedia playback, set and retrieve the control's properties, and enable and disable different parts of the user interface.

<P>The frmMain form contains two command buttons that change the <A HREF="dssd0025.htm#vbref_0001020207020100" TARGET="TEXT">CurrentPosition</A> property of the <A HREF="dssd0154.htm#If_0001060142000000" TARGET="TEXT">IMediaPosition</A> object; you can use these buttons to move forward or backward through the multimedia source file, if the multimedia source type supports this functionality. The frmMain form's trackbar control sets the Playback property; its valid range is 0.5 to 1.5. This value is used as a multiplier; 1.0 is the authored speed, so 0.5 is half the authored speed and 2.0 is twice 
the authored speed. You can set this property to values outside this range, but the audio portion tends to become incomprehensible.
<P>The main control form also contains option buttons that set the display configuration to half size, full size (default), and double size. The main control form appears as shown in the following illustration.

<P><IMG SRC="art/vbocx01.gif" WIDTH="364" HEIGHT="238" ALT="Main control form" > 
 
<P>The display form, frmViewer, contains the ActiveMovie Control that is displayed when the DirectShow multimedia source file is active or when the source is playing. The application resizes the display form to correspond to the selected source. The display form, with all ActiveMovie Control user interface elements visible and enabled, appears as shown in the following illustration. 
 
<P><IMG SRC="art/vbocx02.gif" WIDTH="273" HEIGHT="131" ALT="Display form with all ActiveMovie Control elements visible and enabled" > 
 
<P>The following sections describe how to use some of the properties, methods, and events. 


<A NAME="amocx_0001020103030000"></A><P><B>Opening and Running DirectShow Source Files</B>
<P>To load and play a DirectShow file, set the ActiveMovie Control's <A HREF="dssd0013.htm#amocx_0001020104001300" TARGET="TEXT">FileName</A> property. Depending on your application's requirements, you can play the file from your code by using methods like <A HREF="dssd0014.htm#amocx_0001020105000400" TARGET="TEXT">Run</A> and <A HREF="dssd0014.htm#amocx_0001020105000500" TARGET="TEXT">Stop</A>, or you can let the user interact with the user interface elements offered by the control. 
 
<P>The <A HREF="dssd0013.htm#amocx_0001020104001300" TARGET="TEXT">FileName</A> property specifies the name of the multimedia source file. When you set the <B>FileName</B> property, several other properties are updated to indicate characteristics of that source file. 
 
<P>Once the <A HREF="dssd0013.htm#amocx_0001020104001300" TARGET="TEXT">FileName</A> property contains a valid file name, you can call the control's <A HREF="dssd0014.htm#amocx_0001020105000400" TARGET="TEXT">Run</A> method to play the multimedia file. Or, you can enable the control buttons on the display form and let the user play the file. 
 
<P>The sample application contains an Open command on the File menu that sets the value of the <A HREF="dssd0013.htm#amocx_0001020104001300" TARGET="TEXT">FileName</A> property. It invokes the File Open common dialog box to obtain a file name:
 
<PRE><FONT FACE="Courier" SIZE="2"> 
   Private Sub mnu_File_Open_Click() 
 
      CommonDialog1.Filter = "All files (*.*)|*.*|DirectShow files 
(*.mpg;*.mpa;*.mpv;*.mov;*.mpeg;*.enc;*.m1v;*.mp2)|*.mpg;*.mpa;*.mpv;*.mov;*.mpeg;*.enc;*.m1v;*.
mp2|Audio files (.wav)|*.wav|Video for Windows files 
(.avi)|*.avi" 
      CommonDialog1.Flags = 4 'Hide read-only check box 
      CommonDialog1.ShowOpen 
      ' only set the property if the user selected a filename from the common dialog
      If CommonDialog1.filename &lt;&gt; "" Then 
         frmViewer.ActiveMovie1.filename = CommonDialog1.filename 
         g_FileOpened = True 
         g_FileExtension = Right$(CommonDialog1.filename, Len(CommonDialog1.filename) - 
InStr(CommonDialog1.filename, ".")) 
      Else 
         GoTo err_FileOpen 
      End If 
      Call ResizeViewer 
      ... 
 </FONT></PRE>
<P>First, the subroutine prepares the common dialog box to display only movie files. After the common dialog box returns, the subroutine checks to determine if a file name was returned. 
<P>If a file name was returned, the subroutine sets the <A HREF="dssd0013.htm#amocx_0001020104001300" TARGET="TEXT">FileName</A> property of the ActiveMovie Control, in addition to some other global variables: gFileOpened to determine whether or not a file has been opened, and gFileExtension to determine the type of the file. 

<P>Finally, the subroutine calls the ResizeViewer subroutine to make the dimensions of the viewer form match those of the DirectShow file. The dimensions of the Visual Basic form are expressed in twips, while the dimensions of the multimedia source are expressed in pixels. The ResizeViewer subroutine considers these differences to size the form by using the form's <A HREF="dssd0389.htm#external_00010a01090000c2" TARGET="TEXT">ScaleHeight</A> and <A HREF="dssd0389.htm#external_00010a01090000c3" TARGET="TEXT">ScaleWidth</A> properties:

<PRE><FONT FACE="Courier" SIZE="2">
' Resize form to dimensions of ActiveMovie Control + nonclient region.
    With frmViewer
        .Visible = False
        .Height = .ActiveMovie1.Height + (.Height - .ScaleHeight)
        .Width = .ActiveMovie1.Width + (.Width - .ScaleWidth)
        .Visible = True
    End With
</FONT></PRE>
<P>After the file is loaded successfully, you can play it by clicking Play on the control, or by using the <A HREF="dssd0014.htm#amocx_0001020105000400" TARGET="TEXT">Run</A> method. 
The sample application provides a Run command on its File menu that calls the <B>Run</B> method: 
 
<PRE><FONT FACE="Courier" SIZE="2"> 
   Private Sub mnu_File_Run_Click() 
 
      If g_FileOpened = True Then 
         frmViewer.ActiveMovie1.Run 
         frmViewer.ZOrder 0 
      End If 
</FONT></PRE>
<A NAME="amocx_0001020103040000"></A><P><B>Managing the User Interface of the ActiveMovie Control</B>
<P>The display form of the sample application (Viewer.frm) contains the ActiveMovie Control. The following illustration shows the control with the status bar visible and the control bar hidden.
 
<P><IMG SRC="art/vbocx04.gif" WIDTH="273" HEIGHT="93" ALT="ActiveMovie Control with status bar visible and control bar hidden" > 
 
<P>You can use the ActiveMovie Control properties to show or hide and enable or disable user interface elements of the ActiveMovie Control. The sample application includes selected menu commands that enable you to individually control each of the user interface elements. The commands on the View menu enable you to control whether the element is visible. The commands on the Enable menu enable you to control whether the element is enabled. 

<P>When the sample application loads a new file, it resets the ActiveMovie Control properties to default values and initializes the values of these selected menu commands. This fragment is from the mnu_File_Open_Click procedure: 
 
<PRE><FONT FACE="Courier" SIZE="2"> 
   With frmViewer.ActiveMovie1 
      .EnablePositionControls = False              'Disable/Enable controls. 
      .EnableSelectionControls = False 
      .EnableTracker = False 
      .ShowPositionControls = False                'Show/don't show controls. 
      .ShowSelectionControls = False 
      .ShowTracker = True 
      mnu_Enable_PositionControls.Checked = False  'Check/uncheck menus to match 
      mnu_Enable_SelectionControls.Checked = False 'controls. 
      mnu_Enable_Tracker.Checked = False 
      mnu_View_Tracker.Checked = True 
      mnu_View_PositionControls.Checked = False 
      mnu_View_SelectionControls.Checked = False 
      ... 
   End With 
</FONT></PRE>
<P>Many of the control elements have two properties associated with them: one to enable them and another to make them visible. To use the position controls, set both the <A HREF="dssd0013.htm#amocx_0001020104001000" TARGET="TEXT">EnablePositionControls</A> and <A HREF="dssd0013.htm#amocx_0001020104001f00" TARGET="TEXT">ShowPositionControls</A> properties. The following illustration shows the display controls and all position controls with all elements of the user interface both visible and enabled. 

<P><IMG SRC="art/vbocx02.gif" WIDTH="273" HEIGHT="131" ALT="Display form with all ActiveMovie Control elements visible and enabled" > 
 
<A NAME="amocx_0001020103050000"></A><P><B>Monitoring ActiveMovie Control Events</B>
<P>The ActiveMovie Control automatically monitors certain events and calls event procedures accordingly. To handle one of these events, you provide only the event handling code. For example, the <A HREF="dssd0015.htm#amocx_0001020106000600" TARGET="TEXT">StateChange</A> event indicates a change in the state of the multimedia source, such as the change from running to stopped, or the change from paused to running. To take some action when this event occurs, the application provides code as part of the control's <B>StateChange</B> event.

<P>To demonstrate these event handlers, the sample application provides trivial code that increments a variable. The variable represents a count of the number of times the event has occurred. The current values for these counter variables are displayed at the bottom of the main form. The following example shows the code for the <A HREF="dssd0015.htm#amocx_0001020106000600" TARGET="TEXT">StateChange</A> event.

<PRE><FONT FACE="Courier" SIZE="2"> 
   Private Sub ActiveMovie1_StateChange(ByVal oldState As Long, ByVal newState As Long)
 
      g_cStateChange = g_cStateChange + 1
      UpdateStatusBar 
</FONT></PRE>
<P>Each event procedure passes some informational parameters too. For the <A HREF="dssd0015.htm#amocx_0001020106000600" TARGET="TEXT">StateChange</A> event, you can determine the previous state, in addition to the control's current state, by examining the <I>oldState</I> and <I>newState</I> parameters.




<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
