<!DOCTYPE HTML PUBLIC "-//IETF//DTD HTML//EN">
<HTML>
<HEAD><TITLE>IMediaControl Interface</TITLE>
<STYLE>
<!--
.tctop {color: blue}
.cpslug {color: blue; text-decoration: none}
-->
</STYLE>
<SCRIPT LANGUAGE="JAVASCRIPT">
//<!--
function ShowButtons() {
    if (window.top.frames.length!=0 && window.top.frames[0].ShowButtons!=null)
	window.top.frames[0].ShowButtons('/dssd0148.htm','/dssd0000.htm','/dssd0088.htm','/index.htm','/dssd0150.htm');
}
ShowButtons();
//-->
</SCRIPT>
</HEAD>
<BODY onLoad="ShowButtons()" TOPMARGIN=10 BGPROPERTIES="FIXED" BGCOLOR="#FFFFFF" LINK="#000000" VLINK="#808080" ALINK="#000000">
<FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">
<H2><A NAME="If_000106013d000000">IMediaControl Interface</A></H2>
<BR CLEAR=ALL>
<P>The filter graph exposes the <B>IMediaControl</B> interface to allow applications to
control the streaming of media through the filters in the graph. The interface provides methods
for running, pausing, and stopping the streaming of data. It also provides
applications with a simple method of building graphs to play back media files.

<A NAME="If_000106013d010000"></A><P><B>When to Implement</B>
<P>This interface is implemented by the filter graph manager. Implement this only if
you are writing a plug-in distributor that needs to export the control methods.

<A NAME="If_000106013d020000"></A><P><B>When to Use</B>
<P>Use this interface from any application that wants to control the playing
of media through Microsoft&#174; DirectShow&#153; filter graphs. Applications can also use it to
enumerate the filters in the filter graph and all the filters in the registry,
to add a source filter to the filter graph, and to instruct the filter graph
manager to build a filter graph capable of rendering the media type in a file.

<A NAME="If_000106013d030000"></A><P><B>Methods in Vtable Order</B>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IUnknown methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030200" TARGET="TEXT">QueryInterface</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Returns pointers to supported interfaces.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030100" TARGET="TEXT">AddRef</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Increments the reference count.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0175.htm#If_0001060157030300" TARGET="TEXT">Release</A> </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Decrements the reference count.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IDispatch methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0389.htm#external_00010a0109000080" TARGET="TEXT">GetTypeInfoCount</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Determines whether there is type information available for this dispinterface.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0389.htm#external_00010a010900007f" TARGET="TEXT">GetTypeInfo</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the type information for this dispinterface if
 <A HREF="dssd0389.htm#external_00010a0109000080" TARGET="TEXT">GetTypeInfoCount</A> returned
successfully.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0389.htm#external_00010a010900007e" TARGET="TEXT">GetIDsOfNames</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Converts text names of properties and methods (including arguments) to
their corresponding DISPIDs.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0389.htm#external_00010a0109000081" TARGET="TEXT">Invoke</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Calls a method or accesses a property in this dispinterface if given a DISPID
and any other necessary parameters.
</FONT></TD></TR></TABLE>
<TABLE BORDER=0>
<TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>IMediaControl methods </B></FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><B>Description
</B></FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030700" TARGET="TEXT">Run</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches the entire filter graph into running mode.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030500" TARGET="TEXT">Pause</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Pauses all filters in the filter graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030800" TARGET="TEXT">Stop</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Switches all filters in the filter graph to a stopped state.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030900" TARGET="TEXT">StopWhenReady</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Waits for an operation such as Pause to complete,
 allowing filters to queue up data, then
 stops the filter graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030400" TARGET="TEXT">GetState</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves the state of the filter graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030600" TARGET="TEXT">RenderFile</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Adds and connects filters needed to play the specified file.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030100" TARGET="TEXT">AddSourceFilter</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Adds to the graph the source filter that can read the given file name,
and returns an <A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> interface pointer representing the filter object.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030200" TARGET="TEXT">get_FilterCollection</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a collection of <A HREF="dssd0142.htm" TARGET="TEXT">IFilterInfo</A> interfaces representing the
filters in the graph.
</FONT></TD></TR><TR><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2"><A HREF="dssd0149.htm#If_000106013d030300" TARGET="TEXT">get_RegFilterCollection</A>
 </FONT></TD><TD ALIGN=LEFT VALIGN=TOP><FONT FACE="VERDANA,ARIAL,HELVETICA" SIZE="2">Retrieves a collection of <A HREF="dssd0171.htm" TARGET="TEXT">IRegFilterInfo</A> interfaces representing the
filters available in the registry.
</FONT></TD></TR></TABLE>
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030100">IMediaControl::AddSourceFilter</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Adds to the graph the source filter that can read the given file name,
and returns an <A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> interface pointer representing the filter.

<P><B>HRESULT</B> <B>AddSourceFilter</B><B>(</B><BR>&nbsp;&nbsp;<B>BSTR</B> <I>strFilename</I><B>,</B><BR>&nbsp;&nbsp;<B>IDispatch</B> <I>**ppUnk</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>strFilename</I>
 </DT><DD>[in] Name of the file containing the source video.
</DD><DT><I>ppUnk</I>
</DT><DD>[out] Pointer to the <A HREF="dssd0142.htm" TARGET="TEXT">IFilterInfo</A> interface on the filter.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is primarily for use by Automation clients because it returns an
<A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> interface pointer. C and C++ applications should call the
<A HREF="dssd0146.htm#If_000106013a030100" TARGET="TEXT">IGraphBuilder::AddSourceFilter</A> method to perform this operation for maximum
efficiency.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030200">IMediaControl::get_FilterCollection</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Retrieves a collection of <A HREF="dssd0142.htm" TARGET="TEXT">IFilterInfo</A> interfaces representing the
filters in the graph and returns <A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> for an object
that supports the <A HREF="dssd0093.htm" TARGET="TEXT">IAMCollection</A> interface.

<P><B>HRESULT</B> <B>get_FilterCollection</B><B>(</B><BR>&nbsp;&nbsp;<B>IDispatch</B> <I>**ppUnk</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppUnk</I>
 </DT><DD>[out, retval] The <A HREF="dssd0093.htm" TARGET="TEXT">IAMCollection</A> interface on a collection of 
 <A HREF="dssd0142.htm" TARGET="TEXT">IFilterInfo</A> objects.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is primarily for use by Automation clients because it returns an
<A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> interface pointer. C and C++ applications should call the
<A HREF="dssd0140.htm#If_0001060134030400" TARGET="TEXT">IFilterGraph::EnumFilters</A> method to perform this operation for maximum
efficiency.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030300">IMediaControl::get_RegFilterCollection</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Retrieves a collection of <A HREF="dssd0171.htm" TARGET="TEXT">IRegFilterInfo</A> interfaces representing the
filters available in the registry.

<P><B>HRESULT</B> <B>get_RegFilterCollection</B><B>(</B><BR>&nbsp;&nbsp;<B>IDispatch</B> <I>**ppUnk</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>ppUnk</I>
 </DT><DD>[out, retval] <A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> interface of the <A HREF="dssd0093.htm" TARGET="TEXT">IAMCollection</A> object.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.

<H5>Remarks</H5>
<P>This method is primarily for use by Automation clients because it returns an
<A HREF="dssd0389.htm#external_00010a010900007d" TARGET="TEXT">IDispatch</A> interface pointer. C and C++ applications should call the
<A HREF="dssd0143.htm#If_0001060137030100" TARGET="TEXT">IFilterMapper::EnumMatchingFilters</A> method to perform this operation for maximum
efficiency.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030400">IMediaControl::GetState</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Retrieves the state of the filter graph.

<P><B>HRESULT</B> <B>GetState</B><B>(</B><BR>&nbsp;&nbsp;<B>LONG</B> <I>msTimeout</I><B>,</B><BR>&nbsp;&nbsp;<B>OAFilterState*</B> <I>pfs</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>msTimeout</I>
 </DT><DD>[in] Duration of the time-out, in milliseconds. 
</DD><DT><I>pfs</I>
 </DT><DD>[out] Holds the returned state of the filter graph.
</DD></DL>
<H5>Return Values</H5>
<P>Returns <A HREF="dssd0293.htm#errcodes_0001060a01000060" TARGET="TEXT">VFW_S_STATE_INTERMEDIATE</A> if the state transition is not complete, or S_OK if it completed successfully.


<H5>Remarks</H5>
<P>Not all state transitions are synchronous. For example, even though the <A HREF="dssd0149.htm#If_000106013d030500" TARGET="TEXT">IMediaControl::Pause</A> method returns immediately, the filter graph typically does not complete the transition into paused mode until data is ready at the renderer. This method will not return S_OK until the state transition has been completed.

<P>If you specify a nonzero time-out, the method waits up to that number of milliseconds for the filter graph to leave the intermediate state. If the time-out expires before the state transition is complete, the return code will be <A HREF="dssd0293.htm#errcodes_0001060a01000060" TARGET="TEXT">VFW_S_STATE_INTERMEDIATE</A>, and the returned state will be the state into which the graph is transitioning (either the <A HREF="dssd0288.htm#dtypes_0001060601001801" TARGET="TEXT">State_Stopped</A>, <A HREF="dssd0288.htm#dtypes_0001060601001802" TARGET="TEXT">State_Paused</A>, or <A HREF="dssd0288.htm#dtypes_0001060601001803" TARGET="TEXT">State_Running</A> members of the <A HREF="dssd0288.htm#dtypes_0001060601001800" TARGET="TEXT">FILTER_STATE</A> structure).

<P>This method will return an error if there is a call on another thread to change the state while this method is blocked.

<P>Avoid specifying a time-out of INFINITE. Threads cannot process messages while waiting in 
<B>GetState</B>. If you call <B>GetState</B> from the thread that processes Windows&#174; messages, specify only small wait times on the call in order to remain responsive to user input. This is most important when streaming data from a source such as the Internet, because state transitions can take significantly
more time to complete.

<P>If you want to pause a filter graph completely before stopping it, call <A HREF="dssd0149.htm#If_000106013d030500" TARGET="TEXT">IMediaControl::Pause</A>, and then <A HREF="dssd0149.htm#If_000106013d030900" TARGET="TEXT">IMediaControl::StopWhenReady</A> (instead of calling <B>GetState</B> with an INFINITE time-out, and then <A HREF="dssd0149.htm#If_000106013d030800" TARGET="TEXT">IMediaControl::Stop</A>).

<P>Although <I>pfs</I> is declared as a pointer to an OAFilterState value in 
<B>IMediaControl::GetState</B>, DirectShow implements it as a pointer to a <A HREF="dssd0288.htm#dtypes_0001060601001800" TARGET="TEXT">FILTER_STATE</A> value in <A HREF="dssd0194.htm#Lib_000106020e080a00" TARGET="TEXT">CBaseFilter::GetState</A> and its derivatives. Since both OAFilterState and 
<B>FILTER_STATE</B> resolve to <A HREF="dssd0389.htm#external_00010a01090000aa" TARGET="TEXT">LONG</A> values, this does not cause an error.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030500">IMediaControl::Pause</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Pauses all the filters in the filter graph.

<P><B>HRESULT</B> <B>Pause</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>In the paused state, filters process data but do not render it. Data is pushed down the filter
graph and is processed by transform filters as far as buffering permits. No data is rendered (except
that media types capable of being rendered statically, such as video, have a static, poster frame
rendered in paused mode). Therefore, putting a filter graph into a paused state cues the graph
for immediate rendering when put into a running state.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030600">IMediaControl::RenderFile</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Adds and connects filters needed to play the specified file.

<P><B>HRESULT</B> <B>RenderFile</B><B>(</B><BR>&nbsp;&nbsp;<B>BSTR</B> <I>strFilename</I><BR>&nbsp;&nbsp;<B>)</B><B>;</B><BR><H5>Parameters</H5>
<DL><DT><I>strFilename</I>
 </DT><DD>Name of the file to render.
</DD></DL>
<H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>This method allows an application to pass the name of a media file that it wants rendered
to the filter graph manager. The filter graph manager will build a graph of the
filters needed to play back this file. This method is Automation-compatible and is
equivalent to <A HREF="dssd0146.htm#If_000106013a030400" TARGET="TEXT">IGraphBuilder::RenderFile</A>, which should be used by C and C++ applications.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030700">IMediaControl::Run</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Switches the entire filter graph into a running state.

<P><B>HRESULT</B> <B>Run</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>In a running state, data is pushed down the filter graph and rendered.
The graph remains in a running state until it is stopped by the <A HREF="dssd0149.htm#If_000106013d030500" TARGET="TEXT">IMediaControl::Pause</A> or <A HREF="dssd0149.htm#If_000106013d030800" TARGET="TEXT">IMediaControl::Stop</A> method. The graph remains in a running state even after notifying the
application of completion (that is, the <A HREF="dssd0291.htm#events_0001060801000400" TARGET="TEXT">EC_COMPLETE</A> notification is sent to the application).
This allows the application to determine whether to pause or stop after completion.

<P>If the filter graph is in the stopped state, this method first pauses the graph before running.

<P>If an error value is returned, some filters within the graph might have successfully entered
the running state. In a multistream graph, entire streams might be playing successfully.
The application must determine whether to stop running or not.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030800">IMediaControl::Stop</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Switches all filters in the filter graph to a stopped state.

<P><B>HRESULT</B> <B>Stop</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>In this mode, filters release resources and no data is processed.
If the filters are in a running state, this method pauses them before stopping them. This allows
video renderers to make a copy of the current frame for poster frame display while stopped.
<H3><HR COLOR=#0000FF><A NAME="If_000106013d030900">IMediaControl::StopWhenReady</A></H3>
<A HREF="dssd0149.htm" TARGET="TEXT">IMediaControl Interface</A>
<P>Waits for an operation such as Pause to complete, allowing filters to queue up data, then
stops the filter graph.

<P><B>HRESULT</B> <B>StopWhenReady</B><B>(</B> <B>)</B><B>;</B><BR><H5>Return Values</H5>
<P>Returns an <A HREF="dssd0293.htm#errcodes_0001060a01000001" TARGET="TEXT">HRESULT</A> value.


<H5>Remarks</H5>
<P>Changing the current position when stopped will not normally repaint the
video window with the new position. Applications will need to enter Pause mode to do this.
Calling <B>StopWhenReady</B> instead of simply calling <A HREF="dssd0149.htm#If_000106013d030800" TARGET="TEXT">Stop</A> 
after this pause ensures that the graph is fully paused, and that data has arrived at the video 
renderer and has been displayed before the graph is stopped.

<P>This method is run asynchronously so that the application regains control immediately and can
respond to user input. Use this method rather than calling <A HREF="dssd0149.htm#If_000106013d030400" TARGET="TEXT">IMediaControl::GetState</A> with an INFINITE time-out, 
followed by <A HREF="dssd0149.htm#If_000106013d030800" TARGET="TEXT">IMediaControl::Stop</A>.
<P><P><FONT FACE="MS SANS SERIF" SIZE="1" COLOR="BLACK">
<A CLASS=cpslug HREF="copyrite.htm" TARGET="TEXT">&#169; 1997 Microsoft Corporation. All rights reserved. Terms of Use.</A>
</FONT>
<BR CLEAR=ALL><P>
</FONT><P>
</BODY></HTML>
